Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - faktory-1.1.3.0 (test:hspec) (ephemeral targets)
Preprocessing test suite 'hspec' for faktory-1.1.3.0...
Building test suite 'hspec' for faktory-1.1.3.0...
Running 1 test suites...
Test suite hspec: RUNNING...

Faktory
  Faktory
    can push and process jobs [✘]
    can push jobs with optional attributes [✘]
    can push Jobs to run at a given time [✘]
    can push Jobs to run in a given amount of seconds [✘]
    correctly handles fetch timeouts [✘]
    does not process jobs when reserve_for timeout expires [✘]
    processes jobs within reserve_for window [✘]
    fails jobs that raise exceptions [✘]
    fails jobs that didn't parse [✘]
Faktory.Connection
  envConnectionInfo
    returns default settings in an empty environment [✔]
    parses the provided URL [✔]
    parses tls and password [✔]
    parses namespace [✔]
    follows _PROVIDER to find _URL [✔]
    throws nice errors for invalid PROVIDER [✔]
    throws nice errors for invalid _URL [✔]
    throws nice errors for missing _PROVIDER [‐]
      # PENDING: This makes implementation more complicated
Faktory.Ent.Batch
  jobBatchId
    parses the batchId out of batch jobs [✘]
  runBatch
    runs a success job if all in-batch jobs succeed [✘]
    does not run a success job if all jobs don't succeed [✘]
    runs a job on complete [✘]
    runs a job on complete, even if in-batch jobs fail [✘]
    combines duplicate options in last-wins fashion [✘]
    runs success and complete if all Jobs were successful [✘]
    supports BATCH STATUS [✘]
Faktory.Ent.Tracking
  tracked
    adds custom option so we can use TRACK GET later [✘]
  trackSet
    updates Job Details [✘]
Faktory.Job
  jobRetriesRemaining
    handles first consumed [✔]
    handles a first retry [✔]
    handles a final retry [✔]
    uses Faktory's default [✔]
    handles retry -1 [✔]
    handles retry 0 [✔]
    handles nonsense [✔]
    handles reserve_for [✔]
  buildJob
    defaults to jobtype 'default' [✘]
    adds job option defaults from settings [✘]
    doesn't prefers explicit job options over defaults in settings [✘]
Faktory.JobOptions
  JobOptions
    (<>)
      uses Last semantics [✔]
      merges custom fields [✔]
    getAtFromSchedule
      sets at based on in [✔]
      respects the last option given [✔]
    namespaceQueue
      leaves no queue alone [✔]
      namespaces a queue when given [✔]

Failures:

  tests/FaktorySpec.hs:13:3: 
  1) Faktory.Faktory can push and process jobs
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory/Faktory/can push and process jobs/" --seed 596837388

  tests/FaktorySpec.hs:20:3: 
  2) Faktory.Faktory can push jobs with optional attributes
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory/Faktory/can push jobs with optional attributes/" --seed 596837388

  tests/FaktorySpec.hs:27:3: 
  3) Faktory.Faktory can push Jobs to run at a given time
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory/Faktory/can push Jobs to run at a given time/" --seed 596837388

  tests/FaktorySpec.hs:34:3: 
  4) Faktory.Faktory can push Jobs to run in a given amount of seconds
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory/Faktory/can push Jobs to run in a given amount of seconds/" --seed 596837388

  tests/FaktorySpec.hs:40:3: 
  5) Faktory.Faktory correctly handles fetch timeouts
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory/Faktory/correctly handles fetch timeouts/" --seed 596837388

  tests/FaktorySpec.hs:55:3: 
  6) Faktory.Faktory does not process jobs when reserve_for timeout expires
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory/Faktory/does not process jobs when reserve_for timeout expires/" --seed 596837388

  tests/FaktorySpec.hs:61:3: 
  7) Faktory.Faktory processes jobs within reserve_for window
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory/Faktory/processes jobs within reserve_for window/" --seed 596837388

  tests/FaktorySpec.hs:67:3: 
  8) Faktory.Faktory fails jobs that raise exceptions
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory/Faktory/fails jobs that raise exceptions/" --seed 596837388

  tests/FaktorySpec.hs:73:3: 
  9) Faktory.Faktory fails jobs that didn't parse
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory/Faktory/fails jobs that didn't parse/" --seed 596837388

  tests/Faktory/Ent/BatchSpec.hs:17:5: 
  10) Faktory.Ent.Batch.jobBatchId parses the batchId out of batch jobs
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory.Ent.Batch/jobBatchId/parses the batchId out of batch jobs/" --seed 596837388

  tests/Faktory/Ent/BatchSpec.hs:37:5: 
  11) Faktory.Ent.Batch.runBatch runs a success job if all in-batch jobs succeed
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory.Ent.Batch/runBatch/runs a success job if all in-batch jobs succeed/" --seed 596837388

  tests/Faktory/Ent/BatchSpec.hs:48:5: 
  12) Faktory.Ent.Batch.runBatch does not run a success job if all jobs don't succeed
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory.Ent.Batch/runBatch/does not run a success job if all jobs don't succeed/" --seed 596837388

  tests/Faktory/Ent/BatchSpec.hs:58:5: 
  13) Faktory.Ent.Batch.runBatch runs a job on complete
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory.Ent.Batch/runBatch/runs a job on complete/" --seed 596837388

  tests/Faktory/Ent/BatchSpec.hs:68:5: 
  14) Faktory.Ent.Batch.runBatch runs a job on complete, even if in-batch jobs fail
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory.Ent.Batch/runBatch/runs a job on complete, even if in-batch jobs fail/" --seed 596837388

  tests/Faktory/Ent/BatchSpec.hs:78:5: 
  15) Faktory.Ent.Batch.runBatch combines duplicate options in last-wins fashion
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory.Ent.Batch/runBatch/combines duplicate options in last-wins fashion/" --seed 596837388

  tests/Faktory/Ent/BatchSpec.hs:90:5: 
  16) Faktory.Ent.Batch.runBatch runs success and complete if all Jobs were successful
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory.Ent.Batch/runBatch/runs success and complete if all Jobs were successful/" --seed 596837388

  tests/Faktory/Ent/BatchSpec.hs:102:5: 
  17) Faktory.Ent.Batch.runBatch supports BATCH STATUS
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory.Ent.Batch/runBatch/supports BATCH STATUS/" --seed 596837388

  tests/Faktory/Ent/TrackingSpec.hs:15:5: 
  18) Faktory.Ent.Tracking.tracked adds custom option so we can use TRACK GET later
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory.Ent.Tracking/tracked/adds custom option so we can use TRACK GET later/" --seed 596837388

  tests/Faktory/Ent/TrackingSpec.hs:40:5: 
  19) Faktory.Ent.Tracking.trackSet updates Job Details
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory.Ent.Tracking/trackSet/updates Job Details/" --seed 596837388

  tests/Faktory/JobSpec.hs:160:5: 
  20) Faktory.Job.buildJob defaults to jobtype 'default'
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory.Job/buildJob/defaults to jobtype 'default'/" --seed 596837388

  tests/Faktory/JobSpec.hs:166:5: 
  21) Faktory.Job.buildJob adds job option defaults from settings
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory.Job/buildJob/adds job option defaults from settings/" --seed 596837388

  tests/Faktory/JobSpec.hs:173:5: 
  22) Faktory.Job.buildJob doesn't prefers explicit job options over defaults in settings
       uncaught exception: HostCannotConnect
       HostCannotConnect "localhost" [Network.Socket.connect: <socket: 4>: does not exist (Connection refused),Network.Socket.connect: <socket: 4>: does not exist (Connection refused)]

  To rerun use: --match "/Faktory.Job/buildJob/doesn't prefers explicit job options over defaults in settings/" --seed 596837388

Randomized with seed 596837388

Finished in 0.0403 seconds
44 examples, 22 failures, 1 pending
Test suite hspec: FAIL
Test suite logged to:
/tmp/workdir-faktory/faktory-1.1.3.0/dist-newstyle/build/x86_64-linux/ghc-9.6.6/faktory-1.1.3.0/t/hspec/test/faktory-1.1.3.0-hspec.log
0 of 1 test suites (0 of 1 test cases) passed.
Error: [Cabal-7125]
Tests failed for test:hspec from faktory-1.1.3.0.

