Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - persistent-mongoDB-2.13.1.0 (test:test) (ephemeral targets)
Preprocessing test suite 'test' for persistent-mongoDB-2.13.1.0...
Building test suite 'test' for persistent-mongoDB-2.13.1.0...
Running 1 test suites...
Test suite test: RUNNING...

rename specs
  LowerCaseTable
    LowerCaseTable has the right sql name [✔]
  user specified id, insertKey, no default= [✘]
  extra blocks [✔]
data type specs
  handles all types [✘]
html
  works [✘]
embedded entities
  simple entities [✘]
  query for equality of embeded entity [✘]
  Set [✘]
  Set empty [✘]
  exception [✘]
  ListEmbed [✘]
  ListEmbed empty [✘]
  List empty [✘]
  NonEmpty List wrapper [✘]
  Map [✘]
  Map empty [✘]
  Embeds a Map [✘]
  Embeds a Map empty [✘]
  Embeds a Map with ids as values [✘]
  List [✘]
  can embed an Entity [✘]
  can embed objects with ObjectIds [✘]
  mongoDB filters
    mongo single nesting filters [✘]
    mongo embedded array filters [✘]
    regexp match [✘]
    nested anyEq [✘]
  mongoDB updates
    mongo single nesting updates [✘]
    mongo embedded array updates [✘]
  re-orders json inserted from another source [✘]
embedded entities
  preserves ordering [✘]
  PersistMap PersistValue serializaion [✘]
Large Numbers
  preserves their values in the database [✘]
Maximum length attribute
  truncates values that are too long [✘]
Maybe Field Definitions
  runs appropriate migrations [✘]
Type Lit Field Definitions
  runs appropriate migrations [✘]
recursive definitions
  mutually recursive [✘]
sum types
  works [✘]
MigrationOnly field
  getEntityFields
    should have two fields [✔]
    should not have any migration only fields [✔]
  getEntityFieldsDatabase
    should have three fields [✔]
    should have at one migration only field [✔]
  doesn't have the field in the Haskell entity [✘]
persistent
  SafeToRemove
    DudeWeirdColumns
      can insert and get [✘]
      can putMany [✘]
  fieldLens [✔]
  FilterAnd [] [✘]
  Filter In [✘]
  order of opts is irrelevant [✘]
  passes the general tests [✘]
  persistIdField [✘]
  !=. [✘]
  Double Maybe [✘]
  and/or [✘]
  deleteWhere [✘]
  deleteBy [✘]
  delete [✘]
  toPathPiece . fromPathPiece [✔]
    +++ OK, passed 100 tests.
  replace [✘]
  getBy [✘]
  updateGet [✘]
  repsertMany
    adds new rows when no conflicts [✘]
    handles conflicts by replacing old keys with new records [✘]
  updateWhere [✘]
  selectList [✘]
  selectSource [✘]
  selectFirst [✘]
  selectKeys [✘]
  insertMany_ with no arguments [✘]
  insertEntityMany [✘]
  insertBy [✘]
  insertKey [✘]
  insertEntity [✘]
  insertRecord [✘]
  getEntity [✘]
  getJustEntity [✘]
  repsert [✘]
  retrieves a belongsToJust association [✘]
  retrieves a belongsTo association [✘]
  derivePersistField [✘]
  derivePersistFieldJSON [✘]
  idIn [✘]
  In [✘]
  toJSON
    serializes [✘]
  strictness
    bang [✔]
    tilde [✔]
    blank [✔]
  documentation syntax
    provides comments on entity def [✔]
    provides comments on the field [✔]
UpsertTests
  upsert
    adds a new row with no updates [✘]
    keeps the existing row [✘]
    updates an existing row - assignment [✘]
    updates existing row - addition  [✘]
  upsertBy
    adds a new row with no updates [✘]
    keeps the existing row [✘]
    updates an existing row [✘]
    updates by the appropriate constraint [✘]
  maybe update [✘]
  putMany
    adds new rows when entity has no unique constraints [✘]
    adds new rows when no conflicts [✘]
    handles conflicts by replacing old keys with new records [✘]
empty entity
  inserts [✘]
Custom persist field
  should read what it wrote [✘]

Failures:

  src/RenameTest.hs:82:5: 
  1) rename specs user specified id, insertKey, no default=
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/rename specs/user specified id, insertKey, no default=/" --seed 1899994320

  src/DataTypeTest.hs:108:5: 
  2) data type specs handles all types
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/data type specs/handles all types/" --seed 1899994320

  src/HtmlTest.hs:30:5: 
  3) html works
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/html/works/" --seed 1899994320

  test/EmbedTestMongo.hs:192:3: 
  4) embedded entities simple entities
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/simple entities/" --seed 1899994320

  test/EmbedTestMongo.hs:199:3: 
  5) embedded entities query for equality of embeded entity
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/query for equality of embeded entity/" --seed 1899994320

  test/EmbedTestMongo.hs:205:3: 
  6) embedded entities Set
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/Set/" --seed 1899994320

  test/EmbedTestMongo.hs:214:3: 
  7) embedded entities Set empty
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/Set empty/" --seed 1899994320

  test/EmbedTestMongo.hs:220:3: 
  8) embedded entities exception
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/exception/" --seed 1899994320

  test/EmbedTestMongo.hs:229:3: 
  9) embedded entities ListEmbed
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/ListEmbed/" --seed 1899994320

  test/EmbedTestMongo.hs:238:3: 
  10) embedded entities ListEmbed empty
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/ListEmbed empty/" --seed 1899994320

  test/EmbedTestMongo.hs:244:3: 
  11) embedded entities List empty
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/List empty/" --seed 1899994320

  test/EmbedTestMongo.hs:250:3: 
  12) embedded entities NonEmpty List wrapper
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/NonEmpty List wrapper/" --seed 1899994320

  test/EmbedTestMongo.hs:259:3: 
  13) embedded entities Map
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/Map/" --seed 1899994320

  test/EmbedTestMongo.hs:268:3: 
  14) embedded entities Map empty
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/Map empty/" --seed 1899994320

  test/EmbedTestMongo.hs:274:3: 
  15) embedded entities Embeds a Map
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/Embeds a Map/" --seed 1899994320

  test/EmbedTestMongo.hs:283:3: 
  16) embedded entities Embeds a Map empty
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/Embeds a Map empty/" --seed 1899994320

  test/EmbedTestMongo.hs:289:3: 
  17) embedded entities Embeds a Map with ids as values
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/Embeds a Map with ids as values/" --seed 1899994320

  test/EmbedTestMongo.hs:297:3: 
  18) embedded entities List
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/List/" --seed 1899994320

  test/EmbedTestMongo.hs:305:3: 
  19) embedded entities can embed an Entity
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/can embed an Entity/" --seed 1899994320

  test/EmbedTestMongo.hs:318:3: 
  20) embedded entities can embed objects with ObjectIds
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/can embed objects with ObjectIds/" --seed 1899994320

  test/EmbedTestMongo.hs:328:5: 
  21) embedded entities, mongoDB filters, mongo single nesting filters
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/mongoDB filters/mongo single nesting filters/" --seed 1899994320

  test/EmbedTestMongo.hs:338:5: 
  22) embedded entities, mongoDB filters, mongo embedded array filters
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/mongoDB filters/mongo embedded array filters/" --seed 1899994320

  test/EmbedTestMongo.hs:363:5: 
  23) embedded entities, mongoDB filters, regexp match
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/mongoDB filters/regexp match/" --seed 1899994320

  test/EmbedTestMongo.hs:373:5: 
  24) embedded entities, mongoDB filters, nested anyEq
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/mongoDB filters/nested anyEq/" --seed 1899994320

  test/EmbedTestMongo.hs:382:5: 
  25) embedded entities, mongoDB updates, mongo single nesting updates
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/mongoDB updates/mongo single nesting updates/" --seed 1899994320

  test/EmbedTestMongo.hs:398:5: 
  26) embedded entities, mongoDB updates, mongo embedded array updates
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/mongoDB updates/mongo embedded array updates/" --seed 1899994320

  test/EmbedTestMongo.hs:431:3: 
  27) embedded entities re-orders json inserted from another source
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/re-orders json inserted from another source/" --seed 1899994320

  src/EmbedOrderTest.hs:31:5: 
  28) embedded entities preserves ordering
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/preserves ordering/" --seed 1899994320

  src/EmbedOrderTest.hs:37:5: 
  29) embedded entities PersistMap PersistValue serializaion
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/embedded entities/PersistMap PersistValue serializaion/" --seed 1899994320

  src/LargeNumberTest.hs:25:3: 
  30) Large Numbers preserves their values in the database
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/Large Numbers/preserves their values in the database/" --seed 1899994320

  src/MaxLenTest.hs:29:3: 
  31) Maximum length attribute truncates values that are too long
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/Maximum length attribute/truncates values that are too long/" --seed 1899994320

  src/MaybeFieldDefsTest.hs:20:3: 
  32) Maybe Field Definitions runs appropriate migrations
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/Maybe Field Definitions/runs appropriate migrations/" --seed 1899994320

  src/TypeLitFieldDefsTest.hs:59:9: 
  33) Type Lit Field Definitions runs appropriate migrations
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/Type Lit Field Definitions/runs appropriate migrations/" --seed 1899994320

  src/Recursive.hs:37:3: 
  34) recursive definitions mutually recursive
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/recursive definitions/mutually recursive/" --seed 1899994320

  src/SumTypeTest.hs:39:5: 
  35) sum types works
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/sum types/works/" --seed 1899994320

  src/MigrationOnlyTest.hs:60:5: 
  36) MigrationOnly field doesn't have the field in the Haskell entity
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/MigrationOnly field/doesn't have the field in the Haskell entity/" --seed 1899994320

  src/PersistentTest.hs:79:9: 
  37) persistent.SafeToRemove.DudeWeirdColumns can insert and get
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/SafeToRemove/DudeWeirdColumns/can insert and get/" --seed 1899994320

  src/PersistentTest.hs:85:9: 
  38) persistent.SafeToRemove.DudeWeirdColumns can putMany
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/SafeToRemove/DudeWeirdColumns/can putMany/" --seed 1899994320

  src/PersistentTest.hs:101:3: 
  39) persistent FilterAnd []
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/FilterAnd []/" --seed 1899994320

  src/PersistentTest.hs:107:3: 
  40) persistent Filter In
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/Filter In/" --seed 1899994320

  src/PersistentTest.hs:111:3: 
  41) persistent order of opts is irrelevant
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/order of opts is irrelevant/" --seed 1899994320

  src/PersistentTest.hs:138:3: 
  42) persistent passes the general tests
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/passes the general tests/" --seed 1899994320

  src/PersistentTest.hs:189:3: 
  43) persistent persistIdField
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/persistIdField/" --seed 1899994320

  src/PersistentTest.hs:201:3: 
  44) persistent !=.
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/!=./" --seed 1899994320

  src/PersistentTest.hs:218:3: 
  45) persistent Double Maybe
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/Double Maybe/" --seed 1899994320

  src/PersistentTest.hs:229:3: 
  46) persistent and/or
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/and/or/" --seed 1899994320

  src/PersistentTest.hs:265:3: 
  47) persistent deleteWhere
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/deleteWhere/" --seed 1899994320

  src/PersistentTest.hs:282:3: 
  48) persistent deleteBy
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/deleteBy/" --seed 1899994320

  src/PersistentTest.hs:298:3: 
  49) persistent delete
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/delete/" --seed 1899994320

  src/PersistentTest.hs:317:3: 
  50) persistent replace
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/replace/" --seed 1899994320

  src/PersistentTest.hs:347:3: 
  51) persistent getBy
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/getBy/" --seed 1899994320

  src/PersistentTest.hs:361:3: 
  52) persistent updateGet
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/updateGet/" --seed 1899994320

  src/PersistentTest.hs:370:5: 
  53) persistent.repsertMany adds new rows when no conflicts
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/repsertMany/adds new rows when no conflicts/" --seed 1899994320

  src/PersistentTest.hs:387:5: 
  54) persistent.repsertMany handles conflicts by replacing old keys with new records
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/repsertMany/handles conflicts by replacing old keys with new records/" --seed 1899994320

  src/PersistentTest.hs:403:3: 
  55) persistent updateWhere
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/updateWhere/" --seed 1899994320

  src/PersistentTest.hs:415:3: 
  56) persistent selectList
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/selectList/" --seed 1899994320

  src/PersistentTest.hs:436:3: 
  57) persistent selectSource
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/selectSource/" --seed 1899994320

  src/PersistentTest.hs:461:3: 
  58) persistent selectFirst
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/selectFirst/" --seed 1899994320

  src/PersistentTest.hs:470:3: 
  59) persistent selectKeys
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/selectKeys/" --seed 1899994320

  src/PersistentTest.hs:495:3: 
  60) persistent insertMany_ with no arguments
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/insertMany_ with no arguments/" --seed 1899994320

  src/PersistentTest.hs:506:3: 
  61) persistent insertEntityMany
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/insertEntityMany/" --seed 1899994320

  src/PersistentTest.hs:517:3: 
  62) persistent insertBy
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/insertBy/" --seed 1899994320

  src/PersistentTest.hs:523:3: 
  63) persistent insertKey
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/insertKey/" --seed 1899994320

  src/PersistentTest.hs:529:3: 
  64) persistent insertEntity
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/insertEntity/" --seed 1899994320

  src/PersistentTest.hs:534:3: 
  65) persistent insertRecord
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/insertRecord/" --seed 1899994320

  src/PersistentTest.hs:539:3: 
  66) persistent getEntity
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/getEntity/" --seed 1899994320

  src/PersistentTest.hs:545:3: 
  67) persistent getJustEntity
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/getJustEntity/" --seed 1899994320

  src/PersistentTest.hs:552:3: 
  68) persistent repsert
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/repsert/" --seed 1899994320

  src/PersistentTest.hs:563:3: 
  69) persistent retrieves a belongsToJust association
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/retrieves a belongsToJust association/" --seed 1899994320

  src/PersistentTest.hs:572:3: 
  70) persistent retrieves a belongsTo association
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/retrieves a belongsTo association/" --seed 1899994320

  src/PersistentTest.hs:581:3: 
  71) persistent derivePersistField
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/derivePersistField/" --seed 1899994320

  src/PersistentTest.hs:590:3: 
  72) persistent derivePersistFieldJSON
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/derivePersistFieldJSON/" --seed 1899994320

  src/PersistentTest.hs:597:3: 
  73) persistent idIn
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/idIn/" --seed 1899994320

  src/PersistentTest.hs:607:3: 
  74) persistent In
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/In/" --seed 1899994320

  src/PersistentTest.hs:630:5: 
  75) persistent.toJSON serializes
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/persistent/toJSON/serializes/" --seed 1899994320

  src/UpsertTest.hs:36:5: 
  76) UpsertTests.upsert adds a new row with no updates
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/UpsertTests/upsert/adds a new row with no updates/" --seed 1899994320

  src/UpsertTest.hs:41:5: 
  77) UpsertTests.upsert keeps the existing row
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/UpsertTests/upsert/keeps the existing row/" --seed 1899994320

  src/UpsertTest.hs:46:5: 
  78) UpsertTests.upsert updates an existing row - assignment
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/UpsertTests/upsert/updates an existing row - assignment/" --seed 1899994320

  src/UpsertTest.hs:62:5: 
  79) UpsertTests.upsert updates existing row - addition 
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/UpsertTests/upsert/updates existing row - addition /" --seed 1899994320

  src/UpsertTest.hs:82:5: 
  80) UpsertTests.upsertBy adds a new row with no updates
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/UpsertTests/upsertBy/adds a new row with no updates/" --seed 1899994320

  src/UpsertTest.hs:91:5: 
  81) UpsertTests.upsertBy keeps the existing row
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/UpsertTests/upsertBy/keeps the existing row/" --seed 1899994320

  src/UpsertTest.hs:96:5: 
  82) UpsertTests.upsertBy updates an existing row
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/UpsertTests/upsertBy/updates an existing row/" --seed 1899994320

  src/UpsertTest.hs:118:5: 
  83) UpsertTests.upsertBy updates by the appropriate constraint
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/UpsertTests/upsertBy/updates by the appropriate constraint/" --seed 1899994320

  src/UpsertTest.hs:136:3: 
  84) UpsertTests maybe update
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/UpsertTests/maybe update/" --seed 1899994320

  src/UpsertTest.hs:150:5: 
  85) UpsertTests.putMany adds new rows when entity has no unique constraints
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/UpsertTests/putMany/adds new rows when entity has no unique constraints/" --seed 1899994320

  src/UpsertTest.hs:159:5: 
  86) UpsertTests.putMany adds new rows when no conflicts
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/UpsertTests/putMany/adds new rows when no conflicts/" --seed 1899994320

  src/UpsertTest.hs:171:5: 
  87) UpsertTests.putMany handles conflicts by replacing old keys with new records
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/UpsertTests/putMany/handles conflicts by replacing old keys with new records/" --seed 1899994320

  src/EmptyEntityTest.hs:30:5: 
  88) empty entity inserts
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/empty entity/inserts/" --seed 1899994320

  src/CustomPersistFieldTest.hs:16:3: 
  89) Custom persist field should read what it wrote
       uncaught exception: IOException of type NoSuchThing
       Network.Socket.connect: <socket: 4>: does not exist (Connection refused)

  To rerun use: --match "/Custom persist field/should read what it wrote/" --seed 1899994320

Randomized with seed 1899994320

Finished in 0.0083 seconds
102 examples, 89 failures
Test suite test: FAIL
Test suite logged to:
/tmp/workdir-persistent-mongoDB/persistent-mongoDB-2.13.1.0/dist-newstyle/build/x86_64-linux/ghc-9.6.6/persistent-mongoDB-2.13.1.0/t/test/test/persistent-mongoDB-2.13.1.0-test.log
0 of 1 test suites (0 of 1 test cases) passed.
Error: [Cabal-7125]
Tests failed for test:test from persistent-mongoDB-2.13.1.0.

