Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - filepath-bytestring-1.4.100.3.2 (test:filepath-tests) (ephemeral targets)
Preprocessing test suite 'filepath-tests' for filepath-bytestring-1.4.100.3.2...
Building test suite 'filepath-tests' for filepath-bytestring-1.4.100.3.2...
Running 1 test suites...
Test suite filepath-tests: RUNNING...
Testing with 10000 repetitions
Test 1 of 534: equiv Posix.isPathSeparator
Test 2 of 534: equiv Posix.isSearchPathSeparator
Test 3 of 534: equiv Posix.isExtSeparator
Test 4 of 534: equiv Posix.splitExtension
Test 5 of 534: equiv Posix.takeExtension
Test 6 of 534: equiv Posix.replaceExtension
Test 7 of 534: equiv Posix.dropExtension
Test 8 of 534: equiv Posix.addExtension
Test 9 of 534: equiv Posix.hasExtension
Test 10 of 534: equiv Posix.splitExtensions
Test 11 of 534: equiv Posix.dropExtensions
Test 12 of 534: equiv Posix.takeExtensions
Test 13 of 534: equiv Posix.replaceExtensions
Test 14 of 534: equiv Posix.isExtensionOf
Test 15 of 534: equiv Posix.stripExtension
Test 16 of 534: equiv Posix.splitFileName
Test 17 of 534: equiv Posix.takeFileName
Test 18 of 534: equiv Posix.replaceFileName
Test 19 of 534: equiv Posix.dropFileName
Test 20 of 534: equiv Posix.takeBaseName
Test 21 of 534: equiv Posix.replaceBaseName
Test 22 of 534: equiv Posix.takeDirectory
Test 23 of 534: equiv Posix.replaceDirectory
Test 24 of 534: equiv Posix.combine
Test 25 of 534: equiv Posix.splitPath
Test 26 of 534: equiv Posix.joinPath
Test 27 of 534: equiv Posix.splitDirectories
Test 28 of 534: equiv Posix.splitDrive
Test 29 of 534: equiv Posix.joinDrive
Test 30 of 534: equiv Posix.takeDrive
Test 31 of 534: equiv Posix.hasDrive
Test 32 of 534: equiv Posix.dropDrive
Test 33 of 534: equiv Posix.isDrive
Test 34 of 534: equiv Posix.hasTrailingPathSeparator
Test 35 of 534: equiv Posix.addTrailingPathSeparator
Test 36 of 534: equiv Posix.dropTrailingPathSeparator
Test 37 of 534: equiv Posix.normalise
Test 38 of 534: equiv Posix.equalFilePath
Test 39 of 534: equiv Posix.makeRelative
Test 40 of 534: equiv Posix.splitSearchPath
Test 41 of 534: equiv Posix.makeValid
Test 42 of 534: equiv Windows.isPathSeparator
Test 43 of 534: equiv Windows.isSearchPathSeparator
Test 44 of 534: equiv Windows.isExtSeparator
Test 45 of 534: equiv Windows.splitExtension
Test 46 of 534: equiv Windows.takeExtension
Test 47 of 534: equiv Windows.replaceExtension
Test 48 of 534: equiv Windows.dropExtension
Test 49 of 534: equiv Windows.addExtension
Test 50 of 534: equiv Windows.hasExtension
Test 51 of 534: equiv Windows.splitExtensions
Test 52 of 534: equiv Windows.dropExtensions
Test 53 of 534: equiv Windows.takeExtensions
Test 54 of 534: equiv Windows.replaceExtensions
Test 55 of 534: equiv Windows.isExtensionOf
Test 56 of 534: equiv Windows.stripExtension
Test 57 of 534: equiv Windows.splitFileName
Test 58 of 534: equiv Windows.takeFileName
Test 59 of 534: equiv Windows.replaceFileName
Test 60 of 534: equiv Windows.dropFileName
Test 61 of 534: equiv Windows.takeBaseName
Test 62 of 534: equiv Windows.replaceBaseName
Test 63 of 534: equiv Windows.takeDirectory
Test 64 of 534: equiv Windows.replaceDirectory
Test 65 of 534: equiv Windows.combine
Test 66 of 534: equiv Windows.splitPath
Test 67 of 534: equiv Windows.joinPath
Test 68 of 534: equiv Windows.splitDirectories
Test 69 of 534: equiv Windows.splitDrive
Test 70 of 534: equiv Windows.joinDrive
Test 71 of 534: equiv Windows.takeDrive
Test 72 of 534: equiv Windows.hasDrive
Test 73 of 534: equiv Windows.dropDrive
Test 74 of 534: equiv Windows.isDrive
Test 75 of 534: equiv Windows.hasTrailingPathSeparator
Test 76 of 534: equiv Windows.addTrailingPathSeparator
Test 77 of 534: equiv Windows.dropTrailingPathSeparator
Test 78 of 534: equiv Windows.normalise
Failure {numTests = 779, numDiscarded = 0, numShrinks = 5, numShrinkTries = 15, numShrinkFinal = 10, usedSeed = SMGen 13141975468429031577 5352040430501260089, usedSize = 78, reason = "Falsified", theException = Nothing, output = "", failingTestCase = ["QFilePath \"a://\""], failingLabels = [], failingClasses = fromList []}
*** Failed! Falsified (after 779 tests and 5 shrinks):
QFilePath "a://"

TEST FAILURE!
Test 79 of 534: equiv Windows.equalFilePath
Test 80 of 534: equiv Windows.makeRelative
Test 81 of 534: equiv Windows.splitSearchPath
Test 82 of 534: equiv Windows.makeValid
Test 83 of 534: W.pathSeparator == fromIntegral (ord '\\')
Test 84 of 534: P.pathSeparator == fromIntegral (ord '/')
Test 85 of 534: P.isPathSeparator P.pathSeparator
Test 86 of 534: W.isPathSeparator W.pathSeparator
Test 87 of 534: W.pathSeparators == [fromIntegral (ord '\\'), fromIntegral (ord '/')]
Test 88 of 534: P.pathSeparators == [fromIntegral (ord '/')]
Test 89 of 534: P.pathSeparator `elem` P.pathSeparators
Test 90 of 534: W.pathSeparator `elem` W.pathSeparators
Test 91 of 534: P.isPathSeparator a == (a `elem` P.pathSeparators)
Test 92 of 534: W.isPathSeparator a == (a `elem` W.pathSeparators)
Test 93 of 534: W.searchPathSeparator == fromIntegral (ord ';')
Test 94 of 534: P.searchPathSeparator == fromIntegral (ord ':')
Test 95 of 534: P.isSearchPathSeparator a == (a == P.searchPathSeparator)
Test 96 of 534: W.isSearchPathSeparator a == (a == W.searchPathSeparator)
Test 97 of 534: P.extSeparator == fromIntegral (ord '.')
Test 98 of 534: W.extSeparator == fromIntegral (ord '.')
Test 99 of 534: P.isExtSeparator a == (a == P.extSeparator)
Test 100 of 534: W.isExtSeparator a == (a == W.extSeparator)
Test 101 of 534: P.splitSearchPath "File1:File2:File3" == ["File1", "File2", "File3"]
Test 102 of 534: P.splitSearchPath "File1::File2:File3" == ["File1", ".", "File2", "File3"]
Test 103 of 534: W.splitSearchPath "File1;File2;File3" == ["File1", "File2", "File3"]
Test 104 of 534: W.splitSearchPath "File1;;File2;File3" == ["File1", "File2", "File3"]
Test 105 of 534: W.splitSearchPath "File1;\"File2\";File3" == ["File1", "File2", "File3"]
Test 106 of 534: P.splitExtension "/directory/path.ext" == ("/directory/path", ".ext")
Test 107 of 534: W.splitExtension "/directory/path.ext" == ("/directory/path", ".ext")
Test 108 of 534: uncurry (<>) (P.splitExtension x) == x
Test 109 of 534: uncurry (<>) (W.splitExtension x) == x
Test 110 of 534: uncurry P.addExtension (P.splitExtension x) == x
Test 111 of 534: uncurry W.addExtension (W.splitExtension x) == x
Test 112 of 534: P.splitExtension "file.txt" == ("file", ".txt")
Test 113 of 534: W.splitExtension "file.txt" == ("file", ".txt")
Test 114 of 534: P.splitExtension "file" == ("file", "")
Test 115 of 534: W.splitExtension "file" == ("file", "")
Test 116 of 534: P.splitExtension "file/file.txt" == ("file/file", ".txt")
Test 117 of 534: W.splitExtension "file/file.txt" == ("file/file", ".txt")
Test 118 of 534: P.splitExtension "file.txt/boris" == ("file.txt/boris", "")
Test 119 of 534: W.splitExtension "file.txt/boris" == ("file.txt/boris", "")
Test 120 of 534: P.splitExtension "file.txt/boris.ext" == ("file.txt/boris", ".ext")
Test 121 of 534: W.splitExtension "file.txt/boris.ext" == ("file.txt/boris", ".ext")
Test 122 of 534: P.splitExtension "file/path.txt.bob.fred" == ("file/path.txt.bob", ".fred")
Test 123 of 534: W.splitExtension "file/path.txt.bob.fred" == ("file/path.txt.bob", ".fred")
Test 124 of 534: P.splitExtension "file/path.txt/" == ("file/path.txt/", "")
Test 125 of 534: W.splitExtension "file/path.txt/" == ("file/path.txt/", "")
Test 126 of 534: P.takeExtension "/directory/path.ext" == ".ext"
Test 127 of 534: W.takeExtension "/directory/path.ext" == ".ext"
Test 128 of 534: P.takeExtension x == snd (P.splitExtension x)
Test 129 of 534: W.takeExtension x == snd (W.splitExtension x)
Test 130 of 534: P.takeExtension (P.addExtension x "ext") == ".ext"
Test 131 of 534: W.takeExtension (W.addExtension x "ext") == ".ext"
Test 132 of 534: P.takeExtension (P.replaceExtension x "ext") == ".ext"
Test 133 of 534: W.takeExtension (W.replaceExtension x "ext") == ".ext"
Test 134 of 534: "/directory/path.txt" P.-<.> "ext" == "/directory/path.ext"
Test 135 of 534: "/directory/path.txt" W.-<.> "ext" == "/directory/path.ext"
Test 136 of 534: "/directory/path.txt" P.-<.> ".ext" == "/directory/path.ext"
Test 137 of 534: "/directory/path.txt" W.-<.> ".ext" == "/directory/path.ext"
Test 138 of 534: "foo.o" P.-<.> "c" == "foo.c"
Test 139 of 534: "foo.o" W.-<.> "c" == "foo.c"
Test 140 of 534: P.replaceExtension "/directory/path.txt" "ext" == "/directory/path.ext"
Test 141 of 534: W.replaceExtension "/directory/path.txt" "ext" == "/directory/path.ext"
Test 142 of 534: P.replaceExtension "/directory/path.txt" ".ext" == "/directory/path.ext"
Test 143 of 534: W.replaceExtension "/directory/path.txt" ".ext" == "/directory/path.ext"
Test 144 of 534: P.replaceExtension "file.txt" ".bob" == "file.bob"
Test 145 of 534: W.replaceExtension "file.txt" ".bob" == "file.bob"
Test 146 of 534: P.replaceExtension "file.txt" "bob" == "file.bob"
Test 147 of 534: W.replaceExtension "file.txt" "bob" == "file.bob"
Test 148 of 534: P.replaceExtension "file" ".bob" == "file.bob"
Test 149 of 534: W.replaceExtension "file" ".bob" == "file.bob"
Test 150 of 534: P.replaceExtension "file.txt" "" == "file"
Test 151 of 534: W.replaceExtension "file.txt" "" == "file"
Test 152 of 534: P.replaceExtension "file.fred.bob" "txt" == "file.fred.txt"
Test 153 of 534: W.replaceExtension "file.fred.bob" "txt" == "file.fred.txt"
Test 154 of 534: P.replaceExtension x y == P.addExtension (P.dropExtension x) y
Test 155 of 534: W.replaceExtension x y == W.addExtension (W.dropExtension x) y
Test 156 of 534: "/directory/path" P.<.> "ext" == "/directory/path.ext"
Test 157 of 534: "/directory/path" W.<.> "ext" == "/directory/path.ext"
Test 158 of 534: "/directory/path" P.<.> ".ext" == "/directory/path.ext"
Test 159 of 534: "/directory/path" W.<.> ".ext" == "/directory/path.ext"
Test 160 of 534: P.dropExtension "/directory/path.ext" == "/directory/path"
Test 161 of 534: W.dropExtension "/directory/path.ext" == "/directory/path"
Test 162 of 534: P.dropExtension x == fst (P.splitExtension x)
Test 163 of 534: W.dropExtension x == fst (W.splitExtension x)
Test 164 of 534: P.addExtension "/directory/path" "ext" == "/directory/path.ext"
Test 165 of 534: W.addExtension "/directory/path" "ext" == "/directory/path.ext"
Test 166 of 534: P.addExtension "file.txt" "bib" == "file.txt.bib"
Test 167 of 534: W.addExtension "file.txt" "bib" == "file.txt.bib"
Test 168 of 534: P.addExtension "file." ".bib" == "file..bib"
Test 169 of 534: W.addExtension "file." ".bib" == "file..bib"
Test 170 of 534: P.addExtension "file" ".bib" == "file.bib"
Test 171 of 534: W.addExtension "file" ".bib" == "file.bib"
Test 172 of 534: P.addExtension "/" "x" == "/.x"
Test 173 of 534: W.addExtension "/" "x" == "/.x"
Test 174 of 534: P.addExtension x "" == x
Test 175 of 534: W.addExtension x "" == x
Test 176 of 534: P.takeFileName (P.addExtension (P.addTrailingPathSeparator x) "ext") == ".ext"
Test 177 of 534: W.takeFileName (W.addExtension (W.addTrailingPathSeparator x) "ext") == ".ext"
Test 178 of 534: W.addExtension "\\\\share" ".txt" == "\\\\share\\.txt"
Test 179 of 534: P.hasExtension "/directory/path.ext" == True
Test 180 of 534: W.hasExtension "/directory/path.ext" == True
Test 181 of 534: P.hasExtension "/directory/path" == False
Test 182 of 534: W.hasExtension "/directory/path" == False
Test 183 of 534: null (P.takeExtension x) == not (P.hasExtension x)
Test 184 of 534: null (W.takeExtension x) == not (W.hasExtension x)
Test 185 of 534: "png" `P.isExtensionOf` "/directory/file.png" == True
Test 186 of 534: "png" `W.isExtensionOf` "/directory/file.png" == True
Test 187 of 534: ".png" `P.isExtensionOf` "/directory/file.png" == True
Test 188 of 534: ".png" `W.isExtensionOf` "/directory/file.png" == True
Test 189 of 534: ".tar.gz" `P.isExtensionOf` "bar/foo.tar.gz" == True
Test 190 of 534: ".tar.gz" `W.isExtensionOf` "bar/foo.tar.gz" == True
Test 191 of 534: "ar.gz" `P.isExtensionOf` "bar/foo.tar.gz" == False
Test 192 of 534: "ar.gz" `W.isExtensionOf` "bar/foo.tar.gz" == False
Test 193 of 534: "png" `P.isExtensionOf` "/directory/file.png.jpg" == False
Test 194 of 534: "png" `W.isExtensionOf` "/directory/file.png.jpg" == False
Test 195 of 534: "csv/table.csv" `P.isExtensionOf` "/data/csv/table.csv" == False
Test 196 of 534: "csv/table.csv" `W.isExtensionOf` "/data/csv/table.csv" == False
Test 197 of 534: P.stripExtension "hs.o" "foo.x.hs.o" == Just "foo.x"
Test 198 of 534: W.stripExtension "hs.o" "foo.x.hs.o" == Just "foo.x"
Test 199 of 534: P.stripExtension "hi.o" "foo.x.hs.o" == Nothing
Test 200 of 534: W.stripExtension "hi.o" "foo.x.hs.o" == Nothing
Test 201 of 534: P.dropExtension x == fromJust (P.stripExtension (P.takeExtension x) x)
Test 202 of 534: W.dropExtension x == fromJust (W.stripExtension (W.takeExtension x) x)
Test 203 of 534: P.dropExtensions x == fromJust (P.stripExtension (P.takeExtensions x) x)
Test 204 of 534: W.dropExtensions x == fromJust (W.stripExtension (W.takeExtensions x) x)
Test 205 of 534: P.stripExtension ".c.d" "a.b.c.d" == Just "a.b"
Test 206 of 534: W.stripExtension ".c.d" "a.b.c.d" == Just "a.b"
Test 207 of 534: P.stripExtension ".c.d" "a.b..c.d" == Just "a.b."
Test 208 of 534: W.stripExtension ".c.d" "a.b..c.d" == Just "a.b."
Test 209 of 534: P.stripExtension "baz" "foo.bar" == Nothing
Test 210 of 534: W.stripExtension "baz" "foo.bar" == Nothing
Test 211 of 534: P.stripExtension "bar" "foobar" == Nothing
Test 212 of 534: W.stripExtension "bar" "foobar" == Nothing
Test 213 of 534: P.stripExtension "" x == Just x
Test 214 of 534: W.stripExtension "" x == Just x
Test 215 of 534: P.splitExtensions "/directory/path.ext" == ("/directory/path", ".ext")
Test 216 of 534: W.splitExtensions "/directory/path.ext" == ("/directory/path", ".ext")
Test 217 of 534: P.splitExtensions "file.tar.gz" == ("file", ".tar.gz")
Test 218 of 534: W.splitExtensions "file.tar.gz" == ("file", ".tar.gz")
Test 219 of 534: uncurry (<>) (P.splitExtensions x) == x
Test 220 of 534: uncurry (<>) (W.splitExtensions x) == x
Test 221 of 534: uncurry P.addExtension (P.splitExtensions x) == x
Test 222 of 534: uncurry W.addExtension (W.splitExtensions x) == x
Test 223 of 534: P.splitExtensions "file.tar.gz" == ("file", ".tar.gz")
Test 224 of 534: W.splitExtensions "file.tar.gz" == ("file", ".tar.gz")
Test 225 of 534: P.dropExtensions "/directory/path.ext" == "/directory/path"
Test 226 of 534: W.dropExtensions "/directory/path.ext" == "/directory/path"
Test 227 of 534: P.dropExtensions "file.tar.gz" == "file"
Test 228 of 534: W.dropExtensions "file.tar.gz" == "file"
Test 229 of 534: not $ P.hasExtension $ P.dropExtensions x
Test 230 of 534: not $ W.hasExtension $ W.dropExtensions x
Test 231 of 534: not $ any P.isExtSeparator $ P.takeFileName $ P.dropExtensions x
Test 232 of 534: not $ any W.isExtSeparator $ W.takeFileName $ W.dropExtensions x
Test 233 of 534: P.takeExtensions "/directory/path.ext" == ".ext"
Test 234 of 534: W.takeExtensions "/directory/path.ext" == ".ext"
Test 235 of 534: P.takeExtensions "file.tar.gz" == ".tar.gz"
Test 236 of 534: W.takeExtensions "file.tar.gz" == ".tar.gz"
Test 237 of 534: P.replaceExtensions "file.fred.bob" "txt" == "file.txt"
Test 238 of 534: W.replaceExtensions "file.fred.bob" "txt" == "file.txt"
Test 239 of 534: P.replaceExtensions "file.fred.bob" "tar.gz" == "file.tar.gz"
Test 240 of 534: W.replaceExtensions "file.fred.bob" "tar.gz" == "file.tar.gz"
Test 241 of 534: uncurry (<>) (P.splitDrive x) == x
Test 242 of 534: uncurry (<>) (W.splitDrive x) == x
Test 243 of 534: W.splitDrive "file" == ("", "file")
Test 244 of 534: W.splitDrive "c:/file" == ("c:/", "file")
Test 245 of 534: W.splitDrive "c:\\file" == ("c:\\", "file")
Test 246 of 534: W.splitDrive "\\\\shared\\test" == ("\\\\shared\\", "test")
Test 247 of 534: W.splitDrive "\\\\shared" == ("\\\\shared", "")
Test 248 of 534: W.splitDrive "\\\\?\\UNC\\shared\\file" == ("\\\\?\\UNC\\shared\\", "file")
Test 249 of 534: W.splitDrive "\\\\?\\UNCshared\\file" == ("\\\\?\\", "UNCshared\\file")
Test 250 of 534: W.splitDrive "\\\\?\\d:\\file" == ("\\\\?\\d:\\", "file")
Test 251 of 534: W.splitDrive "/d" == ("", "/d")
Test 252 of 534: P.splitDrive "/test" == ("/", "test")
Test 253 of 534: P.splitDrive "//test" == ("//", "test")
Test 254 of 534: P.splitDrive "test/file" == ("", "test/file")
Test 255 of 534: P.splitDrive "file" == ("", "file")
Test 256 of 534: uncurry P.joinDrive (P.splitDrive x) == x
Test 257 of 534: uncurry W.joinDrive (W.splitDrive x) == x
Test 258 of 534: W.joinDrive "C:" "foo" == "C:foo"
Test 259 of 534: W.joinDrive "C:\\" "bar" == "C:\\bar"
Test 260 of 534: W.joinDrive "\\\\share" "foo" == "\\\\share\\foo"
Test 261 of 534: W.joinDrive "/:" "foo" == "/:\\foo"
Test 262 of 534: P.takeDrive x == fst (P.splitDrive x)
Test 263 of 534: W.takeDrive x == fst (W.splitDrive x)
Test 264 of 534: P.dropDrive x == snd (P.splitDrive x)
Test 265 of 534: W.dropDrive x == snd (W.splitDrive x)
Test 266 of 534: not (P.hasDrive x) == null (P.takeDrive x)
Test 267 of 534: not (W.hasDrive x) == null (W.takeDrive x)
Test 268 of 534: P.hasDrive "/foo" == True
Test 269 of 534: W.hasDrive "C:\\foo" == True
Test 270 of 534: W.hasDrive "C:foo" == True
Test 271 of 534: P.hasDrive "foo" == False
Test 272 of 534: W.hasDrive "foo" == False
Test 273 of 534: P.hasDrive "" == False
Test 274 of 534: W.hasDrive "" == False
Test 275 of 534: P.isDrive "/" == True
Test 276 of 534: P.isDrive "/foo" == False
Test 277 of 534: W.isDrive "C:\\" == True
Test 278 of 534: W.isDrive "C:\\foo" == False
Test 279 of 534: P.isDrive "" == False
Test 280 of 534: W.isDrive "" == False
Test 281 of 534: P.splitFileName "/directory/file.ext" == ("/directory/", "file.ext")
Test 282 of 534: W.splitFileName "/directory/file.ext" == ("/directory/", "file.ext")
Test 283 of 534: uncurry (P.</>) (P.splitFileName x) == x || fst (P.splitFileName x) == "./"
Test 284 of 534: uncurry (W.</>) (W.splitFileName x) == x || fst (W.splitFileName x) == "./"
Test 285 of 534: P.isValid (fst (P.splitFileName x))
Test 286 of 534: W.isValid (fst (W.splitFileName x))
Test 287 of 534: P.splitFileName "file/bob.txt" == ("file/", "bob.txt")
Test 288 of 534: W.splitFileName "file/bob.txt" == ("file/", "bob.txt")
Test 289 of 534: P.splitFileName "file/" == ("file/", "")
Test 290 of 534: W.splitFileName "file/" == ("file/", "")
Test 291 of 534: P.splitFileName "bob" == ("./", "bob")
Test 292 of 534: W.splitFileName "bob" == ("./", "bob")
Test 293 of 534: P.splitFileName "/" == ("/", "")
Test 294 of 534: W.splitFileName "c:" == ("c:", "")
Test 295 of 534: P.replaceFileName "/directory/other.txt" "file.ext" == "/directory/file.ext"
Test 296 of 534: W.replaceFileName "/directory/other.txt" "file.ext" == "/directory/file.ext"
Test 297 of 534: P.replaceFileName x (P.takeFileName x) == x
Test 298 of 534: W.replaceFileName x (W.takeFileName x) == x
Test 299 of 534: P.dropFileName "/directory/file.ext" == "/directory/"
Test 300 of 534: W.dropFileName "/directory/file.ext" == "/directory/"
Test 301 of 534: P.dropFileName x == fst (P.splitFileName x)
Test 302 of 534: W.dropFileName x == fst (W.splitFileName x)
Test 303 of 534: P.takeFileName "/directory/file.ext" == "file.ext"
Test 304 of 534: W.takeFileName "/directory/file.ext" == "file.ext"
Test 305 of 534: P.takeFileName "test/" == ""
Test 306 of 534: W.takeFileName "test/" == ""
Test 307 of 534: P.takeFileName x `isSuffixOf` x
Test 308 of 534: W.takeFileName x `isSuffixOf` x
Test 309 of 534: P.takeFileName x == snd (P.splitFileName x)
Test 310 of 534: W.takeFileName x == snd (W.splitFileName x)
Test 311 of 534: P.takeFileName (P.replaceFileName x "fred") == "fred"
Test 312 of 534: W.takeFileName (W.replaceFileName x "fred") == "fred"
Test 313 of 534: P.takeFileName (x P.</> "fred") == "fred"
Test 314 of 534: W.takeFileName (x W.</> "fred") == "fred"
Test 315 of 534: P.isRelative (P.takeFileName x)
Test 316 of 534: W.isRelative (W.takeFileName x)
Test 317 of 534: P.takeBaseName "/directory/file.ext" == "file"
Test 318 of 534: W.takeBaseName "/directory/file.ext" == "file"
Test 319 of 534: P.takeBaseName "file/test.txt" == "test"
Test 320 of 534: W.takeBaseName "file/test.txt" == "test"
Test 321 of 534: P.takeBaseName "dave.ext" == "dave"
Test 322 of 534: W.takeBaseName "dave.ext" == "dave"
Test 323 of 534: P.takeBaseName "" == ""
Test 324 of 534: W.takeBaseName "" == ""
Test 325 of 534: P.takeBaseName "test" == "test"
Test 326 of 534: W.takeBaseName "test" == "test"
Test 327 of 534: P.takeBaseName (P.addTrailingPathSeparator x) == ""
Test 328 of 534: W.takeBaseName (W.addTrailingPathSeparator x) == ""
Test 329 of 534: P.takeBaseName "file/file.tar.gz" == "file.tar"
Test 330 of 534: W.takeBaseName "file/file.tar.gz" == "file.tar"
Test 331 of 534: P.replaceBaseName "/directory/other.ext" "file" == "/directory/file.ext"
Test 332 of 534: W.replaceBaseName "/directory/other.ext" "file" == "/directory/file.ext"
Test 333 of 534: P.replaceBaseName "file/test.txt" "bob" == "file/bob.txt"
Test 334 of 534: W.replaceBaseName "file/test.txt" "bob" == "file/bob.txt"
Test 335 of 534: P.replaceBaseName "fred" "bill" == "bill"
Test 336 of 534: W.replaceBaseName "fred" "bill" == "bill"
Test 337 of 534: P.replaceBaseName "/dave/fred/bob.gz.tar" "new" == "/dave/fred/new.tar"
Test 338 of 534: W.replaceBaseName "/dave/fred/bob.gz.tar" "new" == "/dave/fred/new.tar"
Test 339 of 534: P.replaceBaseName x (P.takeBaseName x) == x
Test 340 of 534: W.replaceBaseName x (W.takeBaseName x) == x
Test 341 of 534: P.hasTrailingPathSeparator "test" == False
Test 342 of 534: W.hasTrailingPathSeparator "test" == False
Test 343 of 534: P.hasTrailingPathSeparator "test/" == True
Test 344 of 534: W.hasTrailingPathSeparator "test/" == True
Test 345 of 534: P.hasTrailingPathSeparator (P.addTrailingPathSeparator x)
Test 346 of 534: W.hasTrailingPathSeparator (W.addTrailingPathSeparator x)
Test 347 of 534: P.hasTrailingPathSeparator x ==> P.addTrailingPathSeparator x == x
Test 348 of 534: W.hasTrailingPathSeparator x ==> W.addTrailingPathSeparator x == x
Test 349 of 534: P.addTrailingPathSeparator "test/rest" == "test/rest/"
Test 350 of 534: P.dropTrailingPathSeparator "file/test/" == "file/test"
Test 351 of 534: W.dropTrailingPathSeparator "file/test/" == "file/test"
Test 352 of 534: P.dropTrailingPathSeparator "/" == "/"
Test 353 of 534: W.dropTrailingPathSeparator "/" == "/"
Test 354 of 534: W.dropTrailingPathSeparator "\\" == "\\"
Test 355 of 534: not (P.hasTrailingPathSeparator (P.dropTrailingPathSeparator x)) || P.isDrive x
Test 356 of 534: P.takeDirectory "/directory/other.ext" == "/directory"
Test 357 of 534: W.takeDirectory "/directory/other.ext" == "/directory"
Test 358 of 534: P.takeDirectory x `isPrefixOf` x || P.takeDirectory x == "."
Test 359 of 534: W.takeDirectory x `isPrefixOf` x || W.takeDirectory x == "."
Test 360 of 534: P.takeDirectory "foo" == "."
Test 361 of 534: W.takeDirectory "foo" == "."
Test 362 of 534: P.takeDirectory "/" == "/"
Test 363 of 534: W.takeDirectory "/" == "/"
Test 364 of 534: P.takeDirectory "/foo" == "/"
Test 365 of 534: W.takeDirectory "/foo" == "/"
Test 366 of 534: P.takeDirectory "/foo/bar/baz" == "/foo/bar"
Test 367 of 534: W.takeDirectory "/foo/bar/baz" == "/foo/bar"
Test 368 of 534: P.takeDirectory "/foo/bar/baz/" == "/foo/bar/baz"
Test 369 of 534: W.takeDirectory "/foo/bar/baz/" == "/foo/bar/baz"
Test 370 of 534: P.takeDirectory "foo/bar/baz" == "foo/bar"
Test 371 of 534: W.takeDirectory "foo/bar/baz" == "foo/bar"
Test 372 of 534: W.takeDirectory "foo\\bar" == "foo"
Test 373 of 534: W.takeDirectory "foo\\bar\\\\" == "foo\\bar"
Test 374 of 534: W.takeDirectory "C:\\" == "C:\\"
Test 375 of 534: P.replaceDirectory "root/file.ext" "/directory/" == "/directory/file.ext"
Test 376 of 534: W.replaceDirectory "root/file.ext" "/directory/" == "/directory/file.ext"
Test 377 of 534: P.replaceDirectory x (P.takeDirectory x) `P.equalFilePath` x
Test 378 of 534: W.replaceDirectory x (W.takeDirectory x) `W.equalFilePath` x
Test 379 of 534: "/directory" P.</> "file.ext" == "/directory/file.ext"
Test 380 of 534: "/directory" W.</> "file.ext" == "/directory\\file.ext"
Test 381 of 534: "directory" P.</> "/file.ext" == "/file.ext"
Test 382 of 534: "directory" W.</> "/file.ext" == "/file.ext"
Test 383 of 534: (P.takeDirectory x P.</> P.takeFileName x) `P.equalFilePath` x
Test 384 of 534: (W.takeDirectory x W.</> W.takeFileName x) `W.equalFilePath` x
Test 385 of 534: "/" P.</> "test" == "/test"
Test 386 of 534: "home" P.</> "bob" == "home/bob"
Test 387 of 534: "x:" P.</> "foo" == "x:/foo"
Test 388 of 534: "C:\\foo" W.</> "bar" == "C:\\foo\\bar"
Test 389 of 534: "home" W.</> "bob" == "home\\bob"
Test 390 of 534: "home" P.</> "/bob" == "/bob"
Test 391 of 534: "home" W.</> "C:\\bob" == "C:\\bob"
Test 392 of 534: "home" W.</> "/bob" == "/bob"
Test 393 of 534: "home" W.</> "\\bob" == "\\bob"
Test 394 of 534: "C:\\home" W.</> "\\bob" == "\\bob"
Test 395 of 534: "D:\\foo" W.</> "C:bar" == "C:bar"
Test 396 of 534: "C:\\foo" W.</> "C:bar" == "C:bar"
Test 397 of 534: P.splitPath "/directory/file.ext" == ["/", "directory/", "file.ext"]
Test 398 of 534: W.splitPath "/directory/file.ext" == ["/", "directory/", "file.ext"]
Test 399 of 534: mconcat (P.splitPath x) == x
Test 400 of 534: mconcat (W.splitPath x) == x
Test 401 of 534: P.splitPath "test//item/" == ["test//", "item/"]
Test 402 of 534: W.splitPath "test//item/" == ["test//", "item/"]
Test 403 of 534: P.splitPath "test/item/file" == ["test/", "item/", "file"]
Test 404 of 534: W.splitPath "test/item/file" == ["test/", "item/", "file"]
Test 405 of 534: P.splitPath "" == []
Test 406 of 534: W.splitPath "" == []
Test 407 of 534: W.splitPath "c:\\test\\path" == ["c:\\", "test\\", "path"]
Test 408 of 534: P.splitPath "/file/test" == ["/", "file/", "test"]
Test 409 of 534: P.splitDirectories "/directory/file.ext" == ["/", "directory", "file.ext"]
Test 410 of 534: W.splitDirectories "/directory/file.ext" == ["/", "directory", "file.ext"]
Test 411 of 534: P.splitDirectories "test/file" == ["test", "file"]
Test 412 of 534: W.splitDirectories "test/file" == ["test", "file"]
Test 413 of 534: P.splitDirectories "/test/file" == ["/", "test", "file"]
Test 414 of 534: W.splitDirectories "/test/file" == ["/", "test", "file"]
Test 415 of 534: W.splitDirectories "C:\\test\\file" == ["C:\\", "test", "file"]
Test 416 of 534: P.joinPath (P.splitDirectories x) `P.equalFilePath` x
Test 417 of 534: W.joinPath (W.splitDirectories x) `W.equalFilePath` x
Test 418 of 534: P.splitDirectories "" == []
Test 419 of 534: W.splitDirectories "" == []
Test 420 of 534: W.splitDirectories "C:\\test\\\\\\file" == ["C:\\", "test", "file"]
Test 421 of 534: P.splitDirectories "/test///file" == ["/", "test", "file"]
Test 422 of 534: W.splitDirectories "/test///file" == ["/", "test", "file"]
Test 423 of 534: P.joinPath ["/", "directory/", "file.ext"] == "/directory/file.ext"
Test 424 of 534: W.joinPath ["/", "directory/", "file.ext"] == "/directory/file.ext"
Test 425 of 534: P.joinPath (P.splitPath x) == x
Test 426 of 534: W.joinPath (W.splitPath x) == x
Test 427 of 534: P.joinPath [] == ""
Test 428 of 534: W.joinPath [] == ""
Test 429 of 534: P.joinPath ["test", "file", "path"] == "test/file/path"
Test 430 of 534: x == y ==> P.equalFilePath x y
Test 431 of 534: x == y ==> W.equalFilePath x y
Test 432 of 534: P.normalise x == P.normalise y ==> P.equalFilePath x y
Test 433 of 534: W.normalise x == W.normalise y ==> W.equalFilePath x y
Test 434 of 534: P.equalFilePath "foo" "foo/"
Test 435 of 534: W.equalFilePath "foo" "foo/"
Test 436 of 534: not (P.equalFilePath "foo" "/foo")
Test 437 of 534: not (W.equalFilePath "foo" "/foo")
Test 438 of 534: not (P.equalFilePath "foo" "FOO")
Test 439 of 534: W.equalFilePath "foo" "FOO"
Test 440 of 534: not (W.equalFilePath "C:" "C:/")
Test 441 of 534: P.makeRelative "/directory" "/directory/file.ext" == "file.ext"
Test 442 of 534: W.makeRelative "/directory" "/directory/file.ext" == "file.ext"
Test 443 of 534: P.makeRelative (P.takeDirectory x) x `P.equalFilePath` P.takeFileName x
Test 444 of 534: W.makeRelative (W.takeDirectory x) x `W.equalFilePath` W.takeFileName x
Test 445 of 534: P.makeRelative x x == "."
Test 446 of 534: W.makeRelative x x == "."
Test 447 of 534: P.equalFilePath x y || (P.isRelative x && P.makeRelative y x == x) || P.equalFilePath (y P.</> P.makeRelative y x) x
Test 448 of 534: W.equalFilePath x y || (W.isRelative x && W.makeRelative y x == x) || W.equalFilePath (y W.</> W.makeRelative y x) x
Test 449 of 534: W.makeRelative "C:\\Home" "c:\\home\\bob" == "bob"
Test 450 of 534: W.makeRelative "C:\\Home" "c:/home/bob" == "bob"
Test 451 of 534: W.makeRelative "C:\\Home" "D:\\Home\\Bob" == "D:\\Home\\Bob"
Test 452 of 534: W.makeRelative "C:\\Home" "C:Home\\Bob" == "C:Home\\Bob"
Test 453 of 534: W.makeRelative "/Home" "/home/bob" == "bob"
Test 454 of 534: W.makeRelative "/" "//" == "//"
Test 455 of 534: P.makeRelative "/Home" "/home/bob" == "/home/bob"
Test 456 of 534: P.makeRelative "/home/" "/home/bob/foo/bar" == "bob/foo/bar"
Test 457 of 534: P.makeRelative "/fred" "bob" == "bob"
Test 458 of 534: P.makeRelative "/file/test" "/file/test/fred" == "fred"
Test 459 of 534: P.makeRelative "/file/test" "/file/test/fred/" == "fred/"
Test 460 of 534: P.makeRelative "some/path" "some/path/a/b/c" == "a/b/c"
Test 461 of 534: P.normalise "/file/\\test////" == "/file/\\test/"
Test 462 of 534: P.normalise "/file/./test" == "/file/test"
Test 463 of 534: P.normalise "/test/file/../bob/fred/" == "/test/file/../bob/fred/"
Test 464 of 534: P.normalise "../bob/fred/" == "../bob/fred/"
Test 465 of 534: P.normalise "./bob/fred/" == "bob/fred/"
Test 466 of 534: W.normalise "c:\\file/bob\\" == "C:\\file\\bob\\"
Test 467 of 534: W.normalise "c:\\" == "C:\\"
Test 468 of 534: W.normalise "C:.\\" == "C:"
Test 469 of 534: W.normalise "\\\\server\\test" == "\\\\server\\test"
Test 470 of 534: W.normalise "//server/test" == "\\\\server\\test"
Test 471 of 534: W.normalise "c:/file" == "C:\\file"
Test 472 of 534: W.normalise "/file" == "\\file"
Test 473 of 534: W.normalise "\\" == "\\"
Test 474 of 534: W.normalise "/./" == "\\"
Test 475 of 534: P.normalise "." == "."
Test 476 of 534: W.normalise "." == "."
Test 477 of 534: P.normalise "./" == "./"
Test 478 of 534: P.normalise "./." == "./"
Test 479 of 534: P.normalise "/./" == "/"
Test 480 of 534: P.normalise "/" == "/"
Test 481 of 534: P.normalise "bob/fred/." == "bob/fred/"
Test 482 of 534: P.normalise "//home" == "/home"
Test 483 of 534: P.isValid "" == False
Test 484 of 534: W.isValid "" == False
Test 485 of 534: P.isValid "\0" == False
Test 486 of 534: W.isValid "\0" == False
Test 487 of 534: P.isValid "/random_ path:*" == True
Test 488 of 534: P.isValid x == (x /= mempty)
Test 489 of 534: W.isValid "c:\\test" == True
Test 490 of 534: W.isValid "c:\\test:of_test" == False
Test 491 of 534: W.isValid "test*" == False
Test 492 of 534: W.isValid "c:\\test\\nul" == False
Test 493 of 534: W.isValid "c:\\test\\prn.txt" == False
Test 494 of 534: W.isValid "c:\\nul\\file" == False
Test 495 of 534: W.isValid "\\\\" == False
Test 496 of 534: W.isValid "\\\\\\foo" == False
Test 497 of 534: W.isValid "\\\\?\\D:file" == False
Test 498 of 534: W.isValid "foo\tbar" == False
Test 499 of 534: W.isValid "nul .txt" == False
Test 500 of 534: W.isValid " nul.txt" == True
Test 501 of 534: P.isValid (P.makeValid x)
Test 502 of 534: W.isValid (W.makeValid x)
Test 503 of 534: P.isValid x ==> P.makeValid x == x
Test 504 of 534: W.isValid x ==> W.makeValid x == x
Test 505 of 534: P.makeValid "" == "_"
Test 506 of 534: W.makeValid "" == "_"
Test 507 of 534: P.makeValid "file\0name" == "file_name"
Test 508 of 534: W.makeValid "file\0name" == "file_name"
Test 509 of 534: W.makeValid "c:\\already\\/valid" == "c:\\already\\/valid"
Test 510 of 534: W.makeValid "c:\\test:of_test" == "c:\\test_of_test"
Test 511 of 534: W.makeValid "test*" == "test_"
Test 512 of 534: W.makeValid "c:\\test\\nul" == "c:\\test\\nul_"
Test 513 of 534: W.makeValid "c:\\test\\prn.txt" == "c:\\test\\prn_.txt"
Test 514 of 534: W.makeValid "c:\\test/prn.txt" == "c:\\test/prn_.txt"
Test 515 of 534: W.makeValid "c:\\nul\\file" == "c:\\nul_\\file"
Test 516 of 534: W.makeValid "\\\\\\foo" == "\\\\drive"
Test 517 of 534: W.makeValid "\\\\?\\D:file" == "\\\\?\\D:\\file"
Test 518 of 534: W.makeValid "nul .txt" == "nul _.txt"
Test 519 of 534: W.isRelative "path\\test" == True
Test 520 of 534: W.isRelative "c:\\test" == False
Test 521 of 534: W.isRelative "c:test" == True
Test 522 of 534: W.isRelative "c:\\" == False
Test 523 of 534: W.isRelative "c:/" == False
Test 524 of 534: W.isRelative "c:" == True
Test 525 of 534: W.isRelative "\\\\foo" == False
Test 526 of 534: W.isRelative "\\\\?\\foo" == False
Test 527 of 534: W.isRelative "\\\\?\\UNC\\foo" == False
Test 528 of 534: W.isRelative "/foo" == True
Test 529 of 534: W.isRelative "\\foo" == True
Test 530 of 534: P.isRelative "test/path" == True
Test 531 of 534: P.isRelative "/test" == False
Test 532 of 534: P.isRelative "/" == False
Test 533 of 534: P.isAbsolute x == not (P.isRelative x)
Test 534 of 534: W.isAbsolute x == not (W.isRelative x)
1 FAILURES

FAILURE 1: equiv Windows.normalise
Failure {numTests = 779, numDiscarded = 0, numShrinks = 5, numShrinkTries = 15, numShrinkFinal = 10, usedSeed = SMGen 13141975468429031577 5352040430501260089, usedSize = 78, reason = "Falsified", theException = Nothing, output = "", failingTestCase = ["QFilePath \"a://\""], failingLabels = [], failingClasses = fromList []}
*** Failed! Falsified (after 779 tests and 5 shrinks):
QFilePath "a://"


filepath-tests: user error (FAILURE, failed 1 of 534 tests)
Test suite filepath-tests: FAIL
Test suite logged to:
/tmp/workdir-filepath-bytestring/filepath-bytestring-1.4.100.3.2/dist-newstyle/build/x86_64-linux/ghc-9.6.6/filepath-bytestring-1.4.100.3.2/t/filepath-tests/test/filepath-bytestring-1.4.100.3.2-filepath-tests.log
0 of 1 test suites (0 of 1 test cases) passed.
Error: [Cabal-7125]
Tests failed for test:filepath-tests from filepath-bytestring-1.4.100.3.2.

