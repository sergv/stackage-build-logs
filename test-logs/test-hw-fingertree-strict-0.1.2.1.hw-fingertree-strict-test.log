Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - hw-fingertree-strict-0.1.2.1 (test:hw-fingertree-strict-test) (ephemeral targets)
Preprocessing test suite 'hw-fingertree-strict-test' for hw-fingertree-strict-0.1.2.1...
Building test suite 'hw-fingertree-strict-test' for hw-fingertree-strict-0.1.2.1...
Running 1 test suites...
Test suite hw-fingertree-strict-test: RUNNING...

HaskellWorks.Data.FingerTree
  ✓ <interactive> passed 100 tests.
  foldr [✔]
  ✓ <interactive> passed 100 tests.
  foldl [✔]
  ✓ <interactive> passed 100 tests.
  (==) [✔]
  ✓ <interactive> passed 100 tests.
  compare [✔]
  ✓ <interactive> passed 100 tests.
  mappend [✔]
  ✓ <interactive> passed 100 tests.
  empty [✔]
  ✓ <interactive> passed 100 tests.
  singletone [✔]
  ✓ <interactive> passed 100 tests.
  (<|) [✔]
  ✓ <interactive> passed 100 tests.
  (|>) [✔]
  ✓ <interactive> passed 100 tests.
  (><) [✔]
  ✓ <interactive> passed 100 tests.
  fromList [✔]
  ✓ <interactive> passed 100 tests.
  null [✔]
  ✓ <interactive> passed 100 tests.
  viewl [✔]
  ✓ <interactive> passed 100 tests.
  viewr [✔]
  ✓ <interactive> passed 100 tests.
  split [✔]
  ✓ <interactive> passed 100 tests.
  takeUntil [✔]
  ✓ <interactive> passed 100 tests.
  dropUntil [✔]
  ✓ <interactive> passed 100 tests.
  reverse [✔]
  ✓ <interactive> passed 100 tests.
  fmap [✔]
  ✓ <interactive> passed 100 tests.
  fmapWithPos [✔]
  ✓ <interactive> passed 100 tests.
  traverse [✔]
  ✓ <interactive> passed 100 tests.
  traverseWithPos [✔]
HaskellWorks.Data.FingerTree.Strict
  ✓ <interactive> passed 100 tests.
  foldr [✔]
  ✓ <interactive> passed 100 tests.
  foldl [✔]
  ✓ <interactive> passed 100 tests.
  (==) [✔]
  ✓ <interactive> passed 100 tests.
  compare [✔]
  ✓ <interactive> passed 100 tests.
  mappend [✔]
  ✓ <interactive> passed 100 tests.
  empty [✔]
  ✓ <interactive> passed 100 tests.
  singletone [✔]
  ✓ <interactive> passed 100 tests.
  (<|) [✔]
  ✓ <interactive> passed 100 tests.
  (|>) [✔]
  ✓ <interactive> passed 100 tests.
  (><) [✔]
  ✓ <interactive> passed 100 tests.
  fromList [✔]
  ✓ <interactive> passed 100 tests.
  null [✔]
  ✓ <interactive> passed 100 tests.
  viewl [✔]
  ✓ <interactive> passed 100 tests.
  viewr [✔]
  ✓ <interactive> passed 100 tests.
  split [✔]
  ✓ <interactive> passed 100 tests.
  takeUntil [✔]
  ✓ <interactive> passed 100 tests.
  dropUntil [✔]
  ✓ <interactive> passed 100 tests.
  reverse [✔]
  ✓ <interactive> passed 100 tests.
  fmap [✔]
  ✓ <interactive> passed 100 tests.
  fmapWithPos [✔]
  ✓ <interactive> passed 100 tests.
  traverse [✔]
  ✓ <interactive> passed 100 tests.
  traverseWithPos [✔]
HaskellWorks.Data.SegmentMap.Strict
  HaskellWorks.Data.SegmentMap.StrictSpec
    should convert SegmentMap to List [✔]
    should convert List to SegmentMap [✔]
    fromList with no overlap works [✔]
    insert with overlap works [✔]
    insert with overlap works [✔]
  ✓ <interactive> passed 100 tests.
    fromList of two segments in order possibly overlapping [✔]
    fromList [(Segment 1 1, "A"), (Segment 1 1, "B")] [✔]
    fromList [(Segment 1 2, "A"), (Segment 1 1, "B")] [✔]
    fromList [(Segment 1 2, "A"), (Segment 2 2, "B")] [✔]
    fromList [(Segment 1 2, "A"), (Segment 1 2, "B")] [✔]
    fromList [(Segment 1 3, "A"), (Segment 1 1, "B")] [✔]
    fromList [(Segment 1 3, "A"), (Segment 3 3, "B")] [✔]
    fromList [(Segment 1 3, "A"), (Segment 2 2, "B")] [✔]
    fromList [(Segment 1 3, "A"), (Segment 0 1, "B")] [✔]
    fromList [(Segment 1 3, "A"), (Segment 3 4 "B")] [✔]
    fromList [(Segment 1 2, "A"), (Segment 2 7, "B")] [✔]
    cappedL
      left of [✔]
      overlapping [✔]
      right of [✔]
    cappedM
      left of [✔]
      overlapping [✔]
      left of [✔]
  ✓ <interactive> passed 100 tests.
    should have require function that checks hedgehog properties [✔]
HaskellWorks.Data.SegmentSet.Naive
  App.NaiveIntervalSpec
    should preserve empty [✔]
    should insert one range [✔]
    should not change if update is inclusive [✔]
    should join cross ranges [✔]
    should keep sorted list (fromList) [✔]
    should preserve sorting (update) [✔]
    should preserve sorring (delete) [✔]
    should remove nothing from empty [✔]
    should remove exact segment [✔]
    should remove inner segment [✔]
    should remove crossing segment [✔]
    should remove everything [✔]
    should remove leftmost [✔]
    should remove rightmost [✔]
    should merge adjacent segments [✔]
HaskellWorks.Data.SegmentSet.Strict
  HaskellWorks.Data.SegmentSet.StrictSpec
    should convert SegmentSet to List [✔]
    should convert List to SegmentSet [✔]
    fromList with no overlap works [✔]
    insert with overlap works [✔]
    insert with overlap works [✔]
  ✓ <interactive> passed 100 tests.
    fromList of two segments in order possibly overlapping [✔]
  ✓ <interactive> passed 100 tests.
    toList of n segments should be ordered, non-overlapping [✔]
  ✓ <interactive> passed 100 tests.
    deleting elements should produce a set with 'holes' in it [✔]
    fromList [Segment 1 1, Segment 1 1] [✔]
    fromList [Segment 1 2, Segment 1 1] [✔]
    fromList [Segment 1 2, Segment 2 2] [✔]
    fromList [Segment 1 2, Segment 1 2] [✔]
    fromList [Segment 1 3, Segment 1 1] [✔]
    fromList [Segment 1 3, Segment 3 3] [✔]
    fromList [Segment 1 3, Segment 2 2] [✔]
    fromList [Segment 1 3, Segment 0 1] [✔]
    fromList [Segment 1 3, Segment 3 4] [✔]
    fromList [Segment 1 2, Segment 2 7] [✔]
    fromList (delete (Segment 1 1) [Segment 1 1]) [✔]
    fromList (delete (Segment 1 3) [Segment 2 4]) [✔]
    fromList (delete (Segment 3 5) [Segment 2 4]) [✔]
    fromList (delete (Segment 3 5) [Segment 2 4]) [✔]
    cappedL
      left of [✔]
      overlapping [✔]
      right of [✔]
    cappedM
      left of [✔]
      overlapping [✔]
      left of [✔]
  ✓ <interactive> passed 100 tests.
    should behave just live the naive version [✔]

Finished in 7.2404 seconds
111 examples, 0 failures
Test suite hw-fingertree-strict-test: PASS
Test suite logged to:
/tmp/workdir-hw-fingertree-strict/hw-fingertree-strict-0.1.2.1/dist-newstyle/build/x86_64-linux/ghc-9.6.6/hw-fingertree-strict-0.1.2.1/t/hw-fingertree-strict-test/test/hw-fingertree-strict-0.1.2.1-hw-fingertree-strict-test.log
1 of 1 test suites (1 of 1 test cases) passed.
