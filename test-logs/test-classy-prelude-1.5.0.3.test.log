Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - classy-prelude-1.5.0.3 (test:test) (ephemeral targets)
Preprocessing test suite 'test' for classy-prelude-1.5.0.3...
Building test suite 'test' for classy-prelude-1.5.0.3...
Running 1 test suites...
Test suite test: RUNNING...

dictionary
  Data.Map
    insert x y (insert x z c) == insert x y c [✔]
      +++ OK, passed 100 tests.
    insertMap x y (deleteMap x c) == insertMap x y c [✔]
      +++ OK, passed 100 tests.
    deleteMap x (insertMap x y c) == deleteMap x c [✔]
      +++ OK, passed 100 tests.
    lookup k (insertMap k v empty) == Just v [✔]
      +++ OK, passed 100 tests.
    lookup k (deleteMap k c) == Nothing [✔]
      +++ OK, passed 100 tests.
  Data.HashMap
    insert x y (insert x z c) == insert x y c [✔]
      +++ OK, passed 100 tests.
    insertMap x y (deleteMap x c) == insertMap x y c [✔]
      +++ OK, passed 100 tests.
    deleteMap x (insertMap x y c) == deleteMap x c [✔]
      +++ OK, passed 100 tests.
    lookup k (insertMap k v empty) == Just v [✔]
      +++ OK, passed 100 tests.
    lookup k (deleteMap k c) == Nothing [✔]
      +++ OK, passed 100 tests.
  assoc list
    insert x y (insert x z c) == insert x y c [✔]
      +++ OK, passed 100 tests.
    insertMap x y (deleteMap x c) == insertMap x y c [✔]
      +++ OK, passed 100 tests.
    deleteMap x (insertMap x y c) == deleteMap x c [✔]
      +++ OK, passed 100 tests.
    lookup k (insertMap k v empty) == Just v [✔]
      +++ OK, passed 100 tests.
    lookup k (deleteMap k c) == Nothing [✔]
      +++ OK, passed 100 tests.
map
  list
    map f c == pack (map f (unpack c)) [✔]
      +++ OK, passed 100 tests.
    map (f . g) c == map f (map g c) [✔]
      +++ OK, passed 100 tests.
  Data.Vector
    map f c == pack (map f (unpack c)) [✔]
      +++ OK, passed 100 tests.
    map (f . g) c == map f (map g c) [✔]
      +++ OK, passed 100 tests.
  Data.Vector.Unboxed
    map f c == pack (map f (unpack c)) [✔]
      +++ OK, passed 100 tests.
    map (f . g) c == map f (map g c) [✔]
      +++ OK, passed 100 tests.
  Data.Set
    map f c == pack (map f (unpack c)) [✔]
      +++ OK, passed 100 tests.
    map (f . g) c == map f (map g c) [✔]
      +++ OK, passed 100 tests.
  Data.HashSet
    map f c == pack (map f (unpack c)) [✔]
      +++ OK, passed 100 tests.
    map (f . g) c == map f (map g c) [✔]
      +++ OK, passed 100 tests.
  Data.ByteString
    map f c == pack (map f (unpack c)) [✔]
      +++ OK, passed 100 tests.
    map (f . g) c == map f (map g c) [✔]
      +++ OK, passed 100 tests.
  Data.ByteString.Lazy
    map f c == pack (map f (unpack c)) [✔]
      +++ OK, passed 100 tests.
    map (f . g) c == map f (map g c) [✔]
      +++ OK, passed 100 tests.
  Data.Text
    map f c == pack (map f (unpack c)) [✔]
      +++ OK, passed 100 tests.
    map (f . g) c == map f (map g c) [✔]
      +++ OK, passed 100 tests.
  Data.Text.Lazy
    map f c == pack (map f (unpack c)) [✔]
      +++ OK, passed 100 tests.
    map (f . g) c == map f (map g c) [✔]
      +++ OK, passed 100 tests.
  Data.Sequence
    map f c == pack (map f (unpack c)) [✔]
      +++ OK, passed 100 tests.
    map (f . g) c == map f (map g c) [✔]
      +++ OK, passed 100 tests.
concatMap
  list
    concatMap f c == pack (concatMap (unpack . f) (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.Vector
    concatMap f c == pack (concatMap (unpack . f) (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.Vector.Unboxed
    concatMap f c == pack (concatMap (unpack . f) (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.ByteString
    concatMap f c == pack (concatMap (unpack . f) (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.ByteString.Lazy
    concatMap f c == pack (concatMap (unpack . f) (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.Text
    concatMap f c == pack (concatMap (unpack . f) (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.Text.Lazy
    concatMap f c == pack (concatMap (unpack . f) (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.Sequence
    concatMap f c == pack (concatMap (unpack . f) (unpack c)) [✔]
      +++ OK, passed 100 tests.
filter
  list
    filter f c == pack (filter f (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.Vector
    filter f c == pack (filter f (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.Vector.Unboxed
    filter f c == pack (filter f (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.ByteString
    filter f c == pack (filter f (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.ByteString.Lazy
    filter f c == pack (filter f (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.Text
    filter f c == pack (filter f (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.Text.Lazy
    filter f c == pack (filter f (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.Sequence
    filter f c == pack (filter f (unpack c)) [✔]
      +++ OK, passed 100 tests.
filterM
  list
    filterM f c == fmap pack (filterM f (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.Vector
    filterM f c == fmap pack (filterM f (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.Vector.Unboxed
    filterM f c == fmap pack (filterM f (unpack c)) [✔]
      +++ OK, passed 100 tests.
  Data.Sequence
    filterM f c == fmap pack (filterM f (unpack c)) [✔]
      +++ OK, passed 100 tests.
length
  list
    length c == fromIntegral (length (unpack c)) [✔]
      +++ OK, passed 100 tests.
    null c == (length c == 0) [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) <= length x + length y [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) >= max (length x) (length y) [✔]
      +++ OK, passed 100 tests.
    length (x ++ empty) == length x [✔]
      +++ OK, passed 100 tests.
    null empty [✔]
      +++ OK, passed 1 test.
  Data.Vector
    length c == fromIntegral (length (unpack c)) [✔]
      +++ OK, passed 100 tests.
    null c == (length c == 0) [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) <= length x + length y [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) >= max (length x) (length y) [✔]
      +++ OK, passed 100 tests.
    length (x ++ empty) == length x [✔]
      +++ OK, passed 100 tests.
    null empty [✔]
      +++ OK, passed 1 test.
  Data.Vector.Unboxed
    length c == fromIntegral (length (unpack c)) [✔]
      +++ OK, passed 100 tests.
    null c == (length c == 0) [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) <= length x + length y [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) >= max (length x) (length y) [✔]
      +++ OK, passed 100 tests.
    length (x ++ empty) == length x [✔]
      +++ OK, passed 100 tests.
    null empty [✔]
      +++ OK, passed 1 test.
  Data.ByteString
    length c == fromIntegral (length (unpack c)) [✔]
      +++ OK, passed 100 tests.
    null c == (length c == 0) [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) <= length x + length y [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) >= max (length x) (length y) [✔]
      +++ OK, passed 100 tests.
    length (x ++ empty) == length x [✔]
      +++ OK, passed 100 tests.
    null empty [✔]
      +++ OK, passed 1 test.
  Data.ByteString.Lazy
    length c == fromIntegral (length (unpack c)) [✔]
      +++ OK, passed 100 tests.
    null c == (length c == 0) [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) <= length x + length y [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) >= max (length x) (length y) [✔]
      +++ OK, passed 100 tests.
    length (x ++ empty) == length x [✔]
      +++ OK, passed 100 tests.
    null empty [✔]
      +++ OK, passed 1 test.
  Data.Text
    length c == fromIntegral (length (unpack c)) [✔]
      +++ OK, passed 100 tests.
    null c == (length c == 0) [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) <= length x + length y [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) >= max (length x) (length y) [✔]
      +++ OK, passed 100 tests.
    length (x ++ empty) == length x [✔]
      +++ OK, passed 100 tests.
    null empty [✔]
      +++ OK, passed 1 test.
  Data.Text.Lazy
    length c == fromIntegral (length (unpack c)) [✔]
      +++ OK, passed 100 tests.
    null c == (length c == 0) [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) <= length x + length y [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) >= max (length x) (length y) [✔]
      +++ OK, passed 100 tests.
    length (x ++ empty) == length x [✔]
      +++ OK, passed 100 tests.
    null empty [✔]
      +++ OK, passed 1 test.
  Data.Map
    length c == fromIntegral (length (unpack c)) [✔]
      +++ OK, passed 100 tests.
    null c == (length c == 0) [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) <= length x + length y [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) >= max (length x) (length y) [✔]
      +++ OK, passed 100 tests.
    length (x ++ empty) == length x [✔]
      +++ OK, passed 100 tests.
    null empty [✔]
      +++ OK, passed 1 test.
  Data.HashMap
    length c == fromIntegral (length (unpack c)) [✔]
      +++ OK, passed 100 tests.
    null c == (length c == 0) [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) <= length x + length y [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) >= max (length x) (length y) [✔]
      +++ OK, passed 100 tests.
    length (x ++ empty) == length x [✔]
      +++ OK, passed 100 tests.
    null empty [✔]
      +++ OK, passed 1 test.
  Data.Set
    length c == fromIntegral (length (unpack c)) [✔]
      +++ OK, passed 100 tests.
    null c == (length c == 0) [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) <= length x + length y [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) >= max (length x) (length y) [✔]
      +++ OK, passed 100 tests.
    length (x ++ empty) == length x [✔]
      +++ OK, passed 100 tests.
    null empty [✔]
      +++ OK, passed 1 test.
  Data.HashSet
    length c == fromIntegral (length (unpack c)) [✔]
      +++ OK, passed 100 tests.
    null c == (length c == 0) [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) <= length x + length y [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) >= max (length x) (length y) [✔]
      +++ OK, passed 100 tests.
    length (x ++ empty) == length x [✔]
      +++ OK, passed 100 tests.
    null empty [✔]
      +++ OK, passed 1 test.
  Data.Sequence
    length c == fromIntegral (length (unpack c)) [✔]
      +++ OK, passed 100 tests.
    null c == (length c == 0) [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) <= length x + length y [✔]
      +++ OK, passed 100 tests.
    length (x ++ y) >= max (length x) (length y) [✔]
      +++ OK, passed 100 tests.
    length (x ++ empty) == length x [✔]
      +++ OK, passed 100 tests.
    null empty [✔]
      +++ OK, passed 1 test.
mapM
  list
    omapM f c == omapM f (toList c) [✔]
      +++ OK, passed 100 tests.
  Data.Vector
    omapM f c == omapM f (toList c) [✔]
      +++ OK, passed 100 tests.
  Data.Vector.Unboxed
    omapM f c == omapM f (toList c) [✔]
      +++ OK, passed 100 tests.
  Seq
    omapM f c == omapM f (toList c) [✔]
      +++ OK, passed 100 tests.
mapM_
  list
    mapM_ f c == mapM_ f (toList c) [✔]
      +++ OK, passed 100 tests.
  Data.Vector
    mapM_ f c == mapM_ f (toList c) [✔]
      +++ OK, passed 100 tests.
  Data.Vector.Unboxed
    mapM_ f c == mapM_ f (toList c) [✔]
      +++ OK, passed 100 tests.
  Set
    mapM_ f c == mapM_ f (toList c) [✔]
      +++ OK, passed 100 tests.
  HashSet
    mapM_ f c == mapM_ f (toList c) [✔]
      +++ OK, passed 100 tests.
  Seq
    mapM_ f c == mapM_ f (toList c) [✔]
      +++ OK, passed 100 tests.
fold
  list
    foldl' f accum c == foldl' f accum (toList c) [✔]
      +++ OK, passed 100 tests.
  Data.Vector
    foldl' f accum c == foldl' f accum (toList c) [✔]
      +++ OK, passed 100 tests.
  Data.Vector.Unboxed
    foldl' f accum c == foldl' f accum (toList c) [✔]
      +++ OK, passed 100 tests.
  Data.ByteString
    foldl' f accum c == foldl' f accum (toList c) [✔]
      +++ OK, passed 100 tests.
  Data.ByteString.Lazy
    foldl' f accum c == foldl' f accum (toList c) [✔]
      +++ OK, passed 100 tests.
  Data.Text
    foldl' f accum c == foldl' f accum (toList c) [✔]
      +++ OK, passed 100 tests.
  Data.Text.Lazy
    foldl' f accum c == foldl' f accum (toList c) [✔]
      +++ OK, passed 100 tests.
  Data.Set
    foldl' f accum c == foldl' f accum (toList c) [✔]
      +++ OK, passed 100 tests.
  Data.HashSet
    foldl' f accum c == foldl' f accum (toList c) [✔]
      +++ OK, passed 100 tests.
  Data.Sequence
    foldl' f accum c == foldl' f accum (toList c) [✔]
      +++ OK, passed 100 tests.
replicate
  list
    replicate i a == pack (replicate i a) [✔]
      +++ OK, passed 100 tests.
  Data.Vector
    replicate i a == pack (replicate i a) [✔]
      +++ OK, passed 100 tests.
  Data.Vector.Unboxed
    replicate i a == pack (replicate i a) [✔]
      +++ OK, passed 100 tests.
  Data.ByteString
    replicate i a == pack (replicate i a) [✔]
      +++ OK, passed 100 tests.
  Data.ByteString.Lazy
    replicate i a == pack (replicate i a) [✔]
      +++ OK, passed 100 tests.
  Data.Text
    replicate i a == pack (replicate i a) [✔]
      +++ OK, passed 100 tests.
  Data.Text.Lazy
    replicate i a == pack (replicate i a) [✔]
      +++ OK, passed 100 tests.
  Data.Sequence
    replicate i a == pack (replicate i a) [✔]
      +++ OK, passed 100 tests.
chunks
  ByteString
    fromChunks . toChunks == id [✔]
      +++ OK, passed 100 tests.
    fromChunks . return . concat . toChunks == id [✔]
      +++ OK, passed 100 tests.
  Text
    fromChunks . toChunks == id [✔]
      +++ OK, passed 100 tests.
    fromChunks . return . concat . toChunks == id [✔]
      +++ OK, passed 100 tests.
Suffix
  list
    y `isSuffixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripSuffix y (x ++ y) == Just x [✔]
      +++ OK, passed 100 tests.
    isJust (stripSuffix x y) == isSuffixOf x y [✔]
      +++ OK, passed 100 tests.
    dropSuffix y (x ++ y) == x [✔]
      +++ OK, passed 100 tests.
    dropSuffix x y == y || x `isSuffixOf` y [✔]
      +++ OK, passed 100 tests.
  Text
    y `isSuffixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripSuffix y (x ++ y) == Just x [✔]
      +++ OK, passed 100 tests.
    isJust (stripSuffix x y) == isSuffixOf x y [✔]
      +++ OK, passed 100 tests.
    dropSuffix y (x ++ y) == x [✔]
      +++ OK, passed 100 tests.
    dropSuffix x y == y || x `isSuffixOf` y [✔]
      +++ OK, passed 100 tests.
  LText
    y `isSuffixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripSuffix y (x ++ y) == Just x [✔]
      +++ OK, passed 100 tests.
    isJust (stripSuffix x y) == isSuffixOf x y [✔]
      +++ OK, passed 100 tests.
    dropSuffix y (x ++ y) == x [✔]
      +++ OK, passed 100 tests.
    dropSuffix x y == y || x `isSuffixOf` y [✔]
      +++ OK, passed 100 tests.
  ByteString
    y `isSuffixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripSuffix y (x ++ y) == Just x [✔]
      +++ OK, passed 100 tests.
    isJust (stripSuffix x y) == isSuffixOf x y [✔]
      +++ OK, passed 100 tests.
    dropSuffix y (x ++ y) == x [✔]
      +++ OK, passed 100 tests.
    dropSuffix x y == y || x `isSuffixOf` y [✔]
      +++ OK, passed 100 tests.
  LByteString
    y `isSuffixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripSuffix y (x ++ y) == Just x [✔]
      +++ OK, passed 100 tests.
    isJust (stripSuffix x y) == isSuffixOf x y [✔]
      +++ OK, passed 100 tests.
    dropSuffix y (x ++ y) == x [✔]
      +++ OK, passed 100 tests.
    dropSuffix x y == y || x `isSuffixOf` y [✔]
      +++ OK, passed 100 tests.
  Vector
    y `isSuffixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripSuffix y (x ++ y) == Just x [✔]
      +++ OK, passed 100 tests.
    isJust (stripSuffix x y) == isSuffixOf x y [✔]
      +++ OK, passed 100 tests.
    dropSuffix y (x ++ y) == x [✔]
      +++ OK, passed 100 tests.
    dropSuffix x y == y || x `isSuffixOf` y [✔]
      +++ OK, passed 100 tests.
  UVector
    y `isSuffixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripSuffix y (x ++ y) == Just x [✔]
      +++ OK, passed 100 tests.
    isJust (stripSuffix x y) == isSuffixOf x y [✔]
      +++ OK, passed 100 tests.
    dropSuffix y (x ++ y) == x [✔]
      +++ OK, passed 100 tests.
    dropSuffix x y == y || x `isSuffixOf` y [✔]
      +++ OK, passed 100 tests.
  Seq
    y `isSuffixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripSuffix y (x ++ y) == Just x [✔]
      +++ OK, passed 100 tests.
    isJust (stripSuffix x y) == isSuffixOf x y [✔]
      +++ OK, passed 100 tests.
    dropSuffix y (x ++ y) == x [✔]
      +++ OK, passed 100 tests.
    dropSuffix x y == y || x `isSuffixOf` y [✔]
      +++ OK, passed 100 tests.
replicateM
  list
    runIdentity (replicateM i (return x)) == replicate i x [✔]
      +++ OK, passed 100 tests.
  Vector
    runIdentity (replicateM i (return x)) == replicate i x [✔]
      +++ OK, passed 100 tests.
  UVector
    runIdentity (replicateM i (return x)) == replicate i x [✔]
      +++ OK, passed 100 tests.
  Seq
    runIdentity (replicateM i (return x)) == replicate i x [✔]
      +++ OK, passed 100 tests.
encode/decode UTF8
  Text
    decodeUtf8 . encodeUtf8 == id [✔]
      +++ OK, passed 100 tests.
  LText
    decodeUtf8 . encodeUtf8 == id [✔]
      +++ OK, passed 100 tests.
compareLength
  list
    compare (length c) i == compareLength c i [✔]
      +++ OK, passed 100 tests.
  Text
    compare (length c) i == compareLength c i [✔]
      +++ OK, passed 100 tests.
  LText
    compare (length c) i == compareLength c i [✔]
      +++ OK, passed 100 tests.
Prefix
  list
    x `isPrefixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripPrefix x (x ++ y) == Just y [✔]
      +++ OK, passed 100 tests.
    stripPrefix x y == Nothing || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x (x ++ y) == y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x y == y || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
  Text
    x `isPrefixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripPrefix x (x ++ y) == Just y [✔]
      +++ OK, passed 100 tests.
    stripPrefix x y == Nothing || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x (x ++ y) == y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x y == y || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
  LText
    x `isPrefixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripPrefix x (x ++ y) == Just y [✔]
      +++ OK, passed 100 tests.
    stripPrefix x y == Nothing || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x (x ++ y) == y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x y == y || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
  ByteString
    x `isPrefixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripPrefix x (x ++ y) == Just y [✔]
      +++ OK, passed 100 tests.
    stripPrefix x y == Nothing || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x (x ++ y) == y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x y == y || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
  LByteString
    x `isPrefixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripPrefix x (x ++ y) == Just y [✔]
      +++ OK, passed 100 tests.
    stripPrefix x y == Nothing || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x (x ++ y) == y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x y == y || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
  Vector
    x `isPrefixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripPrefix x (x ++ y) == Just y [✔]
      +++ OK, passed 100 tests.
    stripPrefix x y == Nothing || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x (x ++ y) == y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x y == y || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
  UVector
    x `isPrefixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripPrefix x (x ++ y) == Just y [✔]
      +++ OK, passed 100 tests.
    stripPrefix x y == Nothing || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x (x ++ y) == y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x y == y || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
  Seq
    x `isPrefixOf` (x ++ y) [✔]
      +++ OK, passed 100 tests.
    stripPrefix x (x ++ y) == Just y [✔]
      +++ OK, passed 100 tests.
    stripPrefix x y == Nothing || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x (x ++ y) == y [✔]
      +++ OK, passed 100 tests.
    dropPrefix x y == y || x `isPrefixOf` y [✔]
      +++ OK, passed 100 tests.
basic DList functionality [✔]
Data.ByteVector
  toByteVector [✔]
    +++ OK, passed 100 tests.
  fromByteVector [✔]
    +++ OK, passed 100 tests.

Finished in 0.0941 seconds
251 examples, 0 failures
Test suite test: PASS
Test suite logged to:
/tmp/workdir-classy-prelude/classy-prelude-1.5.0.3/dist-newstyle/build/x86_64-linux/ghc-9.6.6/classy-prelude-1.5.0.3/t/test/test/classy-prelude-1.5.0.3-test.log
1 of 1 test suites (1 of 1 test cases) passed.
