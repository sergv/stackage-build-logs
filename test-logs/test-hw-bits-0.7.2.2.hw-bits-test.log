Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - hw-bits-0.7.2.2 (test:hw-bits-test) (ephemeral targets)
Preprocessing test suite 'hw-bits-test' for hw-bits-0.7.2.2...
Building test suite 'hw-bits-test' for hw-bits-0.7.2.2...
Running 1 test suites...
Test suite hw-bits-test: RUNNING...

HaskellWorks.Data.Bits.BitRead
  HaskellWorks.Data.BitReadSpec
  ✓ <interactive> passed 1 test.
    bitRead "10000000 101" :: Maybe [Word8] [✔]
  ✓ <interactive> passed 1 test.
    bitRead "10000000 101" :: Maybe [Word8] [✔]
  ✓ <interactive> passed 1 test.
    bitRead "11100100 10101111 1" :: Maybe [Word8] [✔]
  ✓ <interactive> passed 1 test.
    bitRead "" :: Maybe [Word8] [✔]
  ✓ <interactive> passed 1 test.
    bitRead "10000000 101" :: Maybe (DV.Vector Word8) [✔]
  ✓ <interactive> passed 1 test.
    bitRead "11100100 10101111 1" :: Maybe (DV.Vector Word8) [✔]
  ✓ <interactive> passed 1 test.
    bitRead "11100100 10101111 1" :: Maybe (DV.Vector Word16) [✔]
  ✓ <interactive> passed 1 test.
    bitRead "" :: Maybe (DV.Vector Word8) [✔]
  ✓ <interactive> passed 1 test.
    bitRead "10000000 101" :: Maybe (DVU.Vector Bit.Bit) [✔]
  ✓ <interactive> passed 1 test.
    bitRead "11100100 10101111 1" :: Maybe (DVU.Vector Bit.Bit) [✔]
  ✓ <interactive> passed 1 test.
    bitRead "11100100 10101111 1" :: Maybe (DVU.Vector Bit.Bit) [✔]
  ✓ <interactive> passed 1 test.
    bitRead "" :: Maybe (DVU.Vector Bit.Bit) [✔]
  ✓ <interactive> passed 1 test.
    bitShow (8 :: Word8) [✔]
  ✓ <interactive> passed 1 test.
    bitShow (8 :: Word64) [✔]
  ✓ <interactive> passed 1 test.
    bitShow [0x0102040810204080 :: Word64] [✔]
HaskellWorks.Data.Bits.BitWise
  HaskellWorks.Data.Bits.BitWiseSpec
    for popCount0
  ✓ <interactive> passed 100 tests.
      for Word8 matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for Word16 matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for Word32 matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for Word64 matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word8] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word16] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word32] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word64] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word8] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word16] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word32] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word64] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Bool] matches DVU Bit.Bit [✔]
    for popCount1
  ✓ <interactive> passed 100 tests.
      for Word8 matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for Word16 matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for Word32 matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for Word64 matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word8] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word16] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word32] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word64] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word8] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word16] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word32] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Word64] matches Data.Bits implementation [✔]
  ✓ <interactive> passed 100 tests.
      for [Bool] matches DVU Bit.Bit [✔]
HaskellWorks.Data.Bits.Broadword.Word8
  HaskellWorks.Data.Bits.Broadword.Word8
  ✓ <interactive> passed 100 tests.
    kBitDiff [✔]
    kBitDiffPos
  ✓ <interactive> passed 100 tests.
      subword size 8 [✔]
  ✓ <interactive> passed 100 tests.
      subword size 4 [✔]
  ✓ <interactive> passed 100 tests.
      subword size 4 test 1 [✔]
HaskellWorks.Data.Bits.Broadword.Word16
  HaskellWorks.Data.Bits.Broadword.Word16
  ✓ <interactive> passed 100 tests.
    kBitDiff [✔]
  ✓ <interactive> passed 100 tests.
    kBitDiffPos [✔]
HaskellWorks.Data.Bits.Broadword.Word32
  HaskellWorks.Data.Bits.Broadword.Word32
  ✓ <interactive> passed 100 tests.
    kBitDiff [✔]
  ✓ <interactive> passed 100 tests.
    kBitDiffPos [✔]
HaskellWorks.Data.Bits.Broadword.Word64
  HaskellWorks.Data.Bits.Broadword.Word64
  ✓ <interactive> passed 100 tests.
    kBitDiff [✔]
  ✓ <interactive> passed 100 tests.
    kBitDiffPos [✔]
HaskellWorks.Data.Bits.FromBitTextByteString
  HaskellWorks.Data.Bits.FromBitTextByteStringSpec
    For (DVS.Vector Word8)
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack []) :: DVS.Vector Word8 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "0") :: DVS.Vector Word8 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "1") :: DVS.Vector Word8 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "11110000") :: DVS.Vector Word8 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "111100000") :: DVS.Vector Word8 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "111100001") :: DVS.Vector Word8 [✔]
    For (DVS.Vector Word16)
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack []) :: DVS.Vector Word16 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "0") :: DVS.Vector Word16 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "1") :: DVS.Vector Word16 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "1111000011110000") :: DVS.Vector Word16 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "11110000111100000") :: DVS.Vector Word16 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "11110000111100001") :: DVS.Vector Word16 [✔]
    For (DVS.Vector Word32)
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack []) :: DVS.Vector Word32 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "0") :: DVS.Vector Word32 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "1") :: DVS.Vector Word32 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "11110000111100001111000011110000") :: DVS.Vector Word32 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "111100001111000011110000111100000") :: DVS.Vector Word32 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "111100001111000011110000111100001") :: DVS.Vector Word32 [✔]
    For (DVS.Vector Word64)
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack []) :: DVS.Vector Word64 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "0") :: DVS.Vector Word64 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "1") :: DVS.Vector Word64 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "1111000011110000111100001111000011110000111100001111000011110000") :: DVS.Vector Word64 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "11110000111100001111000011110000111100001111000011110000111100000") :: DVS.Vector Word64 [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "11110000111100001111000011110000111100001111000011110000111100001") :: DVS.Vector Word64 [✔]
    For (DVU.Vector Bit.Bit)
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack []) :: DVU.Vector Bit.Bit [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "0") :: DVU.Vector Bit.Bit [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "1") :: DVU.Vector Bit.Bit [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "1111000011110000111100001111000011110000111100001111000011110000") :: DVU.Vector Bit.Bit [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "11110000111100001111000011110000111100001111000011110000111100000") :: DVU.Vector Bit.Bit [✔]
  ✓ <interactive> passed 1 test.
      fromBitTextByteString (BS.unpack "11110000111100001111000011110000111100001111000011110000111100001") :: DVU.Vector Bit.Bit [✔]
HaskellWorks.Data.Bits.Log2
  HaskellWorks.Data.Bits.Log2Spec
  ✓ <interactive> passed 100 tests.
    Log2 Word64 [✔]
  ✓ <interactive> passed 100 tests.
    Log2 Word32 [✔]
HaskellWorks.Data.Bits.Writer.Storable
  HaskellWorks.Data.Bits.Writer.StorableSpec
  ✓ <interactive> passed 1 test.
    unsafeWriteBit [✔]
  ✓ <interactive> passed 1 test.
    unsafeWriteBits 1 [✔]
  ✓ <interactive> passed 1 test.
    unsafeWriteBits 2 [✔]
  ✓ <interactive> passed 1 test.
    unsafeWriteBits 2 [✔]
  ✓ <interactive> passed 1 test.
    unsafeWriteBits 2 [✔]

Finished in 0.1741 seconds
88 examples, 0 failures
Test suite hw-bits-test: PASS
Test suite logged to:
/tmp/workdir-hw-bits/hw-bits-0.7.2.2/dist-newstyle/build/x86_64-linux/ghc-9.6.6/hw-bits-0.7.2.2/t/hw-bits-test/test/hw-bits-0.7.2.2-hw-bits-test.log
1 of 1 test suites (1 of 1 test cases) passed.
