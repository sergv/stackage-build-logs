Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - genvalidity-hspec-aeson-1.0.0.0 (test:genvalidity-hspec-aeson-test) (ephemeral targets)
Preprocessing test suite 'genvalidity-hspec-aeson-test' for genvalidity-hspec-aeson-1.0.0.0...
Building test suite 'genvalidity-hspec-aeson-test' for genvalidity-hspec-aeson-1.0.0.0...
Running 1 test suites...
Test suite genvalidity-hspec-aeson-test: RUNNING...

Test.Validity.Aeson
  JSON [Char] (sequence of 'a's)
    encode :: [Char] -> Data.ByteString.Lazy.ByteString
      never fails to encode a "sequence of 'a's [Char]" [✔]
        +++ OK, passed 100 tests.
    decode :: Data.ByteString.Lazy.ByteString -> Either String [Char]
      ensures that encode and decode are inverses for "sequence of 'a's [Char]"'s [✔]
        +++ OK, passed 100 tests.
  JSON (Ratio Integer) (valid)
    encode :: (Ratio Integer) -> Data.ByteString.Lazy.ByteString
      never fails to encode a "valid (Ratio Integer)" [✔]
        +++ OK, passed 100 tests.
    decode :: Data.ByteString.Lazy.ByteString -> Either String (Ratio Integer)
      ensures that encode and decode are inverses for "valid (Ratio Integer)"'s [✔]
        +++ OK, passed 100 tests.
  JSON Int (valid)
    encode :: Int -> Data.ByteString.Lazy.ByteString
      never fails to encode a "valid Int" [✔]
        +++ OK, passed 100 tests.
    decode :: Data.ByteString.Lazy.ByteString -> Either String Int
      ensures that encode and decode are inverses for "valid Int"'s [✔]
        +++ OK, passed 100 tests.
  JSON Int (arbitrary)
    encode :: Int -> Data.ByteString.Lazy.ByteString
      never fails to encode a "arbitrary Int" [✔]
        +++ OK, passed 100 tests.
    decode :: Data.ByteString.Lazy.ByteString -> Either String Int
      ensures that encode and decode are inverses for "arbitrary Int"'s [✔]
        +++ OK, passed 100 tests.
  JSON ForShow (valid)
    encode :: ForShow -> Data.ByteString.Lazy.ByteString
      never fails to encode a "valid ForShow" [✔]
        +++ OK, passed 100 tests.
    decode :: Data.ByteString.Lazy.ByteString -> Either String ForShow
      ensures that encode and decode are inverses for "valid ForShow"'s [✔]
        +++ OK, passed 100 tests.
  JSON Value (valid)
    encode :: Value -> Data.ByteString.Lazy.ByteString
      never fails to encode a "valid Value" [✔]
        +++ OK, passed 100 tests.
    decode :: Data.ByteString.Lazy.ByteString -> Either String Value
      ensures that encode and decode are inverses for "valid Value"'s [✔]
        +++ OK, passed 100 tests.

Finished in 0.0035 seconds
12 examples, 0 failures
Test suite genvalidity-hspec-aeson-test: PASS
Test suite logged to:
/tmp/workdir-genvalidity-hspec-aeson/genvalidity-hspec-aeson-1.0.0.0/dist-newstyle/build/x86_64-linux/ghc-9.6.6/genvalidity-hspec-aeson-1.0.0.0/t/genvalidity-hspec-aeson-test/test/genvalidity-hspec-aeson-1.0.0.0-genvalidity-hspec-aeson-test.log
1 of 1 test suites (1 of 1 test cases) passed.
