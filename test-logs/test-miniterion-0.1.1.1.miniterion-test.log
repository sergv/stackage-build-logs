Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - miniterion-0.1.1.1 (test:miniterion-test) (ephemeral targets)
Preprocessing test suite 'miniterion-test' for miniterion-0.1.1.1...
Building test suite 'miniterion-test' for miniterion-0.1.1.1...
Running 1 test suites...
Test suite miniterion-test: RUNNING...
All
  benchmarkable
    fib:                                                      benchmarking fib-nf/4 
mean                 31.03 ns
std dev              2.948 ns

benchmarking fib-nf/8 
mean                 189.6 ns
std dev              10.59 ns

benchmarking fib-whnf/4 
mean                 30.79 ns
std dev              2.440 ns

benchmarking fib-whnf/8 
mean                 190.3 ns
std dev              10.78 ns

benchmarking wcIO/nfIO OK (0.81s)
    wcIO:                                                     
mean                 47.87 μs
std dev              4.666 μs

benchmarking wcIO/whnfIO 
mean                 48.48 μs
std dev              3.454 μs

benchmarking wcIO/nfAppIO 
mean                 47.42 μs
std dev              3.979 μs

benchmarking wcIO/whnfAppIO 
mean                 47.98 μs
std dev              4.582 μs

OKbenchmarking wc  (0.80s)
    env
      wc with env:                                            
mean                 34.20 μs
std dev              2.713 μs

OKbenchmarking wc  (0.14s)
    perBatchEnv
      wc with perBatchEnv:                                    
mean                 34.31 μs
std dev              2.638 μs

OKbenchmarking wc 
mean                 44.59 μs
std dev              4.319 μs

 (0.14s)
    perRunEnv
      wc with perRunEnv:                                      OKbenchmarking fib 
      perRunEnv with time limit:                              
mean                 19.19 ms
std dev              949.7 μs

OK (3.35s)benchmarking ... 
    interactive
      simple function:                                        
mean                 9.936 ns
std dev              640.0 ps

OKMicrobenchmark suite - built with miniterion 0.1.1.1

USAGE:
  miniterion-test [OPTIONS] [PATTERN]...

ARGS:
  <PATTERN>...  Pattern(s) to select running benchmarks. If no pattern was
                given, run all benchmarks. Multiple patterns are combined
                with 'OR'. Selections are done by prefix match by default.
                See also "--match" option below.

OPTIONS:
  -h       --help                Show this help text
  -L SECS  --time-limit=SECS     Time limit to run a benchmark
                                 (default: no timeout)
           --baseline=FILE       File to read CSV summary from as baseline
           --csv=FILE            File to write CSV summary to
           --fail-if-faster=NUM  Upper bound acceptable speed up in percents. If a
                                 benchmark is unacceptable faster than baseline (see
                                 --baseline), it will be reported as failed
           --fail-if-slower=NUM  Upper bound acceptable slow down in percents. If a
                                 benchmark is unacceptable slower than baseline (see
                                 --baseline), it will be reported as failed
  -s NUM   --stdev=NUM           Target relative standard deviation of measurement
                                 in percents (default: 5)
           --time-mode=cpu|wall  Whether to measure CPU ("cpu") time or wall-clock
                                 time ("wall") (default: cpu)
  -v INT   --verbosity=INT       Verbosity level (default: 1)
  -m MODE  --match=MODE          How to match benchmark names ("prefix", "glob",
                                 "pattern" (substring), or "ipattern")
  -l       --list                List benchmarks
           --version             Show version info

 (0.17s)
  options
    help with long option:                                    OK
Microbenchmark suite - built with miniterion 0.1.1.1
    help with short option:                                   
USAGE:
  miniterion-test [OPTIONS] [PATTERN]...

ARGS:
  <PATTERN>...  Pattern(s) to select running benchmarks. If no pattern was
                given, run all benchmarks. Multiple patterns are combined
                with 'OR'. Selections are done by prefix match by default.
                See also "--match" option below.

OPTIONS:
  -h       --help                Show this help text
  -L SECS  --time-limit=SECS     Time limit to run a benchmark
                                 (default: no timeout)
           --baseline=FILE       File to read CSV summary from as baseline
           --csv=FILE            File to write CSV summary to
           --fail-if-faster=NUM  Upper bound acceptable speed up in percents. If a
                                 benchmark is unacceptable faster than baseline (see
                                 --baseline), it will be reported as failed
           --fail-if-slower=NUM  Upper bound acceptable slow down in percents. If a
                                 benchmark is unacceptable slower than baseline (see
                                 --baseline), it will be reported as failed
  -s NUM   --stdev=NUM           Target relative standard deviation of measurement
                                 in percents (default: 5)
           --time-mode=cpu|wall  Whether to measure CPU ("cpu") time or wall-clock
                                 time ("wall") (default: cpu)
  -v INT   --verbosity=INT       Verbosity level (default: 1)
  -m MODE  --match=MODE          How to match benchmark names ("prefix", "glob",
                                 "pattern" (substring), or "ipattern")
  -l       --list                List benchmarks
           --version             Show version info

OKbuilt with miniterion 0.1.1.1

    show version info:                                        OK
fib/4
    listing names with long option:                           OKfib/4

    listing names with short option:                          OK
fib/4
    listing name of benchmark using env:                      OK
miniterion-test: uninitialized env
use irrefutable pattern in the function taking the env.
Try `miniterion-test --help' for more information.
    listing name of benchmark using env and pat:              fib/a
fib/b
OK
    listing name of benchmark using env and irrefultable pat: OK
benchmarking fib/4     stdev option:                                             
mean                 28.75 ns
std dev              10.44 ns

OKbenchmarking fib/4  (0.03s)
    short stdev option:                                       
mean                 28.68 ns
std dev              10.26 ns

OKbenchmarking fib/4 
mean                 571.0 ns
std dev              0.000 ps

 (0.03s)
    infinit stdev:                                            OK
miniterion-test: invalid argument `foo' for `--stdev'
Try `miniterion-test --help' for more information.
    invalid stdev arg:                                        OK
miniterion-test: option `--stdev' requires an argument NUM
Try `miniterion-test --help' for more information.
    missing stdev arg:                                        OK
benchmarking fib/4     cpu clock for time-mode option:                           
mean                 28.57 ns
std dev              2.790 ns

OK (0.12s)
    wall clock for time-mode option:                          benchmarking fib/4 
mean                 28.71 ns
std dev              2.580 ns

miniterion-test: invalid argument `blah' for `--time-mode'
Try `miniterion-test --help' for more information.
OK (0.12s)
    invalid time-mode option:                                 miniterion-test: invalid argument `foo' for `--time-limit'
Try `miniterion-test --help' for more information.
OK
    invalid timeout option:                                   OK
    verbosity 0:                                              OKbenchmarking fib/4  (0.11s)
    verbosity 1:                                              
mean                 28.65 ns
std dev              2.656 ns

OKbenchmarking fib/4 
1 iteration gives 491000 ps, alloc: 0 copied: 0 max: 0
2 iterations give 411000 ps, alloc: 0 copied: 0 max: 0
4 iterations give 441000 ps, alloc: 0 copied: 0 max: 0
8 iterations give 611000 ps, alloc: 0 copied: 0 max: 0
16 iterations give 781000 ps, alloc: 0 copied: 0 max: 0
32 iterations give 1233000 ps, alloc: 0 copied: 0 max: 0
64 iterations give 2224000 ps, alloc: 0 copied: 0 max: 0
128 iterations give 4008000 ps, alloc: 0 copied: 0 max: 0
256 iterations give 7765000 ps, alloc: 0 copied: 0 max: 0
512 iterations give 15229000 ps, alloc: 0 copied: 0 max: 0
1024 iterations give 29476000 ps, alloc: 0 copied: 0 max: 0
2048 iterations give 58800000 ps, alloc: 0 copied: 0 max: 0
4096 iterations give 119284000 ps, alloc: 0 copied: 0 max: 0
8192 iterations give 235031000 ps, alloc: 0 copied: 0 max: 0
16384 iterations give 469350000 ps, alloc: 0 copied: 0 max: 0
32768 iterations give 941898000 ps, alloc: 0 copied: 0 max: 0
65536 iterations give 1881941000 ps, alloc: 0 copied: 0 max: 0
 (0.12s)
    verbosity 2:                                              131072 iterations give 3784400000 ps, alloc: 0 copied: 0 max: 0
262144 iterations give 7499303000 ps, alloc: 0 copied: 0 max: 0
524288 iterations give 15030641000 ps, alloc: 0 copied: 0 max: 0
1048576 iterations give 30237790000 ps, alloc: 0 copied: 0 max: 0
2097152 iterations give 61753208000 ps, alloc: 0 copied: 0 max: 0
4194304 iterations give 123816190000 ps, alloc: 0 copied: 0 max: 0

mean                 29.50 ns
std dev              1.410 ns

OK (0.25s)
    invalid verbosity:                                        miniterion-test: invalid argument `foo' for `--verbosity'
Try `miniterion-test --help' for more information.
miniterion-test: invalid argument `100' for `--verbosity'
Try `miniterion-test --help' for more information.
OK
    out of range verbosity:                                   miniterion-test: invalid option `--no-such-option'
Try `miniterion-test --help' for more information.
OK
    non existing option:                                      OK
  skipping
    selecting benchmarks:                                     OK
    selecting benchmarks, skipping group:                     OK
    no matching benchmark:                                    miniterion-test: uninitialized env
use irrefutable pattern in the function taking the env.
Try `miniterion-test --help' for more information.
OK
    selecting under env, strict:                              miniterion-test: uninitialized env under `b'
use irrefutable pattern in the function taking the env.
Try `miniterion-test --help' for more information.
OK
    selecting under env, strict, under group:                 benchmarking a/a1/succ OK
    selecting under env:                                      
mean                 9.117 ns
std dev              678.0 ps

benchmarking a/a1/pred 
mean                 9.116 ns
std dev              658.0 ps

benchmarking a/a2/succ 
mean                 9.325 ns
std dev              640.0 ps

benchmarking a/a2/pred 
mean                 9.122 ns
std dev              644.0 ps

OKbenchmarking foobar  (0.63s)
  substr
    substring match (case sensitive):                         OKbenchmarking foobar 
    substring match (case insensitive):                       OK
    prefix match:                                             benchmarking foobar miniterion-test: invalid argument `no_such_mode' for `--match'
Try `miniterion-test --help' for more information.
OK
    invalid match mode:                                       OK
benchmarking foo   glob
    simple pattern:                                           benchmarking foo OK
    pattern with '?':                                         OK
benchmarking foo     pattern with '*':                                         OK
    pattern with '*' at the end:                              benchmarking foo OKbenchmarking foo? 
    escaping with '\':                                        OK
benchmarking foo foo foo?     escape after '*':                                         benchmarking foo OK
    repeated stars:                                           OKbenchmarking foo 
    simple bracket:                                           OK
benchmarking foo     bracket with range:                                       benchmarking foo OK
    bracket with negation:                                    OK
benchmarking foo     bracket with negation and range:                          benchmarking !-oo OK
    bracket with escapes:                                     OKbenchmarking ]oo 
    char class starting with `]':                             OK
    char class ending with `-':                               benchmarking -oo OKbenchmarking foo 
    char class `[!]a-]':                                      OK
miniterion-test: unbalanced bracket in glob pattern `[foo'
Try `miniterion-test --help' for more information.
    unbalanced bracket:                                       OK
benchmarking fib/4   csv
    writing slow.csv:                                         
mean                 29.96 ns
std dev              1.356 ns

benchmarking fib/8 
mean                 183.0 ns
std dev              10.36 ns

benchmarking fib/16 
mean                 8.903 μs
std dev              736.2 ns

OKbenchmarking fib/4  (0.86s)
    comparing with baseline:                                  
mean                 29.20 ns       (same as baseline)
std dev              2.624 ns

benchmarking fib/8 
mean                 17.65 ns (90% less than baseline)
std dev              1.292 ns

benchmarking fib/16 
mean                 23.52 ns (99% less than baseline)
std dev              1.514 ns

OK (0.48s)
    non-existing baseline:                                    miniterion-test: cannot read file `nosuch.csv' for `--baseline'
Try `miniterion-test --help' for more information.
benchmarking group "one"/a/succ OK
    names containing double quotes:                           
mean                 8.691 ns
std dev              684.0 ps

benchmarking group "one"/a/pred 
mean                 8.697 ns
std dev              652.0 ps

benchmarking group "one"/b/succ 
mean                 8.927 ns
std dev              658.0 ps

benchmarking group "one"/b/pred 
mean                 8.719 ns
std dev              656.0 ps

benchmarking group two/"a" 
mean                 8.488 ns
std dev              674.0 ps

benchmarking group two/"b" 
mean                 9.189 ns
std dev              488.0 ps

benchmarking group three/'"' 
mean                 9.115 ns
std dev              652.0 ps

benchmarking group three/"'" 
mean                 9.085 ns
std dev              674.0 ps

OKbenchmarking group "one"/a/succ  (1.37s)
    reading baseline containing quotes:                       
mean                 9.801 ns (12% more than baseline)
std dev              444.0 ps

benchmarking group "one"/a/pred 
mean                 9.530 ns ( 9% more than baseline)
std dev              646.0 ps

benchmarking group "one"/b/succ 
mean                 9.870 ns (10% more than baseline)
std dev              914.0 ps

benchmarking group "one"/b/pred 
mean                 10.17 ns (16% more than baseline)
std dev              646.0 ps

benchmarking group two/"a" 
mean                 9.116 ns       (same as baseline)
std dev              650.0 ps

benchmarking group two/"b" 
mean                 9.266 ns       (same as baseline)
std dev              748.0 ps

benchmarking group three/'"' 
mean                 9.316 ns       (same as baseline)
std dev              650.0 ps

benchmarking group three/"'" 
mean                 9.320 ns       (same as baseline)
std dev              650.0 ps

OKbenchmarking fib/4  (1.63s)
    writing fast.csv:                                         
mean                 29.63 ns
std dev              2.800 ns

benchmarking fib/8 
mean                 16.58 ns
std dev              1.294 ns

benchmarking fib/16 
mean                 23.55 ns
std dev              1.994 ns

benchmarking fib/4 OK (0.47s)
    fail if slower:                                           
mean                 29.92 ns       (same as baseline)
std dev              2.940 ns

benchmarking fib/8 FAIL
mean                 177.7 ns (971% more than baseline)
std dev              12.97 ns

benchmarking fib/16 FAIL
mean                 8.574 μs (36307% more than baseline)
std dev              327.6 ns


2 out of 3 benchmarks failed:
  - fib/8 (too slow)
  - fib/16 (too slow)
OKbenchmarking fib/16  (0.73s)
    fail if slower, with match:                               FAIL
mean                 8.573 μs (36306% more than baseline)
std dev              680.2 ns


1 out of 1 benchmark failed:
  - fib/16 (too slow)
OK (0.14s)
    fail if slower, invalid arg:                              miniterion-test: invalid argument `foo' for `--fail-if-slower'
Try `miniterion-test --help' for more information.
OKbenchmarking fib/4 
    fail if faster:                                           
mean                 28.46 ns ( 5% less than baseline)
std dev              1.318 ns

benchmarking fib/8 FAIL
mean                 15.83 ns (91% less than baseline)
std dev              1.350 ns

benchmarking fib/16 FAIL
mean                 22.90 ns (99% less than baseline)
std dev              2.128 ns


2 out of 3 benchmarks failed:
  - fib/8 (too fast)
  - fib/16 (too fast)
miniterion-test: invalid argument `foo' for `--fail-if-faster'
Try `miniterion-test --help' for more information.
OK (0.58s)
    fail if faster, invalid arg:                              OK
benchmarking fib/32   timeout
    time limit, long name:                                    FAIL
Timed out while running this benchmark


1 out of 1 benchmark failed:
  - fib/32 (timed out)
OK
benchmarking fib/32 FAIL
Timed out while running this benchmark


1 out of 1 benchmark failed:
  - fib/32 (timed out)
    time limit, short name:                                   OKbenchmarking fib/32 
    time limit, return before the limit:                      
mean                 19.92 ms
std dev              1.272 ms

miniterion-test: invalid argument `foo' for `--time-limit'
Try `miniterion-test --help' for more information.
OK (0.62s)
    invalid time limit arg:                                   OK

All 71 tests passed (13.75s)
Test suite miniterion-test: PASS
Test suite logged to:
/tmp/workdir-miniterion/miniterion-0.1.1.1/dist-newstyle/build/x86_64-linux/ghc-9.6.6/miniterion-0.1.1.1/t/miniterion-test/test/miniterion-0.1.1.1-miniterion-test.log
1 of 1 test suites (1 of 1 test cases) passed.
