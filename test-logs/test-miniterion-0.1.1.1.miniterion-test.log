Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - miniterion-0.1.1.1 (test:miniterion-test) (ephemeral targets)
Preprocessing test suite 'miniterion-test' for miniterion-0.1.1.1...
Building test suite 'miniterion-test' for miniterion-0.1.1.1...
Running 1 test suites...
Test suite miniterion-test: RUNNING...
benchmarking fib-nf/4 All
  benchmarkable
    fib:                                                      
mean                 30.86 ns
std dev              2.114 ns

benchmarking fib-nf/8 
mean                 176.8 ns
std dev              11.03 ns

benchmarking fib-whnf/4 
mean                 31.37 ns
std dev              1.302 ns

benchmarking fib-whnf/8 
mean                 206.2 ns
std dev              20.52 ns

benchmarking wcIO/nfIO OK (1.63s)
    wcIO:                                                     
mean                 38.41 μs
std dev              1.640 μs

benchmarking wcIO/whnfIO 
mean                 38.09 μs
std dev              1.152 μs

benchmarking wcIO/nfAppIO 
mean                 39.84 μs
std dev              3.383 μs

benchmarking wcIO/whnfAppIO 
mean                 42.26 μs
std dev              2.754 μs

OKbenchmarking wc  (1.63s)
    env
      wc with env:                                            
mean                 26.26 μs
std dev              1.436 μs

OKbenchmarking wc  (0.22s)
    perBatchEnv
      wc with perBatchEnv:                                    
mean                 26.68 μs
std dev              2.112 μs

OK (0.22s)
    perRunEnv
      wc with perRunEnv:                                      benchmarking wc 
mean                 33.57 μs
std dev              1.613 μs

OKbenchmarking fib 
      perRunEnv with time limit:                              
mean                 20.38 ms
std dev              813.5 μs

OK (3.31s)
    interactive
      simple function:                                        benchmarking ... 
mean                 7.717 ns
std dev              640.0 ps

OKMicrobenchmark suite - built with miniterion 0.1.1.1

USAGE:
  miniterion-test [OPTIONS] [PATTERN]...

ARGS:
  <PATTERN>...  Pattern(s) to select running benchmarks. If no pattern was
                given, run all benchmarks. Multiple patterns are combined
                with 'OR'. Selections are done by prefix match by default.
                See also "--match" option below.

OPTIONS:
  -h       --help                Show this help text
  -L SECS  --time-limit=SECS     Time limit to run a benchmark
                                 (default: no timeout)
           --baseline=FILE       File to read CSV summary from as baseline
           --csv=FILE            File to write CSV summary to
           --fail-if-faster=NUM  Upper bound acceptable speed up in percents. If a
                                 benchmark is unacceptable faster than baseline (see
                                 --baseline), it will be reported as failed
           --fail-if-slower=NUM  Upper bound acceptable slow down in percents. If a
                                 benchmark is unacceptable slower than baseline (see
                                 --baseline), it will be reported as failed
  -s NUM   --stdev=NUM           Target relative standard deviation of measurement
                                 in percents (default: 5)
           --time-mode=cpu|wall  Whether to measure CPU ("cpu") time or wall-clock
                                 time ("wall") (default: cpu)
  -v INT   --verbosity=INT       Verbosity level (default: 1)
  -m MODE  --match=MODE          How to match benchmark names ("prefix", "glob",
                                 "pattern" (substring), or "ipattern")
  -l       --list                List benchmarks
           --version             Show version info

 (0.13s)
  options
    help with long option:                                    OK
    help with short option:                                   Microbenchmark suite - built with miniterion 0.1.1.1

USAGE:
  miniterion-test [OPTIONS] [PATTERN]...

ARGS:
  <PATTERN>...  Pattern(s) to select running benchmarks. If no pattern was
                given, run all benchmarks. Multiple patterns are combined
                with 'OR'. Selections are done by prefix match by default.
                See also "--match" option below.

OPTIONS:
  -h       --help                Show this help text
  -L SECS  --time-limit=SECS     Time limit to run a benchmark
                                 (default: no timeout)
           --baseline=FILE       File to read CSV summary from as baseline
           --csv=FILE            File to write CSV summary to
           --fail-if-faster=NUM  Upper bound acceptable speed up in percents. If a
                                 benchmark is unacceptable faster than baseline (see
                                 --baseline), it will be reported as failed
           --fail-if-slower=NUM  Upper bound acceptable slow down in percents. If a
                                 benchmark is unacceptable slower than baseline (see
                                 --baseline), it will be reported as failed
  -s NUM   --stdev=NUM           Target relative standard deviation of measurement
                                 in percents (default: 5)
           --time-mode=cpu|wall  Whether to measure CPU ("cpu") time or wall-clock
                                 time ("wall") (default: cpu)
  -v INT   --verbosity=INT       Verbosity level (default: 1)
  -m MODE  --match=MODE          How to match benchmark names ("prefix", "glob",
                                 "pattern" (substring), or "ipattern")
  -l       --list                List benchmarks
           --version             Show version info

OKbuilt with miniterion 0.1.1.1

    show version info:                                        OKfib/4

    listing names with long option:                           OKfib/4

    listing names with short option:                          OKfib/4

    listing name of benchmark using env:                      OK
miniterion-test: uninitialized env
use irrefutable pattern in the function taking the env.
Try `miniterion-test --help' for more information.
    listing name of benchmark using env and pat:              fib/a
fib/b
OK
    listing name of benchmark using env and irrefultable pat: OK
benchmarking fib/4     stdev option:                                             
mean                 28.72 ns
std dev              10.25 ns

OKbenchmarking fib/4  (0.03s)
    short stdev option:                                       
mean                 30.99 ns
std dev              10.40 ns

OKbenchmarking fib/4 
mean                 531.0 ns
std dev              0.000 ps

 (0.04s)
    infinit stdev:                                            OK
    invalid stdev arg:                                        miniterion-test: invalid argument `foo' for `--stdev'
Try `miniterion-test --help' for more information.
OK
miniterion-test: option `--stdev' requires an argument NUM
Try `miniterion-test --help' for more information.
    missing stdev arg:                                        OKbenchmarking fib/4 
    cpu clock for time-mode option:                           
mean                 28.98 ns
std dev              2.658 ns

OK (0.13s)
    wall clock for time-mode option:                          benchmarking fib/4 
mean                 31.48 ns
std dev              2.898 ns

miniterion-test: invalid argument `blah' for `--time-mode'
Try `miniterion-test --help' for more information.
OK (0.13s)
    invalid time-mode option:                                 miniterion-test: invalid argument `foo' for `--time-limit'
Try `miniterion-test --help' for more information.
OK
    invalid timeout option:                                   OK
    verbosity 0:                                              OKbenchmarking fib/4  (0.26s)
    verbosity 1:                                              
mean                 32.25 ns
std dev              2.656 ns

benchmarking fib/4 
1 iteration gives 501000 ps, alloc: 0 copied: 0 max: 0
2 iterations give 591000 ps, alloc: 0 copied: 0 max: 0
4 iterations give 551000 ps, alloc: 0 copied: 0 max: 0
8 iterations give 581000 ps, alloc: 0 copied: 0 max: 0
16 iterations give 781000 ps, alloc: 0 copied: 0 max: 0
32 iterations give 1332000 ps, alloc: 0 copied: 0 max: 0
64 iterations give 2325000 ps, alloc: 0 copied: 0 max: 0
128 iterations give 4328000 ps, alloc: 0 copied: 0 max: 0
256 iterations give 8616000 ps, alloc: 0 copied: 0 max: 0
512 iterations give 16361000 ps, alloc: 0 copied: 0 max: 0
1024 iterations give 32100000 ps, alloc: 0 copied: 0 max: 0
2048 iterations give 63880000 ps, alloc: 0 copied: 0 max: 0
4096 iterations give 127470000 ps, alloc: 0 copied: 0 max: 0
8192 iterations give 255651000 ps, alloc: 0 copied: 0 max: 0
16384 iterations give 512061000 ps, alloc: 0 copied: 0 max: 0
32768 iterations give 1027037000 ps, alloc: 0 copied: 0 max: 0
65536 iterations give 2041009000 ps, alloc: 0 copied: 0 max: 0
OK (0.14s)
    verbosity 2:                                              131072 iterations give 4107327000 ps, alloc: 0 copied: 0 max: 0
262144 iterations give 8256684000 ps, alloc: 0 copied: 0 max: 0
524288 iterations give 16630215000 ps, alloc: 0 copied: 0 max: 0
1048576 iterations give 33823628000 ps, alloc: 0 copied: 0 max: 0
2097152 iterations give 67711767000 ps, alloc: 0 copied: 0 max: 0

mean                 32.28 ns
std dev              2.614 ns

miniterion-test: invalid argument `foo' for `--verbosity'
Try `miniterion-test --help' for more information.
OK (0.14s)
    invalid verbosity:                                        miniterion-test: invalid argument `100' for `--verbosity'
Try `miniterion-test --help' for more information.
OK
    out of range verbosity:                                   OK
miniterion-test: invalid option `--no-such-option'
Try `miniterion-test --help' for more information.
    non existing option:                                      OK
  skipping
    selecting benchmarks:                                     OK
    selecting benchmarks, skipping group:                     OK
    no matching benchmark:                                    OK
miniterion-test: uninitialized env
use irrefutable pattern in the function taking the env.
Try `miniterion-test --help' for more information.
    selecting under env, strict:                              miniterion-test: uninitialized env under `b'
use irrefutable pattern in the function taking the env.
Try `miniterion-test --help' for more information.
OK
    selecting under env, strict, under group:                 OKbenchmarking a/a1/succ 
    selecting under env:                                      
mean                 9.244 ns
std dev              392.0 ps

benchmarking a/a1/pred 
mean                 9.440 ns
std dev              644.0 ps

benchmarking a/a2/succ 
mean                 9.029 ns
std dev              646.0 ps

benchmarking a/a2/pred 
mean                 9.511 ns
std dev              784.0 ps

OKbenchmarking foobar  (0.79s)
  substr
    substring match (case sensitive):                         OK
benchmarking foobar     substring match (case insensitive):                       OKbenchmarking foobar 
    prefix match:                                             OK
miniterion-test: invalid argument `no_such_mode' for `--match'
Try `miniterion-test --help' for more information.
    invalid match mode:                                       OKbenchmarking foo 
  glob
    simple pattern:                                           OK
benchmarking foo     pattern with '?':                                         OKbenchmarking foo 
    pattern with '*':                                         OK
benchmarking foo     pattern with '*' at the end:                              OK
benchmarking foo?     escaping with '\':                                        benchmarking foo foo foo? OK
    escape after '*':                                         OKbenchmarking foo 
    repeated stars:                                           OK
benchmarking foo     simple bracket:                                           OK
    bracket with range:                                       benchmarking foo OKbenchmarking foo 
    bracket with negation:                                    OK
benchmarking foo     bracket with negation and range:                          OKbenchmarking !-oo 
    bracket with escapes:                                     OK
benchmarking ]oo     char class starting with `]':                             OKbenchmarking -oo 
    char class ending with `-':                               OK
benchmarking foo     char class `[!]a-]':                                      OK
    unbalanced bracket:                                       miniterion-test: unbalanced bracket in glob pattern `[foo'
Try `miniterion-test --help' for more information.
OK
benchmarking fib/4   csv
    writing slow.csv:                                         
mean                 28.61 ns
std dev              2.848 ns

benchmarking fib/8 
mean                 183.8 ns
std dev              14.33 ns

benchmarking fib/16 
mean                 8.738 μs
std dev              698.9 ns

OKbenchmarking fib/4  (0.47s)
    comparing with baseline:                                  
mean                 28.18 ns       (same as baseline)
std dev              1.968 ns

benchmarking fib/8 
mean                 16.63 ns (90% less than baseline)
std dev              1.370 ns

benchmarking fib/16 
mean                 22.17 ns (99% less than baseline)
std dev              1.298 ns

OK (0.57s)
    non-existing baseline:                                    miniterion-test: cannot read file `nosuch.csv' for `--baseline'
Try `miniterion-test --help' for more information.
benchmarking group "one"/a/succ OK
    names containing double quotes:                           
mean                 8.953 ns
std dev              454.0 ps

benchmarking group "one"/a/pred 
mean                 8.991 ns
std dev              650.0 ps

benchmarking group "one"/b/succ 
mean                 9.031 ns
std dev              664.0 ps

benchmarking group "one"/b/pred 
mean                 9.255 ns
std dev              662.0 ps

benchmarking group two/"a" 
mean                 8.598 ns
std dev              702.0 ps

benchmarking group two/"b" 
mean                 8.578 ns
std dev              664.0 ps

benchmarking group three/'"' 
mean                 8.821 ns
std dev              642.0 ps

benchmarking group three/"'" 
mean                 8.197 ns
std dev              660.0 ps

OKbenchmarking group "one"/a/succ  (1.64s)
    reading baseline containing quotes:                       
mean                 8.401 ns ( 6% less than baseline)
std dev              330.0 ps

benchmarking group "one"/a/pred 
mean                 8.632 ns       (same as baseline)
std dev              430.0 ps

benchmarking group "one"/b/succ 
mean                 8.397 ns       (same as baseline)
std dev              652.0 ps

benchmarking group "one"/b/pred 
mean                 9.232 ns       (same as baseline)
std dev              656.0 ps

benchmarking group two/"a" 
mean                 8.187 ns       (same as baseline)
std dev              640.0 ps

benchmarking group two/"b" 
mean                 8.193 ns       (same as baseline)
std dev              646.0 ps

benchmarking group three/'"' 
mean                 8.396 ns       (same as baseline)
std dev              642.0 ps

benchmarking group three/"'" 
mean                 8.408 ns       (same as baseline)
std dev              640.0 ps

OKbenchmarking fib/4  (1.46s)
    writing fast.csv:                                         
mean                 28.11 ns
std dev              1.644 ns

benchmarking fib/8 
mean                 15.77 ns
std dev              728.0 ps

benchmarking fib/16 
mean                 22.01 ns
std dev              1.292 ns

benchmarking fib/4 OK (0.70s)
    fail if slower:                                           FAIL
mean                 31.14 ns (10% more than baseline)
std dev              2.560 ns

benchmarking fib/8 FAIL
mean                 189.9 ns (1104% more than baseline)
std dev              5.548 ns

benchmarking fib/16 FAIL
mean                 9.334 μs (42299% more than baseline)
std dev              670.7 ns


3 out of 3 benchmarks failed:
  - fib/4 (too slow)
  - fib/8 (too slow)
  - fib/16 (too slow)
benchmarking fib/16 OK (0.70s)
    fail if slower, with match:                               FAIL
mean                 9.157 μs (41494% more than baseline)
std dev              694.0 ns


1 out of 1 benchmark failed:
  - fib/16 (too slow)
miniterion-test: invalid argument `foo' for `--fail-if-slower'
Try `miniterion-test --help' for more information.
OK (0.15s)
    fail if slower, invalid arg:                              OKbenchmarking fib/4 
    fail if faster:                                           
mean                 30.87 ns       (same as baseline)
std dev              2.716 ns

benchmarking fib/8 FAIL
mean                 15.63 ns (91% less than baseline)
std dev              1.280 ns

benchmarking fib/16 FAIL
mean                 22.38 ns (99% less than baseline)
std dev              1.590 ns


2 out of 3 benchmarks failed:
  - fib/8 (too fast)
  - fib/16 (too fast)
miniterion-test: invalid argument `foo' for `--fail-if-faster'
Try `miniterion-test --help' for more information.
OK (0.46s)
    fail if faster, invalid arg:                              OK
  timeout
    time limit, long name:                                    benchmarking fib/32 FAIL
Timed out while running this benchmark


1 out of 1 benchmark failed:
  - fib/32 (timed out)
OKbenchmarking fib/32 
FAIL
Timed out while running this benchmark
    time limit, short name:                                   

1 out of 1 benchmark failed:
  - fib/32 (timed out)
benchmarking fib/32 OK
    time limit, return before the limit:                      
mean                 19.42 ms
std dev              417.4 μs

OK (0.61s)
    invalid time limit arg:                                   miniterion-test: invalid argument `foo' for `--time-limit'
Try `miniterion-test --help' for more information.
OK

All 71 tests passed (15.56s)
Test suite miniterion-test: PASS
Test suite logged to:
/tmp/workdir-miniterion/miniterion-0.1.1.1/dist-newstyle/build/x86_64-linux/ghc-9.6.6/miniterion-0.1.1.1/t/miniterion-test/test/miniterion-0.1.1.1-miniterion-test.log
1 of 1 test suites (1 of 1 test cases) passed.
