Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - apply-merge-0.1.1.0 (test:apply-merge-tests) (ephemeral targets)
Preprocessing test suite 'apply-merge-tests' for apply-merge-0.1.1.0...
Building test suite 'apply-merge-tests' for apply-merge-0.1.1.0...
Running 1 test suites...
Test suite apply-merge-tests: RUNNING...

  ApplyMerge.DoublyLinkedList
    basic tests
      applyMerge (+) [] [] == []:                                                                       OK
      applyMerge (+) [0 ..] [] == []:                                                                   OK
      applyMerge (+) [] [0 ..] == []:                                                                   OK
      applyMerge (+) [0 .. 10] [0 .. 10] is correct:                                                    OK
      applyMerge (+) [0 .. 10] (replicate 10 1) is correct:                                             OK
      applyMerge (+) (replicate 10 1) [0 .. 10] is correct:                                             OK
      applyMerge (+) (replicate 10 1) (replicate 10 1) is correct:                                      OK
      applyMerge (+) [0..] [0..] is correct in the first 100 elems:                                     OK
    skewed tests
      applyMerge (^) [2..] [1..] is correct in the first 100 elems:                                     OK
      applyMerge (flip (^)) [2..] [1..] is correct in the first 100 elems:                              OK
    block tests
      applyMerge (\x y -> (x `quot` 3) + (y `quot` 3)) [0..] [0..] is correct in the first 100 elems:   OK
    max tests
      applyMerge max [0..] [0..] is correct in the first 100 elems:                                     OK
  ApplyMerge.IntMap
    basic tests
      applyMerge (+) [] [] == []:                                                                       OK
      applyMerge (+) [0 ..] [] == []:                                                                   OK
      applyMerge (+) [] [0 ..] == []:                                                                   OK
      applyMerge (+) [0 .. 10] [0 .. 10] is correct:                                                    OK
      applyMerge (+) [0 .. 10] (replicate 10 1) is correct:                                             OK
      applyMerge (+) (replicate 10 1) [0 .. 10] is correct:                                             OK
      applyMerge (+) (replicate 10 1) (replicate 10 1) is correct:                                      OK
      applyMerge (+) [0..] [0..] is correct in the first 100 elems:                                     OK
    skewed tests
      applyMerge (^) [2..] [1..] is correct in the first 100 elems:                                     OK
      applyMerge (flip (^)) [2..] [1..] is correct in the first 100 elems:                              OK
    block tests
      applyMerge (\x y -> (x `quot` 3) + (y `quot` 3)) [0..] [0..] is correct in the first 100 elems:   OK
    max tests
      applyMerge max [0..] [0..] is correct in the first 100 elems:                                     OK
  ApplyMerge.IntSet
    basic tests
      applyMerge (+) [] [] == []:                                                                       OK
      applyMerge (+) [0 ..] [] == []:                                                                   OK
      applyMerge (+) [] [0 ..] == []:                                                                   OK
      applyMerge (+) [0 .. 10] [0 .. 10] is correct:                                                    OK
      applyMerge (+) [0 .. 10] (replicate 10 1) is correct:                                             OK
      applyMerge (+) (replicate 10 1) [0 .. 10] is correct:                                             OK
      applyMerge (+) (replicate 10 1) (replicate 10 1) is correct:                                      OK
      applyMerge (+) [0..] [0..] is correct in the first 100 elems:                                     OK
    skewed tests
      applyMerge (^) [2..] [1..] is correct in the first 100 elems:                                     OK
      applyMerge (flip (^)) [2..] [1..] is correct in the first 100 elems:                              OK
    block tests
      applyMerge (\x y -> (x `quot` 3) + (y `quot` 3)) [0..] [0..] is correct in the first 100 elems:   OK
    max tests
      applyMerge max [0..] [0..] is correct in the first 100 elems:                                     OK
  ApplyMerge.MergeAll
    basic tests
      applyMerge (+) [] [] == []:                                                                       OK
      applyMerge (+) [0 ..] [] == []:                                                                   OK
      applyMerge (+) [] [0 ..] == []:                                                                   OK
      applyMerge (+) [0 .. 10] [0 .. 10] is correct:                                                    OK
      applyMerge (+) [0 .. 10] (replicate 10 1) is correct:                                             OK
      applyMerge (+) (replicate 10 1) [0 .. 10] is correct:                                             OK
      applyMerge (+) (replicate 10 1) (replicate 10 1) is correct:                                      OK
      applyMerge (+) [0..] [0..] is correct in the first 100 elems:                                     OK
    skewed tests
      applyMerge (^) [2..] [1..] is correct in the first 100 elems:                                     OK
      applyMerge (flip (^)) [2..] [1..] is correct in the first 100 elems:                              OK
    block tests
      applyMerge (\x y -> (x `quot` 3) + (y `quot` 3)) [0..] [0..] is correct in the first 100 elems:   OK
    max tests
      applyMerge max [0..] [0..] is correct in the first 100 elems:                                     OK
  Data.List.ApplyMerge
    applyMergeOn
      basic tests
        applyMerge (+) [] [] == []:                                                                     OK
        applyMerge (+) [0 ..] [] == []:                                                                 OK
        applyMerge (+) [] [0 ..] == []:                                                                 OK
        applyMerge (+) [0 .. 10] [0 .. 10] is correct:                                                  OK
        applyMerge (+) [0 .. 10] (replicate 10 1) is correct:                                           OK
        applyMerge (+) (replicate 10 1) [0 .. 10] is correct:                                           OK
        applyMerge (+) (replicate 10 1) (replicate 10 1) is correct:                                    OK
        applyMerge (+) [0..] [0..] is correct in the first 100 elems:                                   OK
      skewed tests
        applyMerge (^) [2..] [1..] is correct in the first 100 elems:                                   OK
        applyMerge (flip (^)) [2..] [1..] is correct in the first 100 elems:                            OK
      block tests
        applyMerge (\x y -> (x `quot` 3) + (y `quot` 3)) [0..] [0..] is correct in the first 100 elems: OK
      max tests
        applyMerge max [0..] [0..] is correct in the first 100 elems:                                   OK
      gaussian integers x + yi, with 0 <= x <= y, ordered by norm:                                      OK
    applyMergeBy
      basic tests
        applyMerge (+) [] [] == []:                                                                     OK
        applyMerge (+) [0 ..] [] == []:                                                                 OK
        applyMerge (+) [] [0 ..] == []:                                                                 OK
        applyMerge (+) [0 .. 10] [0 .. 10] is correct:                                                  OK
        applyMerge (+) [0 .. 10] (replicate 10 1) is correct:                                           OK
        applyMerge (+) (replicate 10 1) [0 .. 10] is correct:                                           OK
        applyMerge (+) (replicate 10 1) (replicate 10 1) is correct:                                    OK
        applyMerge (+) [0..] [0..] is correct in the first 100 elems:                                   OK
      skewed tests
        applyMerge (^) [2..] [1..] is correct in the first 100 elems:                                   OK
        applyMerge (flip (^)) [2..] [1..] is correct in the first 100 elems:                            OK
      block tests
        applyMerge (\x y -> (x `quot` 3) + (y `quot` 3)) [0..] [0..] is correct in the first 100 elems: OK
      max tests
        applyMerge max [0..] [0..] is correct in the first 100 elems:                                   OK
  Data.DoublyLinkedList.STRef
    Construction
      empty:                                                                                            OK
      fromList:                                                                                         OK
    Traversal
      head
        head of empty list:                                                                             OK
        head of non-empty lists:                                                                        OK
      last
        last of empty list:                                                                             OK
        last of non-empty lists:                                                                        OK
      next
        next on empty list:                                                                             IGNORED
        next on [1]:                                                                                    IGNORED
        next on [3, 2, 1]:                                                                              IGNORED
        next on [1, 1, 1, 1, 1]:                                                                        IGNORED
      prev
        prev on empty list:                                                                             IGNORED
        prev on [1]:                                                                                    IGNORED
        prev on [3, 2, 1]:                                                                              IGNORED
        prev on [1, 1, 1, 1, 1]:                                                                        IGNORED
    Query
      null
        null of empty list:                                                                             OK
        null of non-empty list:                                                                         OK
      value:                                                                                            OK
    Insertion
      cons
        Create [1] with cons:                                                                           OK
        Create [1, 2] with cons:                                                                        OK
        Create [1, 2, 3] with cons:                                                                     OK
      snoc
        Create [1] with snoc:                                                                           IGNORED
        Create [1, 2] with snoc:                                                                        IGNORED
        Create [1, 2, 3] with snoc:                                                                     IGNORED
      insertBefore
        Create [1, 0] with insertBefore:                                                                IGNORED
        Create [1, 2, 0] with insertBefore:                                                             IGNORED
        Create [1, 2, 3, 0] with insertBefore:                                                          IGNORED
      insertAfter
        Create [0, 1] with insertAfter:                                                                 IGNORED
        Create [0, 1, 2] with insertAfter:                                                              IGNORED
        Create [0, 1, 2, 3] with insertAfter:                                                           IGNORED
      insertBefore and insertAfter
        Create [-1, 0, 1] with insertBefore and insertAfter:                                            IGNORED
        Create [-2, -1, 0, 1, 2] with insertBefore and insertAfter:                                     IGNORED
        Create [-3, -2, -1, 0, 1, 2, 3] with insertBefore and insertAfter:                              IGNORED
    Deletion
      delete
        Turn [-2, -1, 0, 1, 2] -> [-2, -1, 1, 2] using delete:                                          OK
        Turn [1, 2, 3, 4, 5, 6] -> [2, 4, 6] using delete:                                              OK
    List conversion
      toList:                                                                                           OK
    Integration:                                                                                        IGNORED
  Data.PQueue.Prio.Min.Mutable
    priority queue sorts a list:                                                                        OK
      +++ OK, passed 100 tests.

All 110 tests passed (0.01s)
Test suite apply-merge-tests: PASS
Test suite logged to:
/tmp/workdir-apply-merge/apply-merge-0.1.1.0/dist-newstyle/build/x86_64-linux/ghc-9.6.6/apply-merge-0.1.1.0/t/apply-merge-tests/test/apply-merge-0.1.1.0-apply-merge-tests.log
1 of 1 test suites (1 of 1 test cases) passed.
