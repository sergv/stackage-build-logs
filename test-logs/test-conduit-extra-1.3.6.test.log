Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - conduit-extra-1.3.6 (test:test) (ephemeral targets)
Preprocessing test suite 'test' for conduit-extra-1.3.6...
Building test suite 'test' for conduit-extra-1.3.6...
Running 1 test suites...
Test suite test: RUNNING...

Data.Conduit.Attoparsec
  Data.Conduit.AttoparsecSpec
    error position
      works for text [✔]
      works for bytestring [✔]
      works in last chunk [✔]
      works in last chunk [✔]
      works after new line in text [✔]
      works after new line in bytestring [✔]
      works for first line [✔]
    conduitParser
      parses a repeated stream [✔]
      positions on first line [✔]
Data.Conduit.Binary
  Data.Conduit.Binary
    file access
      read [✔]
      read range [✔]
      write [✔]
      write builder (withSinkFileBuilder) [✔]
      conduit [✔]
    binary isolate
      works [✔]
    properly using binary file reading
      sourceFile [✔]
    binary head
      works [✔]
        +++ OK, passed 100 tests.
    binary takeWhile
      works [✔]
        +++ OK, passed 100 tests.
      leftovers present [✔]
        +++ OK, passed 100 tests.
    binary dropWhile
      works [✔]
        +++ OK, passed 100 tests.
    binary take
      nothing [✔]
      normal [✔]
      all [✔]
      more [✔]
    binary
      lines [✔]
        +++ OK, passed 100 tests.
    sinkCacheLength
      works [✔]
    sinkFileCautious
      success [✔]
      failure [✔]
    sinkSystemTempFile [✔]
    Data.Conduit.Binary.mapM_
      telling works [✔]
        +++ OK, passed 100 tests.
    exception handling
      catchC [✔]
      tryC [✔]
    normalFuseLeft
      does not double close conduit [✔]
    Storable
      sink Maybe
        chunk size 1 [✔]
          +++ OK, passed 100 tests.
        chunk size 5 [✔]
          +++ OK, passed 100 tests.
        chunk size 10 [✔]
          +++ OK, passed 100 tests.
        chunk size 100 [✔]
          +++ OK, passed 100 tests.
      sink exception
        chunk size 1 [✔]
          +++ OK, passed 100 tests.
        chunk size 5 [✔]
          +++ OK, passed 100 tests.
        chunk size 10 [✔]
          +++ OK, passed 100 tests.
        chunk size 100 [✔]
          +++ OK, passed 100 tests.
      insufficient bytes are leftovers, one chunk [✔]
      insufficient bytes are leftovers, multiple chunks [✔]
Data.Conduit.ByteString.Builder
  Data.Conduit.ByteString.Builder
    idempotent to toLazyByteString [✔]
      +++ OK, passed 100 tests.
    works for large input [✔]
    works for lazy bytestring insertion [✔]
    flush shouldn't bring in empty strings. [✔]
    flushing [✔]
      +++ OK, passed 100 tests.
    large flush input [✔]
Data.Conduit.Extra
  Data.Conduit.Extra
    basic test [✔]
    get leftovers [✔]
    multiple values [✔]
    more complex [✔]
      +++ OK, passed 100 tests.
Data.Conduit.Filesystem
  Data.Conduit.Filesystem
    sourceDirectory [✔]
    sourceDirectoryDeep [✔]
Data.Conduit.Lazy
  Data.Conduit.Lazy
    lazy
      works inside a ResourceT [✔]
      returns nothing outside ResourceT [✔]
      works with pure sources [✔]
Data.Conduit.Network
  Data.Conduit.Network
    run general server
      running tcp server [✔]
    fork server
      can connect to server [✔]
      fork server also executes custom afterBind [✔]
      fork server really waits for server to be finalized before returning [✔]
Data.Conduit.Process
  Data.Conduit.Process
    cat [✔]
      +++ OK, passed 100 tests.
    closed stream [✔]
    handles sub-process exit code [✔]
    consumes stdout [✔]
    consumes stderr [✔]
    feeds stdin [✔]
    blocking vs non-blocking [✔]
Data.Conduit.Process.Typed
  cat works [✔]
  cat works with withLoggedProcess_ [✔]
  failing process throws [✔]
  failing process throws [✔]
Data.Conduit.Text
  Data.Conduit.Text
    text
      utf8
        single chunk [✔]
          +++ OK, passed 100 tests.
        many chunks [✔]
          +++ OK, passed 100 tests.
        raw bytes [✔]
          +++ OK, passed 100 tests.
        encoding [✔]
          +++ OK, passed 100 tests.
        valid then invalid [✔]
          +++ OK, passed 100 tests.
      utf16_le
        single chunk [✔]
          +++ OK, passed 100 tests.
        many chunks [✔]
          +++ OK, passed 100 tests.
        raw bytes [✔]
          +++ OK, passed 100 tests.
        encoding [✔]
          +++ OK, passed 100 tests.
        valid then invalid [✔]
          +++ OK, passed 100 tests.
      utf16_be
        single chunk [✔]
          +++ OK, passed 100 tests.
        many chunks [✔]
          +++ OK, passed 100 tests.
        raw bytes [✔]
          +++ OK, passed 100 tests.
        encoding [✔]
          +++ OK, passed 100 tests.
        valid then invalid [✔]
          +++ OK, passed 100 tests.
      utf32_le
        single chunk [✔]
          +++ OK, passed 100 tests.
        many chunks [✔]
          +++ OK, passed 100 tests.
        raw bytes [✔]
          +++ OK, passed 100 tests.
        encoding [✔]
          +++ OK, passed 100 tests.
        valid then invalid [✔]
          +++ OK, passed 100 tests.
      utf32_be
        single chunk [✔]
          +++ OK, passed 100 tests.
        many chunks [✔]
          +++ OK, passed 100 tests.
        raw bytes [✔]
          +++ OK, passed 100 tests.
        encoding [✔]
          +++ OK, passed 100 tests.
        valid then invalid [✔]
          +++ OK, passed 100 tests.
      mixed utf16 and utf8 [✔]
      invalid utf8 [✔]
      catch UTF8 exceptions [✔]
      catch UTF8 exceptions, pure [✔]
      catch UTF8 exceptions, catchExceptionC [✔]
      catch UTF8 exceptions, catchExceptionC, decodeUtf8 [✔]
      lenient UTF8 decoding [✔]
        +++ OK, passed 100 tests.
    text lines
      yields nothing given nothing [✔]
      yields nothing given only empty text [✔]
      works across split lines [✔]
      works with multiple lines in an item [✔]
      works with ending on a newline [✔]
      works with ending a middle item on a newline [✔]
      works with empty text [✔]
      works with empty lines [✔]
    text lines bounded
      yields nothing given nothing [✔]
      yields nothing given only empty text [✔]
      works across split lines [✔]
      works with multiple lines in an item [✔]
      works with ending on a newline [✔]
      works with ending a middle item on a newline [✔]
      works with empty text [✔]
      works with empty lines [✔]
      throws an exception when lines are too long [✔]
      works with infinite input [✔]
    text decode
      doesn't throw runtime exceptions [✔]
      is not too eager [✔]
Data.Conduit.Zlib
  Data.Conduit.Zlib
    idempotent [✔]
      +++ OK, passed 100 tests.
    flush [✔]
      +++ OK, passed 100 tests.
    compressFlush large data [✔]
    uncompressed after compressed [✔]
    multiple compressed values [✔]
    single compressed, multiple uncompressed chunks [✔]
    multiple, over 32k [✔]

Finished in 4.3318 seconds
132 examples, 0 failures
Test suite test: PASS
Test suite logged to:
/tmp/workdir-conduit-extra/conduit-extra-1.3.6/dist-newstyle/build/x86_64-linux/ghc-9.6.6/conduit-extra-1.3.6/t/test/test/conduit-extra-1.3.6-test.log
1 of 1 test suites (1 of 1 test cases) passed.
