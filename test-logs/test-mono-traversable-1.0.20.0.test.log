Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - mono-traversable-1.0.20.0 (test:test) (ephemeral targets)
Preprocessing test suite 'test' for mono-traversable-1.0.20.0...
Building test suite 'test' for mono-traversable-1.0.20.0...
Running 1 test suites...
Test suite test: RUNNING...

onull
  works on empty lists [✔]
  works on non-empty lists [✔]
  works on empty texts [✔]
  works on non-empty texts [✔]
osum
  works on lists [✔]
    +++ OK, passed 100 tests; 93 discarded.
oproduct
  works on lists [✔]
    +++ OK, passed 100 tests; 99 discarded.
olength
  works on lists [✔]
    +++ OK, passed 100 tests.
  works on texts [✔]
    +++ OK, passed 100 tests.
  works on lazy bytestrings [✔]
    +++ OK, passed 100 tests.
omap
  works on lists [✔]
    +++ OK, passed 100 tests.
  works on lazy bytestrings [✔]
    +++ OK, passed 100 tests.
  works on texts [✔]
    +++ OK, passed 100 tests.
oconcatMap
  works on lists [✔]
    +++ OK, passed 100 tests.
ocompareLength
  works on lists [✔]
    +++ OK, passed 100 tests.
groupAll
  works on lists [✔]
  works on texts [✔]
unsnoc
  works on lists [✔]
    +++ OK, passed 100 tests.
  works on texts [✔]
    +++ OK, passed 100 tests.
  works on lazy bytestrings [✔]
    +++ OK, passed 100 tests.
index
  works on lists [✔]
    +++ OK, passed 100 tests.
  works on strict texts [✔]
    +++ OK, passed 100 tests.
  works on lazy texts [✔]
    +++ OK, passed 100 tests.
  works on strict bytestrings [✔]
    +++ OK, passed 100 tests.
  works on lazy bytestrings [✔]
    +++ OK, passed 100 tests.
  works on Vector [✔]
    +++ OK, passed 100 tests.
  works on SVector [✔]
    +++ OK, passed 100 tests.
  works on UVector [✔]
    +++ OK, passed 100 tests.
  works on Seq [✔]
    +++ OK, passed 100 tests.
groupAllOn
  works on lists [✔]
breakWord
  ("hello world","hello","world") [✔]
  ("hello     world","hello","world") [✔]
  ("hello\r\nworld","hello","world") [✔]
  ("hello there  world","hello","there  world") [✔]
  ("","","") [✔]
  ("hello    \n\r\t","hello","") [✔]
breakLine
  ("hello world","hello world","") [✔]
  ("hello\r\n world","hello"," world") [✔]
  ("hello\n world","hello"," world") [✔]
  ("hello\r world","hello\r world","") [✔]
  ("hello\r\nworld","hello","world") [✔]
  ("hello\r\nthere\nworld","hello","there\nworld") [✔]
  ("hello\n\r\nworld","hello","\r\nworld") [✔]
  ("","","") [✔]
omapM_
  works on strict bytestrings [✔]
    +++ OK, passed 100 tests.
  works on lazy bytestrings [✔]
    +++ OK, passed 100 tests.
  works on strict texts [✔]
    +++ OK, passed 100 tests.
  works on lazy texts [✔]
    +++ OK, passed 100 tests.
inits
  String
    empty [✔]
    one element [✔]
    two elements [✔]
  StrictBytestring
    empty [✔]
    one element [✔]
    two elements [✔]
  LazyBytestring
    empty [✔]
    one element [✔]
    two elements [✔]
  StrictText
    empty [✔]
    one element [✔]
    two elements [✔]
  LazyText
    empty [✔]
    one element [✔]
    two elements [✔]
  Seq
    empty [✔]
    one element [✔]
    two elements [✔]
  Vector
    empty [✔]
    one element [✔]
    two elements [✔]
  Unboxed Vector
    empty [✔]
    one element [✔]
    two elements [✔]
  Storable Vector
    empty [✔]
    one element [✔]
    two elements [✔]
tails
  String
    empty [✔]
    one element [✔]
    two elements [✔]
  StrictBytestring
    empty [✔]
    one element [✔]
    two elements [✔]
  LazyBytestring
    empty [✔]
    one element [✔]
    two elements [✔]
  StrictText
    empty [✔]
    one element [✔]
    two elements [✔]
  LazyText
    empty [✔]
    one element [✔]
    two elements [✔]
  Seq
    empty [✔]
    one element [✔]
    two elements [✔]
  Vector
    empty [✔]
    one element [✔]
    two elements [✔]
  Unboxed Vector
    empty [✔]
    one element [✔]
    two elements [✔]
  Storable Vector
    empty [✔]
    one element [✔]
    two elements [✔]
initTails
  String
    empty [✔]
    one element [✔]
    two elements [✔]
  StrictBytestring
    empty [✔]
    one element [✔]
    two elements [✔]
  LazyBytestring
    empty [✔]
    one element [✔]
    two elements [✔]
  StrictText
    empty [✔]
    one element [✔]
    two elements [✔]
  LazyText
    empty [✔]
    one element [✔]
    two elements [✔]
  Seq
    empty [✔]
    one element [✔]
    two elements [✔]
  Vector
    empty [✔]
    one element [✔]
    two elements [✔]
  Unboxed Vector
    empty [✔]
    one element [✔]
    two elements [✔]
  Storable Vector
    empty [✔]
    one element [✔]
    two elements [✔]
NonNull
  fromNonEmpty
    toMinList [✔]
      +++ OK, passed 100 tests.
  toNonEmpty
    converts nonnull to nonempty [✔]
  mapNonNull
    mapNonNull id == id [✔]
      +++ OK, passed 100 tests.
    mapNonNull (f . g) == mapNonNull f . mapNonNull g [✔]
      +++ OK, passed 100 tests.
  Strict ByteString
    head [✔]
      +++ OK, passed 100 tests.
    tail [✔]
      +++ OK, passed 100 tests.
    last [✔]
      +++ OK, passed 100 tests.
    init [✔]
      +++ OK, passed 100 tests.
    maximum [✔]
      +++ OK, passed 100 tests.
    maximumBy [✔]
      +++ OK, passed 100 tests.
    minimum [✔]
      +++ OK, passed 100 tests.
    minimumBy [✔]
      +++ OK, passed 100 tests.
    ofoldMap1 [✔]
      +++ OK, passed 100 tests.
    ofoldr1 [✔]
      +++ OK, passed 100 tests.
    ofoldl1' [✔]
      +++ OK, passed 100 tests.
  Lazy ByteString
    head [✔]
      +++ OK, passed 100 tests.
    tail [✔]
      +++ OK, passed 100 tests.
    last [✔]
      +++ OK, passed 100 tests.
    init [✔]
      +++ OK, passed 100 tests.
    maximum [✔]
      +++ OK, passed 100 tests.
    maximumBy [✔]
      +++ OK, passed 100 tests.
    minimum [✔]
      +++ OK, passed 100 tests.
    minimumBy [✔]
      +++ OK, passed 100 tests.
    ofoldMap1 [✔]
      +++ OK, passed 100 tests.
    ofoldr1 [✔]
      +++ OK, passed 100 tests.
    ofoldl1' [✔]
      +++ OK, passed 100 tests.
  Strict Text
    head [✔]
      +++ OK, passed 100 tests.
    tail [✔]
      +++ OK, passed 100 tests.
    last [✔]
      +++ OK, passed 100 tests.
    init [✔]
      +++ OK, passed 100 tests.
    maximum [✔]
      +++ OK, passed 100 tests.
    maximumBy [✔]
      +++ OK, passed 100 tests.
    minimum [✔]
      +++ OK, passed 100 tests.
    minimumBy [✔]
      +++ OK, passed 100 tests.
    ofoldMap1 [✔]
      +++ OK, passed 100 tests.
    ofoldr1 [✔]
      +++ OK, passed 100 tests.
    ofoldl1' [✔]
      +++ OK, passed 100 tests.
  Lazy Text
    head [✔]
      +++ OK, passed 100 tests.
    tail [✔]
      +++ OK, passed 100 tests.
    last [✔]
      +++ OK, passed 100 tests.
    init [✔]
      +++ OK, passed 100 tests.
    maximum [✔]
      +++ OK, passed 100 tests.
    maximumBy [✔]
      +++ OK, passed 100 tests.
    minimum [✔]
      +++ OK, passed 100 tests.
    minimumBy [✔]
      +++ OK, passed 100 tests.
    ofoldMap1 [✔]
      +++ OK, passed 100 tests.
    ofoldr1 [✔]
      +++ OK, passed 100 tests.
    ofoldl1' [✔]
      +++ OK, passed 100 tests.
  Vector
    head [✔]
      +++ OK, passed 100 tests.
    tail [✔]
      +++ OK, passed 100 tests.
    last [✔]
      +++ OK, passed 100 tests.
    init [✔]
      +++ OK, passed 100 tests.
    maximum [✔]
      +++ OK, passed 100 tests.
    maximumBy [✔]
      +++ OK, passed 100 tests.
    minimum [✔]
      +++ OK, passed 100 tests.
    minimumBy [✔]
      +++ OK, passed 100 tests.
    ofoldMap1 [✔]
      +++ OK, passed 100 tests.
    ofoldr1 [✔]
      +++ OK, passed 100 tests.
    ofoldl1' [✔]
      +++ OK, passed 100 tests.
  Unboxed Vector
    head [✔]
      +++ OK, passed 100 tests.
    tail [✔]
      +++ OK, passed 100 tests.
    last [✔]
      +++ OK, passed 100 tests.
    init [✔]
      +++ OK, passed 100 tests.
    maximum [✔]
      +++ OK, passed 100 tests.
    maximumBy [✔]
      +++ OK, passed 100 tests.
    minimum [✔]
      +++ OK, passed 100 tests.
    minimumBy [✔]
      +++ OK, passed 100 tests.
    ofoldMap1 [✔]
      +++ OK, passed 100 tests.
    ofoldr1 [✔]
      +++ OK, passed 100 tests.
    ofoldl1' [✔]
      +++ OK, passed 100 tests.
  Storable Vector
    head [✔]
      +++ OK, passed 100 tests.
    tail [✔]
      +++ OK, passed 100 tests.
    last [✔]
      +++ OK, passed 100 tests.
    init [✔]
      +++ OK, passed 100 tests.
    maximum [✔]
      +++ OK, passed 100 tests.
    maximumBy [✔]
      +++ OK, passed 100 tests.
    minimum [✔]
      +++ OK, passed 100 tests.
    minimumBy [✔]
      +++ OK, passed 100 tests.
    ofoldMap1 [✔]
      +++ OK, passed 100 tests.
    ofoldr1 [✔]
      +++ OK, passed 100 tests.
    ofoldl1' [✔]
      +++ OK, passed 100 tests.
  List
    head [✔]
      +++ OK, passed 100 tests.
    tail [✔]
      +++ OK, passed 100 tests.
    last [✔]
      +++ OK, passed 100 tests.
    init [✔]
      +++ OK, passed 100 tests.
    maximum [✔]
      +++ OK, passed 100 tests.
    maximumBy [✔]
      +++ OK, passed 100 tests.
    minimum [✔]
      +++ OK, passed 100 tests.
    minimumBy [✔]
      +++ OK, passed 100 tests.
    ofoldMap1 [✔]
      +++ OK, passed 100 tests.
    ofoldr1 [✔]
      +++ OK, passed 100 tests.
    ofoldl1' [✔]
      +++ OK, passed 100 tests.
Containers
  Data.Map
    difference [✔]
      +++ OK, passed 100 tests.
    lookup [✔]
      +++ OK, passed 100 tests.
    insert [✔]
      +++ OK, passed 100 tests.
    delete [✔]
      +++ OK, passed 100 tests.
    singletonMap [✔]
      +++ OK, passed 100 tests.
    findWithDefault [✔]
      +++ OK, passed 100 tests.
    insertWith [✔]
      +++ OK, passed 100 tests.
    insertWithKey [✔]
      +++ OK, passed 100 tests.
    insertLookupWithKey [✔]
      +++ OK, passed 100 tests.
    adjustMap [✔]
      +++ OK, passed 100 tests.
    adjustWithKey [✔]
      +++ OK, passed 100 tests.
    updateMap [✔]
      +++ OK, passed 100 tests.
    updateWithKey [✔]
      +++ OK, passed 100 tests.
    updateLookupWithKey [✔]
      +++ OK, passed 100 tests.
    alter [✔]
      +++ OK, passed 100 tests.
    unionWith [✔]
      +++ OK, passed 100 tests.
    unionWithKey [✔]
      +++ OK, passed 100 tests.
    unionsWith [✔]
      +++ OK, passed 100 tests.
    mapWithKey [✔]
      +++ OK, passed 100 tests.
    omapKeysWith [✔]
      +++ OK, passed 100 tests.
  Data.IntMap
    difference [✔]
      +++ OK, passed 100 tests.
    lookup [✔]
      +++ OK, passed 100 tests.
    insert [✔]
      +++ OK, passed 100 tests.
    delete [✔]
      +++ OK, passed 100 tests.
    singletonMap [✔]
      +++ OK, passed 100 tests.
    findWithDefault [✔]
      +++ OK, passed 100 tests.
    insertWith [✔]
      +++ OK, passed 100 tests.
    insertWithKey [✔]
      +++ OK, passed 100 tests.
    insertLookupWithKey [✔]
      +++ OK, passed 100 tests.
    adjustMap [✔]
      +++ OK, passed 100 tests.
    adjustWithKey [✔]
      +++ OK, passed 100 tests.
    updateMap [✔]
      +++ OK, passed 100 tests.
    updateWithKey [✔]
      +++ OK, passed 100 tests.
    updateLookupWithKey [✔]
      +++ OK, passed 100 tests.
    alter [✔]
      +++ OK, passed 100 tests.
    unionWith [✔]
      +++ OK, passed 100 tests.
    unionWithKey [✔]
      +++ OK, passed 100 tests.
    unionsWith [✔]
      +++ OK, passed 100 tests.
    mapWithKey [✔]
      +++ OK, passed 100 tests.
    omapKeysWith [✔]
      +++ OK, passed 100 tests.
  Data.HashMap
    difference [✔]
      +++ OK, passed 100 tests.
    lookup [✔]
      +++ OK, passed 100 tests.
    insert [✔]
      +++ OK, passed 100 tests.
    delete [✔]
      +++ OK, passed 100 tests.
    singletonMap [✔]
      +++ OK, passed 100 tests.
    findWithDefault [✔]
      +++ OK, passed 100 tests.
    insertWith [✔]
      +++ OK, passed 100 tests.
    insertWithKey [✔]
      +++ OK, passed 100 tests.
    insertLookupWithKey [✔]
      +++ OK, passed 100 tests.
    adjustMap [✔]
      +++ OK, passed 100 tests.
    adjustWithKey [✔]
      +++ OK, passed 100 tests.
    updateMap [✔]
      +++ OK, passed 100 tests.
    updateWithKey [✔]
      +++ OK, passed 100 tests.
    updateLookupWithKey [✔]
      +++ OK, passed 100 tests.
    alter [✔]
      +++ OK, passed 100 tests.
    unionWith [✔]
      +++ OK, passed 100 tests.
    unionWithKey [✔]
      +++ OK, passed 100 tests.
    unionsWith [✔]
      +++ OK, passed 100 tests.
    mapWithKey [✔]
      +++ OK, passed 100 tests.
    omapKeysWith [✔]
      +++ OK, passed 100 tests.
Foldl Integration
  vector [✔]
    +++ OK, passed 100 tests.
  length [✔]
    +++ OK, passed 100 tests.
Replacing
  List
    replaceElem old new === omap (\x -> if x == old then new else x) [✔]
      +++ OK, passed 100 tests.
    replaceSeq old new === ointercalate new . splitSeq old [✔]
      +++ OK, passed 100 tests.
    replaceSeq old old === id [✔]
      +++ OK, passed 100 tests.
  Vector
    replaceElem old new === omap (\x -> if x == old then new else x) [✔]
      +++ OK, passed 100 tests.
    replaceSeq old new === ointercalate new . splitSeq old [✔]
      +++ OK, passed 100 tests.
    replaceSeq old old === id [✔]
      +++ OK, passed 100 tests.
  Storable Vector
    replaceElem old new === omap (\x -> if x == old then new else x) [✔]
      +++ OK, passed 100 tests.
    replaceSeq old new === ointercalate new . splitSeq old [✔]
      +++ OK, passed 100 tests.
    replaceSeq old old === id [✔]
      +++ OK, passed 100 tests.
  Unboxed Vector
    replaceElem old new === omap (\x -> if x == old then new else x) [✔]
      +++ OK, passed 100 tests.
    replaceSeq old new === ointercalate new . splitSeq old [✔]
      +++ OK, passed 100 tests.
    replaceSeq old old === id [✔]
      +++ OK, passed 100 tests.
  Strict ByteString
    replaceElem old new === omap (\x -> if x == old then new else x) [✔]
      +++ OK, passed 100 tests.
    replaceSeq old new === ointercalate new . splitSeq old [✔]
      +++ OK, passed 100 tests.
    replaceSeq old old === id [✔]
      +++ OK, passed 100 tests.
  Lazy ByteString
    replaceElem old new === omap (\x -> if x == old then new else x) [✔]
      +++ OK, passed 100 tests.
    replaceSeq old new === ointercalate new . splitSeq old [✔]
      +++ OK, passed 100 tests.
    replaceSeq old old === id [✔]
      +++ OK, passed 100 tests.
  Strict Text
    replaceElem old new === omap (\x -> if x == old then new else x) [✔]
      +++ OK, passed 100 tests.
    replaceSeq old new === ointercalate new . splitSeq old [✔]
      +++ OK, passed 100 tests.
    replaceSeq old old === id [✔]
      +++ OK, passed 100 tests.
  Lazy Text
    replaceElem old new === omap (\x -> if x == old then new else x) [✔]
      +++ OK, passed 100 tests.
    replaceSeq old new === ointercalate new . splitSeq old [✔]
      +++ OK, passed 100 tests.
    replaceSeq old old === id [✔]
      +++ OK, passed 100 tests.
Sorting
  List
    sortBy [✔]
      +++ OK, passed 100 tests.
    sort [✔]
      +++ OK, passed 100 tests.
  Vector
    sortBy [✔]
      +++ OK, passed 100 tests.
    sort [✔]
      +++ OK, passed 100 tests.
  Storable Vector
    sortBy [✔]
      +++ OK, passed 100 tests.
    sort [✔]
      +++ OK, passed 100 tests.
  Unboxed Vector
    sortBy [✔]
      +++ OK, passed 100 tests.
    sort [✔]
      +++ OK, passed 100 tests.
  Strict ByteString
    sortBy [✔]
      +++ OK, passed 100 tests.
    sort [✔]
      +++ OK, passed 100 tests.
  Lazy ByteString
    sortBy [✔]
      +++ OK, passed 100 tests.
    sort [✔]
      +++ OK, passed 100 tests.
  Strict Text
    sortBy [✔]
      +++ OK, passed 100 tests.
    sort [✔]
      +++ OK, passed 100 tests.
  Lazy Text
    sortBy [✔]
      +++ OK, passed 100 tests.
    sort [✔]
      +++ OK, passed 100 tests.
Intercalate
  List
    intercalate === defaultIntercalate [✔]
      +++ OK, passed 100 tests.
  Vector
    intercalate === defaultIntercalate [✔]
      +++ OK, passed 100 tests.
  Storable Vector
    intercalate === defaultIntercalate [✔]
      +++ OK, passed 100 tests.
  Unboxed Vector
    intercalate === defaultIntercalate [✔]
      +++ OK, passed 100 tests.
  Strict ByteString
    intercalate === defaultIntercalate [✔]
      +++ OK, passed 100 tests.
  Lazy ByteString
    intercalate === defaultIntercalate [✔]
      +++ OK, passed 100 tests.
  Strict Text
    intercalate === defaultIntercalate [✔]
      +++ OK, passed 100 tests.
  Lazy Text
    intercalate === defaultIntercalate [✔]
      +++ OK, passed 100 tests.
Splitting
  List
    intercalate sep . splitSeq sep === id [✔]
      +++ OK, passed 100 tests.
    splitSeq mempty xs === mempty : map singleton (otoList xs) [✔]
      +++ OK, passed 100 tests.
    splitSeq _ mempty == [mempty] [✔]
      +++ OK, passed 100 tests.
    intercalate (singleton sep) . splitElem sep === id [✔]
      +++ OK, passed 100 tests.
    length . splitElem sep === succ . length . filter (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep (replicate n sep) == replicate (n+1) mempty [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitWhen (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitSeq (singleton sep) [✔]
      +++ OK, passed 100 tests.
  Vector
    intercalate sep . splitSeq sep === id [✔]
      +++ OK, passed 100 tests.
    splitSeq mempty xs === mempty : map singleton (otoList xs) [✔]
      +++ OK, passed 100 tests.
    splitSeq _ mempty == [mempty] [✔]
      +++ OK, passed 100 tests.
    intercalate (singleton sep) . splitElem sep === id [✔]
      +++ OK, passed 100 tests.
    length . splitElem sep === succ . length . filter (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep (replicate n sep) == replicate (n+1) mempty [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitWhen (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitSeq (singleton sep) [✔]
      +++ OK, passed 100 tests.
  Storable Vector
    intercalate sep . splitSeq sep === id [✔]
      +++ OK, passed 100 tests.
    splitSeq mempty xs === mempty : map singleton (otoList xs) [✔]
      +++ OK, passed 100 tests.
    splitSeq _ mempty == [mempty] [✔]
      +++ OK, passed 100 tests.
    intercalate (singleton sep) . splitElem sep === id [✔]
      +++ OK, passed 100 tests.
    length . splitElem sep === succ . length . filter (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep (replicate n sep) == replicate (n+1) mempty [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitWhen (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitSeq (singleton sep) [✔]
      +++ OK, passed 100 tests.
  Unboxed Vector
    intercalate sep . splitSeq sep === id [✔]
      +++ OK, passed 100 tests.
    splitSeq mempty xs === mempty : map singleton (otoList xs) [✔]
      +++ OK, passed 100 tests.
    splitSeq _ mempty == [mempty] [✔]
      +++ OK, passed 100 tests.
    intercalate (singleton sep) . splitElem sep === id [✔]
      +++ OK, passed 100 tests.
    length . splitElem sep === succ . length . filter (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep (replicate n sep) == replicate (n+1) mempty [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitWhen (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitSeq (singleton sep) [✔]
      +++ OK, passed 100 tests.
  Strict ByteString
    intercalate sep . splitSeq sep === id [✔]
      +++ OK, passed 100 tests.
    splitSeq mempty xs === mempty : map singleton (otoList xs) [✔]
      +++ OK, passed 100 tests.
    splitSeq _ mempty == [mempty] [✔]
      +++ OK, passed 100 tests.
    intercalate (singleton sep) . splitElem sep === id [✔]
      +++ OK, passed 100 tests.
    length . splitElem sep === succ . length . filter (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep (replicate n sep) == replicate (n+1) mempty [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitWhen (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitSeq (singleton sep) [✔]
      +++ OK, passed 100 tests.
  Lazy ByteString
    intercalate sep . splitSeq sep === id [✔]
      +++ OK, passed 100 tests.
    splitSeq mempty xs === mempty : map singleton (otoList xs) [✔]
      +++ OK, passed 100 tests.
    splitSeq _ mempty == [mempty] [✔]
      +++ OK, passed 100 tests.
    intercalate (singleton sep) . splitElem sep === id [✔]
      +++ OK, passed 100 tests.
    length . splitElem sep === succ . length . filter (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep (replicate n sep) == replicate (n+1) mempty [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitWhen (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitSeq (singleton sep) [✔]
      +++ OK, passed 100 tests.
  Strict Text
    intercalate sep . splitSeq sep === id [✔]
      +++ OK, passed 100 tests.
    splitSeq mempty xs === mempty : map singleton (otoList xs) [✔]
      +++ OK, passed 100 tests.
    splitSeq _ mempty == [mempty] [✔]
      +++ OK, passed 100 tests.
    intercalate (singleton sep) . splitElem sep === id [✔]
      +++ OK, passed 100 tests.
    length . splitElem sep === succ . length . filter (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep (replicate n sep) == replicate (n+1) mempty [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitWhen (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitSeq (singleton sep) [✔]
      +++ OK, passed 100 tests.
  Lazy Text
    intercalate sep . splitSeq sep === id [✔]
      +++ OK, passed 100 tests.
    splitSeq mempty xs === mempty : map singleton (otoList xs) [✔]
      +++ OK, passed 100 tests.
    splitSeq _ mempty == [mempty] [✔]
      +++ OK, passed 100 tests.
    intercalate (singleton sep) . splitElem sep === id [✔]
      +++ OK, passed 100 tests.
    length . splitElem sep === succ . length . filter (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep (replicate n sep) == replicate (n+1) mempty [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitWhen (== sep) [✔]
      +++ OK, passed 100 tests.
    splitElem sep === splitSeq (singleton sep) [✔]
      +++ OK, passed 100 tests.
Other Issues
  #26 headEx on a list works [✔]
  #31 find doesn't infinitely loop on NonEmpty [✔]
  #83 head on Seq works correctly [✔]

Finished in 0.4452 seconds
397 examples, 0 failures
Test suite test: PASS
Test suite logged to:
/tmp/workdir-mono-traversable/mono-traversable-1.0.20.0/dist-newstyle/build/x86_64-linux/ghc-9.6.6/mono-traversable-1.0.20.0/t/test/test/mono-traversable-1.0.20.0-test.log
1 of 1 test suites (1 of 1 test cases) passed.
