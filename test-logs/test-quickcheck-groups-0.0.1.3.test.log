Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - quickcheck-groups-0.0.1.3 (test:test) (ephemeral targets)
Preprocessing test suite 'test' for quickcheck-groups-0.0.1.3...
Building test suite 'test' for quickcheck-groups-0.0.1.3...
Running 1 test suites...
Test suite test: RUNNING...

Class
  Testing Abelian laws for type ()
    abelianLaw_commutative [✔]
      +++ OK, passed 100 tests.
      
      Only 0% (a /= b) && (a <> b /= a) && (b <> a /= b), but expected 0%
      Only 0% allNonNull [a, b], but expected 0%
      Only 0% allUnique [a, b], but expected 0%
      Only 0% allUniqueNonNull [a, b], but expected 0%
  Testing Group laws for type ()
    groupLaw_invert_mempty [✔]
      +++ OK, passed 1 test.
    groupLaw_invert_invert [✔]
      +++ OK, passed 100 tests.
    groupLaw_invert_mappend_1 [✔]
      +++ OK, passed 100 tests.
    groupLaw_invert_mappend_2 [✔]
      +++ OK, passed 100 tests.
    groupLaw_subtract_mempty [✔]
      +++ OK, passed 100 tests.
    groupLaw_subtract_self [✔]
      +++ OK, passed 100 tests.
    groupLaw_subtract_other [✔]
      +++ OK, passed 100 tests.
      
      Only 0% allNonNull [a, b], but expected 0%
      Only 0% allUnique [a, b], but expected 0%
      Only 0% allUniqueNonNull [a, b], but expected 0%
    groupLaw_pow_zero [✔]
      +++ OK, passed 100 tests.
    groupLaw_pow_nonNegative [✔]
      +++ OK, passed 100 tests:
      84% n >= 4
       6% n == 3
       5% n == 2
       3% n == 1
       2% n == 0
    groupLaw_pow_nonPositive [✔]
      +++ OK, passed 100 tests:
      87% n <= -4
       5% n == -1
       3% n == -0
       3% n == -3
       2% n == -2
  Testing Abelian laws for type Sum TestInteger
    abelianLaw_commutative [✔]
      +++ OK, passed 100 tests:
      91% allUnique [a, b]
      80% allNonNull [a, b]
      71% (a /= b) && (a <> b /= a) && (b <> a /= b)
      71% allUniqueNonNull [a, b]
  Testing Group laws for type Sum TestInteger
    groupLaw_invert_mempty [✔]
      +++ OK, passed 1 test.
    groupLaw_invert_invert [✔]
      +++ OK, passed 100 tests.
    groupLaw_invert_mappend_1 [✔]
      +++ OK, passed 100 tests.
    groupLaw_invert_mappend_2 [✔]
      +++ OK, passed 100 tests.
    groupLaw_subtract_mempty [✔]
      +++ OK, passed 100 tests.
    groupLaw_subtract_self [✔]
      +++ OK, passed 100 tests.
    groupLaw_subtract_other [✔]
      +++ OK, passed 100 tests:
      91% allUnique [a, b]
      80% allNonNull [a, b]
      71% allUniqueNonNull [a, b]
    groupLaw_pow_zero [✔]
      +++ OK, passed 100 tests.
    groupLaw_pow_nonNegative [✔]
      +++ OK, passed 100 tests:
      84% n >= 4
       6% n == 3
       5% n == 2
       3% n == 1
       2% n == 0
    groupLaw_pow_nonPositive [✔]
      +++ OK, passed 100 tests:
      87% n <= -4
       5% n == -1
       3% n == -0
       3% n == -3
       2% n == -2
  Testing Abelian laws for type Product TestRational
    abelianLaw_commutative [✔]
      +++ OK, passed 100 tests:
      90% allUnique [a, b]
      87% allNonNull [a, b]
      78% (a /= b) && (a <> b /= a) && (b <> a /= b)
      78% allUniqueNonNull [a, b]
  Testing Group laws for type Product TestRational
    groupLaw_invert_mempty [✔]
      +++ OK, passed 1 test.
    groupLaw_invert_invert [✔]
      +++ OK, passed 100 tests.
    groupLaw_invert_mappend_1 [✔]
      +++ OK, passed 100 tests.
    groupLaw_invert_mappend_2 [✔]
      +++ OK, passed 100 tests.
    groupLaw_subtract_mempty [✔]
      +++ OK, passed 100 tests.
    groupLaw_subtract_self [✔]
      +++ OK, passed 100 tests.
    groupLaw_subtract_other [✔]
      +++ OK, passed 100 tests:
      90% allUnique [a, b]
      87% allNonNull [a, b]
      78% allUniqueNonNull [a, b]
    groupLaw_pow_zero [✔]
      +++ OK, passed 100 tests.
    groupLaw_pow_nonNegative [✔]
      +++ OK, passed 100 tests:
      84% n >= 4
       6% n == 3
       5% n == 2
       3% n == 1
       2% n == 0
    groupLaw_pow_nonPositive [✔]
      +++ OK, passed 100 tests:
      87% n <= -4
       5% n == -1
       3% n == -0
       3% n == -3
       2% n == -2
  Testing Abelian laws for type Sum TestRational
    abelianLaw_commutative [✔]
      +++ OK, passed 100 tests:
      96% allNonNull [a, b]
      96% allUnique [a, b]
      92% (a /= b) && (a <> b /= a) && (b <> a /= b)
      92% allUniqueNonNull [a, b]
  Testing Group laws for type Sum TestRational
    groupLaw_invert_mempty [✔]
      +++ OK, passed 1 test.
    groupLaw_invert_invert [✔]
      +++ OK, passed 100 tests.
    groupLaw_invert_mappend_1 [✔]
      +++ OK, passed 100 tests.
    groupLaw_invert_mappend_2 [✔]
      +++ OK, passed 100 tests.
    groupLaw_subtract_mempty [✔]
      +++ OK, passed 100 tests.
    groupLaw_subtract_self [✔]
      +++ OK, passed 100 tests.
    groupLaw_subtract_other [✔]
      +++ OK, passed 100 tests:
      96% allNonNull [a, b]
      96% allUnique [a, b]
      92% allUniqueNonNull [a, b]
    groupLaw_pow_zero [✔]
      +++ OK, passed 100 tests.
    groupLaw_pow_nonNegative [✔]
      +++ OK, passed 100 tests:
      84% n >= 4
       6% n == 3
       5% n == 2
       3% n == 1
       2% n == 0
    groupLaw_pow_nonPositive [✔]
      +++ OK, passed 100 tests:
      87% n <= -4
       5% n == -1
       3% n == -0
       3% n == -3
       2% n == -2

Finished in 0.0211 seconds
44 examples, 0 failures
Test suite test: PASS
Test suite logged to:
/tmp/workdir-quickcheck-groups/quickcheck-groups-0.0.1.3/dist-newstyle/build/x86_64-linux/ghc-9.6.6/quickcheck-groups-0.0.1.3/t/test/test/quickcheck-groups-0.0.1.3-test.log
1 of 1 test suites (1 of 1 test cases) passed.
