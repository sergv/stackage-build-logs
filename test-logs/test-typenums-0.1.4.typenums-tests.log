Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - typenums-0.1.4 (test:typenums-tests) (ephemeral targets)
Preprocessing test suite 'typenums-tests' for typenums-0.1.4...
Building test suite 'typenums-tests' for typenums-0.1.4...
Running 1 test suites...
Test suite typenums-tests: RUNNING...

Data.TypeNums.Arithmetic
  addition
    correctly adds two natural numbers [✔]
    correctly adds a negative integer and a natural [✔]
    correctly adds a natural and a negative integer [✔]
    correctly adds two negative integers [✔]
    correctly adds two positive integers [✔]
    correctly adds a negative integer and a positive integer [✔]
    correctly adds a positive integer and a negative integer [✔]
    correctly adds two rationals [✔]
    correctly adds a rational with a natural [✔]
    correctly adds a natural with a rational [✔]
    correctly adds a rational with a negative integer [✔]
    correctly adds a negative integer with a rational [✔]
    correctly adds a rational with a positive integer [✔]
    correctly adds a positive integer with a rational [✔]
    correctly simplifies the result of adding two rationals [✔]
  subtraction
    correctly subtracts two natural numbers [✔]
    correctly subtracts a negative integer and a natural [✔]
    correctly subtracts a natural and a negative integer [✔]
    correctly subtracts two negative integers [✔]
    correctly subtracts two positive integers [✔]
    correctly subtracts a negative integer and a positive integer [✔]
    correctly subtracts a positive integer and a negative integer [✔]
    correctly subtracts two rationals with a negative result [✔]
    correctly subtracts two rationals with a positive result [✔]
    correctly subtracts a rational with a natural [✔]
    correctly subtracts a natural with a rational [✔]
    correctly subtracts a rational with a negative integer [✔]
    correctly subtracts a negative integer with a rational [✔]
    correctly subtracts a rational with a positive integer [✔]
    correctly subtracts a positive integer with a rational [✔]
    correctly simplifies the result of subtracting two rationals [✔]
  multiplication
    correctly multiplies two natural numbers [✔]
    correctly multiplies a negative integer and a natural [✔]
    correctly multiplies a natural and a negative integer [✔]
    correctly multiplies two negative integers [✔]
    correctly multiplies two positive integers [✔]
    correctly multiplies a negative integer and a positive integer [✔]
    correctly multiplies a positive integer and a negative integer [✔]
    correctly multiplies two rationals [✔]
    correctly multiplies a rational with a natural [✔]
    correctly multiplies a natural with a rational [✔]
    correctly multiplies a rational with a negative integer [✔]
    correctly multiplies a negative integer with a rational [✔]
    correctly multiplies a rational with a positive integer [✔]
    correctly multiplies a positive integer with a rational [✔]
    correctly simplifies the result of multiplying two rationals [✔]
  abs
    Acts as a no-op on a natural [✔]
    Acts as a no-op on a positive int [✔]
    Negates a negative int [✔]
    Normalises a positive rational with natural numerator [✔]
    Normalises a positive rational with signed positive numerator [✔]
    Negates a negative rational [✔]
  negate
    Turns a natural into Neg [✔]
    Turns Pos into Neg [✔]
    Turns Neg into Pos [✔]
    Negates a rational with natural numerator [✔]
    Negates a rational with positive numerator [✔]
    Negates a rational with negative numerator [✔]
  recip
    Inverts Nat / Nat [✔]
    Inverts Pos / Nat [✔]
    Inverts Neg / Nat [✔]
    Inverts Nat [✔]
    Inverts a positive TInt [✔]
    Inverts a negative TInt [✔]
  ratdiv
    Divides two naturals [✔]
    Divides a positive integer by a natural [✔]
    Divides a negative integer by a natural [✔]
    Divides a natural by a positive integer [✔]
    Divides a natural by a negative integer [✔]
    Divides a positive integer by a negative integer [✔]
    Divides a negative integer by a positive integer [✔]
    Divides a negative integer by a negative integer [✔]
    Divides a natural by a rational [✔]
    Divides a positive integer by a rational [✔]
    Divides a negative integer by a rational [✔]
    Divides a negative integer by a negative rational [✔]
    Divides a rational by a natural [✔]
    Divides a rational by a positive integer [✔]
    Divides a rational by a negative integer [✔]
    Divides a negative rational by a negative integer [✔]
    Divides a rational by a rational [✔]
    Simplifies the result of division [✔]
  divMod
    calculates divMod for two naturals [✔]
    calculates divMod for a positive integer and a natural [✔]
    calculates divMod for a negative integer and a natural [✔]
    calculates divMod for a negative integer and 1 [✔]
  div
    calculates div for two naturals [✔]
    calculates div for a positive integer and a natural [✔]
    calculates div for a negative integer and a natural [✔]
    divides a negative number by 1 [✔]
  mod
    calculates mod for two naturals [✔]
    calculates mod for a positive integer and a natural [✔]
    calculates mod for a negative integer and a natural [✔]
    calculates mod for a negative integer and 1 [✔]
  quotRem
    calculates quotRem for two naturals [✔]
    calculates quotRem for a positive integer and a natural [✔]
    calculates quotRem for a negative integer and a natural [✔]
    calculates quotRem for a negative integer and 1 [✔]
  quot
    calculates quot for two naturals [✔]
    calculates quot for a positive integer and a natural [✔]
    calculates quot for a negative integer and a natural [✔]
    calculates quotRem for a negative integer and 1 [✔]
  rem
    calculates rem for two naturals [✔]
    calculates rem for a positive integer and a natural [✔]
    calculates rem for a negative integer and a natural [✔]
    calculates rem for a negative integer and 1 [✔]
  gcd
    calculates gcd for two naturals [✔]
    calculates gcd for a positive int and a natural [✔]
    calculates gcd for a natural and a positive int [✔]
    calculates gcd for a negative int and a natural [✔]
    calculates gcd for a natural and a negative int [✔]
    calculates gcd for two positive integers [✔]
    calculates gcd for a positive and a negative int [✔]
    calculates gcd for a negative and a positive int [✔]
    calculates gcd for two negative integers [✔]
  simplify
    acts as a no-op for an already-simplified fraction [✔]
    reduces an unreduced fraction [✔]
    no-ops for an already-simplified positive TInt fraction [✔]
    no-opts for an already-simplified negative TInt fraction [✔]
    reduces a positive TInt unreduced fraction [✔]
    reduces a (neg, int) unreduced fraction [✔]
  exp
    calculates x^0 for natural x [✔]
    calculates x^(+0) for natural x [✔]
    calculates x^(-0) for natural x [✔]
    calculates x^0 for integer x [✔]
    calculates x^(+0) for integer x [✔]
    calculates x^(Neg 0) for integer x [✔]
    calculates x^0 for rational x [✔]
    calculates x^(+0) for rational x [✔]
    calculates x^(Neg 0) for rational x [✔]
    calculates x^y for natural x,y [✔]
    calculates (+x)^y for natural y [✔]
  truncate
    acts as a no-op on a natural [✔]
    acts as a no-op on a positive int [✔]
    acts as a no-op on a negative int [✔]
    acts as a no-op on (x :% 1) for natural x [✔]
    acts as a no-op on (x :% 1) for positive x [✔]
    acts as a no-op on (x :% 1) for negative x [✔]
    rounds a positive rational towards 0 [✔]
    rounds a negative rational towards 0 [✔]
  floor
    acts as a no-op on a natural [✔]
    acts as a no-op on a positive int [✔]
    acts as a no-op on a negative int [✔]
    acts as a no-op on (x :% 1) for natural x [✔]
    acts as a no-op on (x :% 1) for positive x [✔]
    acts as a no-op on (x :% 1) for negative x [✔]
    rounds a positive rational towards -inf [✔]
    rounds a negative rational towards -inf [✔]
  ceiling
    acts as a no-op on a natural [✔]
    acts as a no-op on a positive int [✔]
    acts as a no-op on a negative int [✔]
    acts as a no-op on (x :% 1) for natural x [✔]
    acts as a no-op on (x :% 1) for positive x [✔]
    acts as a no-op on (x :% 1) for negative x [✔]
    rounds a positive rational towards +inf [✔]
    rounds a negative rational towards +inf [✔]
  intlog
    calculates log_2(8) [✔]
    calculates log_2(3) [✔]
    calculates log_3(8) [✔]
    calculates log_3(9) [✔]
    calcuclates log_3(2) [✔]
    calculates log_2(1/2) [✔]
    calculates log_2(2/3) [✔]
    calculates log_2(1/3) [✔]
    calculates log_3(1/27) [✔]
    calculates log_3(1/2) [✔]
    calculates log_3(3/5) [✔]
    calculates log_6(3/5) [✔]
Data.TypeNums.Comparison
  <=?
    is 'True for Nats 2 <= 3 [✔]
    is 'True for Nats 2 <= 2 [✔]
    is 'False for Nats 3 <= 2 [✔]
    is 'True for Neg <= Pos [✔]
    is 'True for Pos 0 <= Neg 0 [✔]
    is 'False for Pos <= Neg [✔]
    is 'True for Nat 2 <= Pos 3 [✔]
    is 'True for Nat 2 <= Pos 2 [✔]
    is 'False for Nat 3 <= Pos 2 [✔]
    is 'True for Pos 2 <= Nat 3 [✔]
    is 'True for Pos 2 <= Nat 2 [✔]
    is 'False for Pos 3 <= Nat 2 [✔]
    is 'True for Pos 2 <= Pos 3 [✔]
    is 'True for Pos 2 <= Pos 2 [✔]
    is 'False for Pos 3 <= Pos 2 [✔]
    is 'True for Nat 0 <= Neg 0 [✔]
    is 'False for Nat <= Neg [✔]
    is 'True for Neg <= Nat [✔]
    is 'True for 2/3 <= 3/2 [✔]
    is 'False for 3/2 <= 2/3 [✔]
    is 'True for Neg 3/2 <= 2/3 [✔]
Data.TypeNums.Equality
  (==?)
    Returns true for Int ==? Int [✔]
    Returns false for String ==? Int [✔]
    Returns true for String ==? [Char] [✔]
    Returns true for 3 ==? Pos 3 [✔]
    Returns false for 3 ==? Neg 3 [✔]
    Returns true for 3 ==? 6%2 [✔]
    Returns true for +3 ==? 3%1 [✔]
    Returns false for 3 ==? 3%2 [✔]
Data.TypeNums.Ints
  intVal
    correctly gets the value of a natural number [✔]
    correctly gets the value of zero [✔]
    correctly gets the value of Neg 0 [✔]
    correctly gets the value of a negative integer [✔]
    correctly gets the value of a positive integer [✔]
  intVal'
    correctly gets the value of a natural number [✔]
    correctly gets the value of zero [✔]
    correctly gets the value of Neg 0 [✔]
    correctly gets the value of a negative integer [✔]
    correctly gets the value of a positive integer [✔]
  someIntVal
    fetches the correct value using intVal [✔]
      +++ OK, passed 100 tests.
Data.TypeNums.Rats
  ratVal
    correctly gets the value of a natural number [✔]
    correctly gets the value of zero [✔]
    correctly gets the value of Neg 0 [✔]
    correctly gets the value of a negative integer [✔]
    correctly gets the value of a rational with natural numerator [✔]
    correctly gets the value of a negative rational [✔]
    correctly gets the value of a positive rational [✔]
  ratVal'
    correctly gets the value of a natural number [✔]
    correctly gets the value of zero [✔]
    correctly gets the value of Neg 0 [✔]
    correctly gets the value of a negative integer [✔]
    correctly gets the value of a rational with natural numerator [✔]
    correctly gets the value of a negative rational [✔]
    correctly gets the value of a positive rational [✔]
  someRatVal
    fetches the correct value using ratVal [✔]
      +++ OK, passed 100 tests.

Finished in 0.0033 seconds
223 examples, 0 failures
Test suite typenums-tests: PASS
Test suite logged to:
/tmp/workdir-typenums/typenums-0.1.4/dist-newstyle/build/x86_64-linux/ghc-9.6.6/typenums-0.1.4/t/typenums-tests/test/typenums-0.1.4-typenums-tests.log
1 of 1 test suites (1 of 1 test cases) passed.
