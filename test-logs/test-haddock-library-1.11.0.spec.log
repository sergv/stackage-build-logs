Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - haddock-library-1.11.0 (test:spec) (ephemeral targets)
Preprocessing test suite 'spec' for haddock-library-1.11.0...
Building test suite 'spec' for haddock-library-1.11.0...
Running 1 test suites...
Test suite spec: RUNNING...

Documentation.Haddock.Parser
  parseString
    is total [✔]
      +++ OK, passed 100 tests.
    when parsing text
      can handle unicode [✔]
      accepts numeric character references [✔]
      accepts hexadecimal character references [✔]
      allows to backslash-escape characters except \r [✔]
        +++ OK, passed 100 tests.
      when parsing strings contaning numeric character references
        will implicitly convert digits to characters [✔]
        will implicitly convert hex encoded characters [✔]
    when parsing identifiers
      parses identifiers enclosed within single ticks [✔]
      parses identifiers enclosed within backticks [✔]
      parses identifiers preceded by a backtick and followed by a single quote [✔]
      parses identifiers preceded by a single quote and followed by a backtick [✔]
      can parse a constructor identifier [✔]
      can parse a qualified identifier [✔]
      parses a word with an one of the delimiters in it as DocString [✔]
      doesn't pass pairs of delimiters with spaces between them [✔]
      don't use apostrophe's in the wrong place's [✔]
      doesn't parse empty identifiers [✔]
      can parse an identifier in infix notation enclosed within backticks [✔]
      can parse identifiers containing a single quote [✔]
      can parse identifiers ending with a single quote [✔]
      can parse identifiers in backticks ending with a single quote [✔]
      can parse an identifier containing a digit [✔]
      can parse an identifier containing unicode characters [✔]
      can parse a single quote followed by an identifier [✔]
      can parse an identifier that starts with an underscore [✔]
      can parse value-namespaced identifiers [✔]
      can parse type-namespaced identifiers [✔]
      can parse parenthesized operators and backticked identifiers [✔]
      can properly figure out the end of identifiers [✔]
    when parsing operators
      can parse an operator enclosed within single quotes [✔]
      can parse a qualified operator [✔]
      can parse a constructor operator [✔]
      can parse a qualified constructor operator [✔]
      can parse a unicode operator [✔]
    when parsing URLs
      parses a URL [✔]
      accepts an optional label [✔]
      does not accept newlines in label [✔]
      allows us to escape > inside the URL [✔]
      parses inline URLs [✔]
      doesn't allow for multi-line link tags [✔]
      when parsing markdown links
        parses a simple link [✔]
        allows whitespace between label and URL [✔]
        allows newlines in label [✔]
        allows escaping in label [✔]
        strips leading and trailing whitespace from label [✔]
        rejects whitespace in URL [✔]
        allows inline markup in the label [✔]
        when URL is on a separate line
          allows URL to be on a separate line [✔]
          allows leading whitespace [✔]
          rejects additional newlines [✔]
      when autolinking URLs
        autolinks HTTP URLs [✔]
        autolinks HTTPS URLs [✔]
        autolinks FTP URLs [✔]
        does not include a trailing comma [✔]
        does not include a trailing dot [✔]
        does not include a trailing exclamation mark [✔]
        does not include a trailing question mark [✔]
        autolinks URLs occuring mid-sentence with multiple ‘/’s [✔]
    when parsing images
      accepts markdown syntax for images [✔]
      accepts Unicode [✔]
      supports deprecated picture syntax [✔]
      supports title for deprecated picture syntax [✔]
    when parsing display math
      accepts markdown syntax for display math containing newlines [✔]
    when parsing anchors
      parses a single word anchor [✔]
      doesn't parse a multi word anchor [✔]
      parses a unicode anchor [✔]
      does not accept newlines in anchors [✔]
      accepts anchors mid-paragraph [✔]
      does not accept empty anchors [✔]
      does not accept anchors containing spaces [✔]
    when parsing emphasised text
      emphasises a word on its own [✔]
      emphasises inline correctly [✔]
      emphasises unicode [✔]
      does not emphasise multi-line strings [✔]
      does not emphasise the empty string [✔]
      parses escaped slashes literally [✔]
      recognizes other markup constructs within emphasised text [✔]
      allows other markup inside of emphasis [✔]
      doesn't mangle inner markup unicode [✔]
      properly converts HTML escape sequences [✔]
      allows to escape the emphasis delimiter inside of emphasis [✔]
    when parsing monospaced text
      parses simple monospaced text [✔]
      parses inline monospaced text [✔]
      allows to escape @ [✔]
      accepts unicode [✔]
      accepts other markup in monospaced text [✔]
      requires the closing @ [✔]
    when parsing bold strings
      allows for a bold string on its own [✔]
      bolds inline correctly [✔]
      bolds unicode [✔]
      does not do __multi-line\n bold__ [✔]
      allows other markup inside of bold [✔]
      doesn't mangle inner markup unicode [✔]
      properly converts HTML escape sequences [✔]
      allows to escape the bold delimiter inside of bold [✔]
      doesn't allow for empty bold [✔]
    when parsing module strings
      should parse a module on its own [✔]
      should parse a module inline [✔]
      can accept a simple module name [✔]
      can accept a module name with dots [✔]
      can accept a module name with unicode [✔]
      parses a module name with a trailing dot as regular quoted string [✔]
      parses a module name with a space as regular quoted string [✔]
      parses a module name with invalid characters as regular quoted string [✔]
      accepts a module name with unicode [✔]
      treats empty module name as regular double quotes [✔]
      accepts anchor reference syntax as DocModule [✔]
      accepts anchor with hyphen as DocModule [✔]
      accepts old anchor reference syntax as DocModule [✔]
    when parsing labeled module links
      parses a simple labeled module link [✔]
      allows escaping in label [✔]
      strips leading and trailing whitespace from label [✔]
      allows whitespace in module name link [✔]
      allows inline markup in the label [✔]
      should parse a labeled module on its own [✔]
      should parse a labeled module inline [✔]
      can accept a labeled module name with dots [✔]
      can accept a labeled module name with unicode [✔]
      parses a labeled module name with a trailing dot as a hyperlink [✔]
      parses a labeled module name with a space as a regular string [✔]
      parses a module name with invalid characters as a hyperlink [✔]
      accepts a labeled module name with unicode [✔]
      treats empty labeled module name as empty hyperlink [✔]
      accepts anchor reference syntax for labeled module name [✔]
      accepts old anchor reference syntax for labeled module name [✔]
      interprets empty label as a unlabeled module name [✔]
  parseParas
    is total [✔]
      +++ OK, passed 100 tests.
    doesn't crash on unicode whitespace [✔]
    when parsing @since
      adds specified version to the result [✔]
      ignores trailing whitespace [✔]
      does not allow trailing input [✔]
      when given multiple times
        gives last occurrence precedence [✔]
    when parsing text paragraphs
      parses an empty paragraph [✔]
      parses a simple text paragraph [✔]
      accepts markup in text paragraphs [✔]
      preserve all regular characters [✔]
        +++ OK, passed 100 tests; 16 discarded.
      separates paragraphs by empty lines [✔]
      when a pragraph only contains monospaced text
        turns it into a code block [✔]
      when a paragraph contains a markdown link
        correctly parses the link [✔]
        when the paragraph starts with the markdown link
          correctly parses it as a text paragraph (not a definition list) [✔]
          can be followed by an other paragraph [✔]
          when paragraph contains additional text
            accepts more text after the link [✔]
            accepts a newline right after the markdown link [✔]
            can be followed by an other paragraph [✔]
        when the link starts on a new line not at the beginning of the paragraph
          correctly parses the link [✔]
    when parsing birdtracks
      parses them as a code block [✔]
      ignores leading whitespace [✔]
      strips one leading space from each line of the block [✔]
      ignores empty lines when stripping spaces [✔]
      when any non-empty line does not start with a space
        does not strip any spaces [✔]
      ignores nested markup [✔]
      treats them as regular text inside text paragraphs [✔]
    when parsing code blocks
      accepts a simple code block [✔]
      ignores trailing whitespace after the opening @ [✔]
      rejects code blocks that are not closed [✔]
      accepts nested markup [✔]
      allows to escape the @ [✔]
      accepts horizontal space before the @ [✔]
      strips a leading space from a @ block if present [✔]
      only drops whitespace if there's some before closing @ [✔]
      accepts unicode [✔]
      requires the closing @ [✔]
    when parsing examples
      parses a simple example [✔]
      parses an example with result [✔]
      parses consecutive examples [✔]
      requires an example to be separated from a previous paragraph by an empty line [✔]
      parses bird-tracks inside of paragraphs as plain strings [✔]
      skips empty lines in front of an example [✔]
      terminates example on empty line [✔]
      parses a <BLANKLINE> result as an empty result [✔]
      accepts unicode in examples [✔]
      when prompt is prefixed by whitespace
        strips the exact same amount of whitespace from result lines [✔]
        preserves additional whitespace [✔]
        keeps original if stripping is not possible [✔]
    when parsing paragraphs nested in lists
      can nest the same type of list [✔]
      can nest another type of list inside [✔]
      can nest a code block inside [✔]
      can nest more than one level [✔]
      won't fail on not fully indented paragraph [✔]
      can nest definition lists [✔]
      can come back to top level with a different list [✔]
      allows arbitrary initial indent of a list [✔]
      definition lists can come back to top level with a different list [✔]
      list order is preserved in presence of nesting + extra text [✔]
    when parsing properties
      can parse a single property [✔]
      can parse multiple subsequent properties [✔]
      accepts unicode in properties [✔]
      can deal with whitespace before and after the prop> prompt [✔]
    when parsing unordered lists
      parses a simple list [✔]
      ignores empty lines between list items [✔]
      accepts an empty list item [✔]
      accepts multi-line list items [✔]
      accepts markup in list items [✔]
      requires empty lines between list and other paragraphs [✔]
    when parsing ordered lists
      parses a simple list [✔]
      ignores empty lines between list items [✔]
      accepts an empty list item [✔]
      accepts multi-line list items [✔]
      accepts markup in list items [✔]
      requires empty lines between list and other paragraphs [✔]
    when parsing definition lists
      parses a simple list [✔]
      ignores empty lines between list items [✔]
      accepts an empty list item [✔]
      accepts multi-line list items [✔]
      accepts markup in list items [✔]
      accepts markup for the label [✔]
      requires empty lines between list and other paragraphs [✔]
      dose not require the colon (deprecated - this will be removed in a future release) [✔]
    when parsing consecutive paragraphs
      will not capture irrelevant consecutive lists [✔]
    when parsing function documentation headers
      can parse a simple header [✔]
      allow consecutive headers [✔]
      accepts markup in the header [✔]
Documentation.Haddock.Parser.Util
  takeUntil
    takes everything until a specified byte sequence [✔]
    requires the end sequence [✔]
    takes escaped bytes unconditionally [✔]

Finished in 0.0135 seconds
215 examples, 0 failures
Test suite spec: PASS
Test suite logged to:
/tmp/workdir-haddock-library/haddock-library-1.11.0/dist-newstyle/build/x86_64-linux/ghc-9.6.6/haddock-library-1.11.0/t/spec/test/haddock-library-1.11.0-spec.log
1 of 1 test suites (1 of 1 test cases) passed.
