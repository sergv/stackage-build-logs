Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - parser-combinators-tests-1.3.0 (test:test-suite) (ephemeral targets)
Preprocessing test suite 'test-suite' for parser-combinators-tests-1.3.0...
Building test suite 'test-suite' for parser-combinators-tests-1.3.0...
Running 1 test suites...
Test suite test-suite: RUNNING...

Control.Applicative.Combinators
  between
    works [✔]
      +++ OK, passed 100 tests.
  choice
    works [✔]
      +++ OK, passed 100 tests.
  count
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  count'
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  eitherP
    works [✔]
      +++ OK, passed 100 tests.
  endBy
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  endBy1
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  manyTill
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  manyTill_
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  someTill
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  someTill_
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  option
    works [✔]
      +++ OK, passed 100 tests.
  sepBy
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  sepBy1
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  sepEndBy
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  sepEndBy1
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  skipMany
    works [✔]
      +++ OK, passed 100 tests.
  skipSome
    works [✔]
      +++ OK, passed 100 tests.
  skipCount
    works [✔]
      +++ OK, passed 100 tests.
  skipManyTill
    works [✔]
      +++ OK, passed 100 tests; 1 discarded.
  skipSomeTill
    works [✔]
      +++ OK, passed 100 tests; 1 discarded.
Control.Applicative.Permutations
  runPermutation & Permutation
    Functor instance
      obeys identity law [✔]
        +++ OK, passed 100 tests.
      obeys composition law [✔]
        +++ OK, passed 100 tests.
    Applicative instance
      obeys identity law [✔]
        +++ OK, passed 100 tests.
      obeys composition law [✔]
        +++ OK, passed 100 tests.
      obeys homomorphism law [✔]
        +++ OK, passed 100 tests.
      obeys interchange law [✔]
        +++ OK, passed 100 tests.
  toPermutation
    works [✔]
      +++ OK, passed 100 tests.
  intercalateEffect
    works [✔]
      +++ OK, passed 100 tests.
  toPermutationWithDefault
    parses "abc" as "abc" leaving "" [✔]
    parses "acb" as "abc" leaving "" [✔]
    parses "bac" as "abc" leaving "" [✔]
    parses "bca" as "abc" leaving "" [✔]
    parses "cab" as "abc" leaving "" [✔]
    parses "cba" as "abc" leaving "" [✔]
    parses "aab" as "ayz" leaving "ab" [✔]
    parses "aba" as "abz" leaving "a" [✔]
    parses "baa" as "abz" leaving "a" [✔]
    parses "bba" as "xbz" leaving "ba" [✔]
    parses "bab" as "abz" leaving "b" [✔]
    parses "abb" as "abz" leaving "b" [✔]
    parses "cca" as "xyc" leaving "ca" [✔]
    parses "cac" as "ayc" leaving "c" [✔]
    parses "acc" as "ayc" leaving "c" [✔]
    parses "aaa" as "ayz" leaving "aa" [✔]
    parses "bbb" as "xbz" leaving "bb" [✔]
    parses "ccc" as "xyc" leaving "cc" [✔]
    parses "q" as "xyz" leaving "q" [✔]
    parses "" as "xyz" leaving "" [✔]
  intercalateEffect (with default)
    parses "a,b,c" as "abc" leaving "" [✔]
    parses "a,c,b" as "abc" leaving "" [✔]
    parses "b,a,c" as "abc" leaving "" [✔]
    parses "b,c,a" as "abc" leaving "" [✔]
    parses "c,a,b" as "abc" leaving "" [✔]
    parses "c,b,a" as "abc" leaving "" [✔]
    parses "aab" as "ayz" leaving "ab" [✔]
    parses "a,ba" as "abz" leaving "a" [✔]
    parses "b,aa" as "abz" leaving "a" [✔]
    parses "bba" as "xbz" leaving "ba" [✔]
    parses "b,ab" as "abz" leaving "b" [✔]
    parses "a,bb" as "abz" leaving "b" [✔]
    parses "cca" as "xyc" leaving "ca" [✔]
    parses "c,ac" as "ayc" leaving "c" [✔]
    parses "a,cc" as "ayc" leaving "c" [✔]
    parses "aaa" as "ayz" leaving "aa" [✔]
    parses "bbb" as "xbz" leaving "bb" [✔]
    parses "ccc" as "xyc" leaving "cc" [✔]
    parses "!" as "xyz" leaving "!" [✔]
    parses "," as "xyz" leaving "," [✔]
    parses "" as "xyz" leaving "" [✔]
Control.Monad.Combinators
  count
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  count'
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  endBy
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  endBy1
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  manyTill
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  manyTill_
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  someTill
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  someTill_
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  sepBy
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  sepBy1
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  sepEndBy
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  sepEndBy1
    works [✔]
      +++ OK, passed 100 tests.
    produces the list in the right order [✔]
  skipMany
    works [✔]
      +++ OK, passed 100 tests.
  skipSome
    works [✔]
      +++ OK, passed 100 tests.
  skipCount
    works [✔]
      +++ OK, passed 100 tests.
  skipManyTill
    works [✔]
      +++ OK, passed 100 tests; 1 discarded.
  skipSomeTill
    works [✔]
      +++ OK, passed 100 tests; 1 discarded.
Control.Monad.Combinators.Expr
  makeExprParser
    when given valid rendered AST
      can parse it back [✔]
        +++ OK, passed 100 tests.
    when stream in empty
      signals correct parse error [✔]
    when term is missing
      signals correct parse error [✔]
    operator is missing
      signals correct parse error [✔]
        +++ OK, passed 100 tests.
Control.Monad.Permutations
  runPermutation & Permutation
    Functor instance
      obeys identity law [✔]
        +++ OK, passed 100 tests.
      obeys composition law [✔]
        +++ OK, passed 100 tests.
    Applicative instance
      obeys identity law [✔]
        +++ OK, passed 100 tests.
      obeys composition law [✔]
        +++ OK, passed 100 tests.
      obeys homomorphism law [✔]
        +++ OK, passed 100 tests.
      obeys interchange law [✔]
        +++ OK, passed 100 tests.
  toPermutation
    works [✔]
      +++ OK, passed 100 tests.
  intercalateEffect
    works [✔]
      +++ OK, passed 100 tests.
  toPermutationWithDefault
    parses "abc" as "abc" leaving "" [✔]
    parses "acb" as "abc" leaving "" [✔]
    parses "bac" as "abc" leaving "" [✔]
    parses "bca" as "abc" leaving "" [✔]
    parses "cab" as "abc" leaving "" [✔]
    parses "cba" as "abc" leaving "" [✔]
    parses "aab" as "ayz" leaving "ab" [✔]
    parses "aba" as "abz" leaving "a" [✔]
    parses "baa" as "abz" leaving "a" [✔]
    parses "bba" as "xbz" leaving "ba" [✔]
    parses "bab" as "abz" leaving "b" [✔]
    parses "abb" as "abz" leaving "b" [✔]
    parses "cca" as "xyc" leaving "ca" [✔]
    parses "cac" as "ayc" leaving "c" [✔]
    parses "acc" as "ayc" leaving "c" [✔]
    parses "aaa" as "ayz" leaving "aa" [✔]
    parses "bbb" as "xbz" leaving "bb" [✔]
    parses "ccc" as "xyc" leaving "cc" [✔]
    parses "q" as "xyz" leaving "q" [✔]
    parses "" as "xyz" leaving "" [✔]
  intercalateEffect (with default)
    parses "a,b,c" as "abc" leaving "" [✔]
    parses "a,c,b" as "abc" leaving "" [✔]
    parses "b,a,c" as "abc" leaving "" [✔]
    parses "b,c,a" as "abc" leaving "" [✔]
    parses "c,a,b" as "abc" leaving "" [✔]
    parses "c,b,a" as "abc" leaving "" [✔]
    parses "aab" as "ayz" leaving "ab" [✔]
    parses "a,ba" as "abz" leaving "a" [✔]
    parses "b,aa" as "abz" leaving "a" [✔]
    parses "bba" as "xbz" leaving "ba" [✔]
    parses "b,ab" as "abz" leaving "b" [✔]
    parses "a,bb" as "abz" leaving "b" [✔]
    parses "cca" as "xyc" leaving "ca" [✔]
    parses "c,ac" as "ayc" leaving "c" [✔]
    parses "a,cc" as "ayc" leaving "c" [✔]
    parses "aaa" as "ayz" leaving "aa" [✔]
    parses "bbb" as "xbz" leaving "bb" [✔]
    parses "ccc" as "xyc" leaving "cc" [✔]
    parses "!" as "xyz" leaving "!" [✔]
    parses "," as "xyz" leaving "," [✔]
    parses "" as "xyz" leaving "" [✔]

Finished in 0.2389 seconds
164 examples, 0 failures
Test suite test-suite: PASS
Test suite logged to:
/tmp/workdir-parser-combinators-tests/parser-combinators-tests-1.3.0/dist-newstyle/build/x86_64-linux/ghc-9.6.6/parser-combinators-tests-1.3.0/t/test-suite/test/parser-combinators-tests-1.3.0-test-suite.log
1 of 1 test suites (1 of 1 test cases) passed.
