Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - data-diverse-4.7.1.0 (test:data-diverse-test) (ephemeral targets)
Preprocessing test suite 'data-diverse-test' for data-diverse-4.7.1.0...
Building test suite 'data-diverse-test' for data-diverse-4.7.1.0...
Running 1 test suites...
Test suite data-diverse-test: RUNNING...

Data.Diverse.Many
  Many
    is a Typeable [✔]
    is a Read and Show [✔]
    is a Eq [✔]
    is an Ord [✔]
    can converted to and from a tuple [✔]
    can construct using 'single', 'nil', 'consMany', 'snocMany', 'append' [✔]
    can 'snocMany'' a value only if that type doesn't already exist [✔]
    can contain multiple fields of the same type [✔]
    can destruct using 'front', 'back', 'aft', 'fore' [✔]
    has getter for unique fields using 'grab' [✔]
    has getter for for unique fields using 'grabN' [✔]
    has getter for duplicate fields using 'grabN' [✔]
    with duplicate fields can still use 'grab' for unique fields [✔]
    has getter for unique labels using 'grabL' [✔]
    has setter for unique fields using 'replace'' [✔]
    has polymorphic setter for unique fields using 'replace' [✔]
    has setter for unique labels using 'replaceL'' [✔]
    has polymorphic setter for unique labels using 'replaceL' [✔]
    has setter for unique fields using 'replaceN'' [✔]
    has polymorphic setter using 'replaceN'' [✔]
    has setter for duplicate fields using 'replaceN'' [✔]
    has setter for unique fields using 'replace'' (even if there are other duplicate fields) [✔]
    has getter for multiple fields using 'select' [✔]
    has getter for multiple labelled fields using 'selectL' [✔]
    can reorder fields using 'select' or 'selectN' [✔]
    has getter for multiple fields with duplicates using 'selectN' [✔]
    can't select into types from indistinct fields [✔]
    with duplicate fields has getter for multiple unique fields 'select' [✔]
    has setter for multiple fields using 'amend'' [✔]
    has polymorphc setter for multiple fields using 'amend' [✔]
    has setter for multiple labelled fields using 'amendL'' [✔]
    has polymorphic setter for multiple labelled fields using 'amendL' [✔]
    has setter for multiple fields with duplicates using 'amendN'' [✔]
    has polymorphic setter for multiple fields with duplicates using 'amendN'' [✔]
    can't amend into types from indistinct fields [✔]
    with duplicate fields has setter for unique fields 'amend'' [✔]
    can be folded with 'Many' handlers using 'forMany' or 'collect' [✔]
    can be folded with polymorphic 'CaseFunc' handlers using 'forMany' or 'collect' [✔]
    can be folded with 'Many' handlers in index order using 'forManyN' or 'collectN' [✔]
    every hasLens can be mapped into a different type in a Functor-like fashion with using 'afmap' [✔]
Data.Diverse.Type
  TypeLevel
    PositionOf [✔]
    ComplementOf [✔]
Data.Diverse.Which
  Which
    is a Show [✔]
    is a Read and Show [✔]
    is an Eq [✔]
    is an Ord [✔]
    can be constructed by type with 'pick' and destructed with 'trial' [✔]
    can be constructed by label with 'pickL' and destructed with 'trialL' [✔]
    may contain possiblities of duplicate types [✔]
    can be constructed conveniently with 'pick'' and destructed with 'trial0' [✔]
    can be constructed with 'pick' and destructed with pattern 'W' [✔]
    can be constructed by index with 'pickN' and destructed with 'trialN [✔]
    can be 'trial'led until its final 'obvious' value [✔]
    can be 'trialN'led until its final 'obvious' value [✔]
    can be extended and rearranged by type with 'diversify' [✔]
    can be extended and rearranged by type with 'diversify' [✔]
    can be extended and rearranged by index with 'diversifyN' [✔]
    the 'diversify'ed type can contain multiple fields if they aren't in the original 'Many' [✔]
    the 'diversify'ed type can't use indistinct fields from the original 'Many' [✔]
    can be 'reinterpret'ed by type into a totally different Which [✔]
    can be 'reinterpretL'ed by label into a totally different Which [✔]
    the 'reinterpret' type can contain indistinct fields if they aren't in the original 'Many' [✔]
    the 'reinterpret'ed from type can't indistinct fields' [✔]
    the 'reinterpret' type can't use indistinct fields from the original 'Many' [✔]
    can be 'reinterpretN'ed by index into a subset Which [✔]
    can be 'switch'ed with 'Many' handlers in any order [✔]
    can be 'switch'ed with 'Many' handlers with extraneous content [✔]
    can be 'switchN'ed with 'Many' handlers in index order [✔]
    can be switched with a polymorphic 'CaseFunc' handler [✔]
    is ok to 'reinterpret' and 'diversity' from Which '[] [✔]
    'impossible' is just like 'absurd'. Once given an impossible Which '[], anything follows [✔]
    every possibility can be mapped into a different type in a Functor-like fashion with using 'afmap' [✔]

Finished in 0.0046 seconds
72 examples, 0 failures
Test suite data-diverse-test: PASS
Test suite logged to:
/tmp/workdir-data-diverse/data-diverse-4.7.1.0/dist-newstyle/build/x86_64-linux/ghc-9.6.6/data-diverse-4.7.1.0/t/data-diverse-test/test/data-diverse-4.7.1.0-data-diverse-test.log
1 of 1 test suites (1 of 1 test cases) passed.
