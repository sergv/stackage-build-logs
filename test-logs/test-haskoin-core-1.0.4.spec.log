Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - haskoin-core-1.0.4 (test:spec) (ephemeral targets)
Preprocessing test suite 'spec' for haskoin-core-1.0.4...
Building test suite 'spec' for haskoin-core-1.0.4...
Running 1 test suites...
Test suite spec: RUNNING...

Haskoin.Address
  Read/Show Encoding
    read/show identity for Address [✔]
      +++ OK, passed 100 tests.
  MarshalJSON Encoding
    MarshalJSON marshalValue/unmarshalValue identity for Address [✔]
      +++ OK, passed 100 tests.
    MarshalJSON marshalEncoding/unmarshalValue identity for Address [✔]
      +++ OK, passed 100 tests.
  Binary Encoding
    Binary encoding/decoding identity for Address [✔]
      +++ OK, passed 100 tests.
  Address properties
    encodes and decodes base58 bytestring [✔]
      +++ OK, passed 100 tests.
    encodes and decodes base58 bytestring with checksum [✔]
      +++ OK, passed 100 tests.
    textToAddr . addrToText identity [✔]
      +++ OK, passed 100 tests.
    outputAddress . addressToOutput identity [✔]
      +++ OK, passed 100 tests.
  Address vectors
    Passes Base58 vectors 1 [✔]
    Passes Base58 vectors 2 [✔]
    Passes Base58 invalid decoding vectors [✔]
    Passes Base58Check invalid decoding vectors [✔]
    Passes addresses witness p2sh(pwpkh) vectors [✔]
Haskoin.Address.Bech32
  bech32 checksum
    should be valid [✔]
    should be invalid [✔]
    should be case-insensitive [✔]
  bech32 address
    should be valid [✔]
    should be invalid [✔]
    should be case-insensitive [✔]
  bech32 encoding/decoding
    should not encode long data string [✔]
    should not encode bad version number [✔]
    should not encode invalid length for version 0 [✔]
    should relax length restrictions for versions other than 0 [✔]
    should not encode another long data string [✔]
    should not encode empty human readable part [✔]
    should not decode empty human-readable part [✔]
    human-readable part should be case-insensitive [✔]
Haskoin.Address.CashAddr
  cashaddr checksum test vectors
    prefix:x64nx6hz [✔]
    p:gpf8m4h7 [✔]
    bitcoincash:qpzry9x8gf2tvdw0s3jn54khce6mua7lcw20ayyn [✔]
    bchtest:testnetaddress4d6njnut [✔]
    bchreg:555555555555555555555555555555555555555555555udxmlmrz [✔]
  cashaddr to base58 translation test vectors
    1BpEi6DfDAUFd7GtittLSdBeYJvcoaVggu [✔]
    1KXrWXciRDZUpQwQmuM1DbwsKDLYAYsVLR [✔]
    16w1D5WRVKJuZUsSRzdLp9w3YGcgoxDXb [✔]
    3CWFddi6m4ndiGyKqzYvsFYagqDLPVMTzC [✔]
    3LDsS579y7sruadqu11beEJoTjdFiFCdX4 [✔]
    31nwvkZwyPdgzjBJZXfDmSWsC4ZLKpYyUw [✔]
  base58 to cashaddr translation test vectors
    bitcoincash:qpm2qsznhks23z7629mms6s4cwef74vcwvy22gdx6a [✔]
    bitcoincash:qr95sy3j9xwd2ap32xkykttr4cvcu7as4y0qverfuy [✔]
    bitcoincash:qqq3728yw0y47sqn6l2na30mcw6zm78dzqre909m2r [✔]
    bitcoincash:ppm2qsznhks23z7629mms6s4cwef74vcwvn0h829pq [✔]
    bitcoincash:pr95sy3j9xwd2ap32xkykttr4cvcu7as4yc93ky28e [✔]
    bitcoincash:pqq3728yw0y47sqn6l2na30mcw6zm78dzq5ucqzc37 [✔]
  cashaddr larger test vectors
    cashaddr test vector 0 [✔]
    cashaddr test vector 1 [✔]
    cashaddr test vector 2 [✔]
    cashaddr test vector 3 [✔]
    cashaddr test vector 4 [✔]
    cashaddr test vector 5 [✔]
    cashaddr test vector 6 [✔]
    cashaddr test vector 7 [✔]
    cashaddr test vector 8 [✔]
    cashaddr test vector 9 [✔]
    cashaddr test vector 10 [✔]
    cashaddr test vector 11 [✔]
    cashaddr test vector 12 [✔]
    cashaddr test vector 13 [✔]
    cashaddr test vector 14 [✔]
    cashaddr test vector 15 [✔]
    cashaddr test vector 16 [✔]
    cashaddr test vector 17 [✔]
    cashaddr test vector 18 [✔]
    cashaddr test vector 19 [✔]
    cashaddr test vector 20 [✔]
    cashaddr test vector 21 [✔]
    cashaddr test vector 22 [✔]
    cashaddr test vector 23 [✔]
    cashaddr test vector 24 [✔]
    cashaddr test vector 25 [✔]
    cashaddr test vector 26 [✔]
    cashaddr test vector 27 [✔]
    cashaddr test vector 28 [✔]
    cashaddr test vector 29 [✔]
    cashaddr test vector 30 [✔]
    cashaddr test vector 31 [✔]
Haskoin.Block
  Read/Show Encoding
    read/show identity for Block [✔]
      +++ OK, passed 100 tests.
    read/show identity for BlockHash [✔]
      +++ OK, passed 100 tests.
    read/show identity for BlockHeader [✔]
      +++ OK, passed 100 tests.
    read/show identity for GetBlocks [✔]
      +++ OK, passed 100 tests.
    read/show identity for GetHeaders [✔]
      +++ OK, passed 100 tests.
    read/show identity for Headers [✔]
      +++ OK, passed 100 tests.
    read/show identity for MerkleBlock [✔]
      +++ OK, passed 100 tests.
    read/show identity for BlockNode [✔]
      +++ OK, passed 100 tests.
    read/show identity for HeaderMemory [✔]
      +++ OK, passed 100 tests.
  Data.Aeson Encoding
    Data.Aeson toJSON/fromJSON identity for Block [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for Block [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toJSON/fromJSON identity for BlockHash [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for BlockHash [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toJSON/fromJSON identity for BlockHeader [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for BlockHeader [✔]
      +++ OK, passed 100 tests.
  Binary Encoding
    Binary encoding/decoding identity for Block [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for BlockHash [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for BlockHeader [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for GetBlocks [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for GetHeaders [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for Headers [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for MerkleBlock [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for BlockNode [✔]
      +++ OK, passed 100 tests.
  blockchain headers
    gets best block on bchRegTest [✔]
    builds a block locator on bchRegTest [✔]
    follows split chains on bchRegTest [✔]
  block hash
    encodes and decodes block hash [✔]
      +++ OK, passed 100 tests.
    from string block hash [✔]
      +++ OK, passed 100 tests.
  merkle trees
    builds tree of right width at height 1 [✔]
      +++ OK, passed 100 tests; 12 discarded.
    builds tree of right width at height 0 [✔]
      +++ OK, passed 100 tests; 12 discarded.
    builds and extracts partial merkle tree [✔]
      +++ OK, passed 100 tests.
    merkle root test vectors [✔]
  compact number
    compact number local vectors [✔]
    compact number imported vectors [✔]
  asert
    run1 - steady 600s blocks at POW limit target [✔]
    run2 - steady 600s blocks at arbitrary non-limit target 0x1a2b3c4d [✔]
    run3 - steady 600s blocks at minimum limit target 0x01010000 [✔]
    run4 - from minimum target, a series of halflife schedule jumps, doubling target at each block [✔]
    run5 - from POW limit, a series of halflife block height jumps w/o time increment, halving target at each block [✔]
    run6 - deterministically random solvetimes for stable hashrate around a recent real life nBits [✔]
    run7 - deterministically random solvetimes for up-ramping hashrate around a recent real life nBits [✔]
    run8 - deterministically random solvetimes for down-ramping hashrate around a recent real life nBits [✔]
    run9 - a sequence of 300s blocks across signed 32-bit max integer height [✔]
    run10 - a sequence of 900s blocks across signed 64-bit max integer height and signed 32-bit max integer time  [✔]
    run11 - deterministically uniform random solvetimes with negative time [✔]
    run12 - each block 1 second before the previous one [✔]
  helper functions
    computes bitcoin block subsidy correctly [✔]
    computes regtest block subsidy correctly [✔]
Haskoin.Crypto.Hash
  Hash
    Read/Show Encoding
      read/show identity for Hash160 [✔]
        +++ OK, passed 100 tests.
      read/show identity for Hash256 [✔]
        +++ OK, passed 100 tests.
      read/show identity for Hash512 [✔]
        +++ OK, passed 100 tests.
      read/show identity for CheckSum32 [✔]
        +++ OK, passed 100 tests.
    Binary Encoding
      Binary encoding/decoding identity for Hash160 [✔]
        +++ OK, passed 100 tests.
      Binary encoding/decoding identity for Hash256 [✔]
        +++ OK, passed 100 tests.
      Binary encoding/decoding identity for Hash512 [✔]
        +++ OK, passed 100 tests.
      Binary encoding/decoding identity for CheckSum32 [✔]
        +++ OK, passed 100 tests.
    Property Tests
      join512( split512(h) ) == h [✔]
        +++ OK, passed 100 tests.
      decodeCompact . encodeCompact i == i [✔]
        +++ OK, passed 100 tests.
      from string Hash512 [✔]
        +++ OK, passed 100 tests.
      from string Hash256 [✔]
        +++ OK, passed 100 tests.
      from string Hash160 [✔]
        +++ OK, passed 100 tests.
    Test Vectors
      Passes RIPEMD160 test vectors [✔]
      Passes SHA1 test vectors [✔]
      Passes SHA256 test vectors [✔]
      Passes SHA512 test vectors [✔]
      Passes HMAC_SHA256 test vectors [✔]
      Passes HMAC_SHA512 test vectors [✔]
Haskoin.Crypto.Keys
  Key pair property checks
    Read/Show Encoding
      read/show identity for SecKey [✔]
        +++ OK, passed 100 tests.
      read/show identity for PrivateKey [✔]
        +++ OK, passed 100 tests.
      read/show identity for PublicKey [✔]
        +++ OK, passed 100 tests.
    MarshalJSON Encoding
      MarshalJSON marshalValue/unmarshalValue identity for PrivateKey [✔]
        +++ OK, passed 100 tests.
      MarshalJSON marshalEncoding/unmarshalValue identity for PrivateKey [✔]
        +++ OK, passed 100 tests.
      MarshalJSON marshalValue/unmarshalValue identity for PublicKey [✔]
        +++ OK, passed 100 tests.
      MarshalJSON marshalEncoding/unmarshalValue identity for PublicKey [✔]
        +++ OK, passed 100 tests.
    Binary Encoding
      Binary encoding/decoding identity for PrivateKey [✔]
        +++ OK, passed 100 tests.
    Marshal Encoding
      Marshal marshalPut/marshalGet identity for PublicKey [✔]
        +++ OK, passed 100 tests.
    Public key is canonical [✔]
      +++ OK, passed 100 tests.
    Key pair key show . read identity [✔]
      +++ OK, passed 100 tests.
    Public key binary serialization [✔]
      +++ OK, passed 100 tests.
    fromWif . toWif identity [✔]
      +++ OK, passed 100 tests.
    WIF binary identity [✔]
      +++ OK, passed 100 tests.
  Bitcoin core vectors /src/test/key_tests.cpp
    Passes WIF decoding tests [✔]
    Passes SecKey compression tests [✔]
    Passes PubKey compression tests [✔]
    Passes address matching tests [✔]
    Passes signature verification [✔]
    Passes deterministic signing tests [✔]
  MiniKey vectors
    Passes MiniKey decoding tests [✔]
  key_io_valid.json vectors
    Passes the key_io_valid.json vectors [✔]
  key_io_invalid.json vectors
    Passes the key_io_invalid.json vectors [✔]
Haskoin.Crypto.Keys.Extended
  Read/Show Encoding
    read/show identity for XPrvKey [✔]
      +++ OK, passed 100 tests.
    read/show identity for XPubKey [✔]
      +++ OK, passed 100 tests.
    read/show identity for DerivPathI AnyDeriv [✔]
      +++ OK, passed 100 tests.
    read/show identity for DerivPathI HardDeriv [✔]
      +++ OK, passed 100 tests.
    read/show identity for DerivPathI SoftDeriv [✔]
      +++ OK, passed 100 tests.
    read/show identity for ParsedPath [✔]
      +++ OK, passed 100 tests.
    read/show identity for Bip32PathIndex [✔]
      +++ OK, passed 100 tests.
  Data.Aeson Encoding
    Data.Aeson toJSON/fromJSON identity for DerivPathI AnyDeriv [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for DerivPathI AnyDeriv [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toJSON/fromJSON identity for DerivPathI HardDeriv [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for DerivPathI HardDeriv [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toJSON/fromJSON identity for DerivPathI SoftDeriv [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for DerivPathI SoftDeriv [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toJSON/fromJSON identity for ParsedPath [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for ParsedPath [✔]
      +++ OK, passed 100 tests.
  MarshalJSON Encoding
    MarshalJSON marshalValue/unmarshalValue identity for XPrvKey [✔]
      +++ OK, passed 100 tests.
    MarshalJSON marshalEncoding/unmarshalValue identity for XPrvKey [✔]
      +++ OK, passed 100 tests.
    MarshalJSON marshalValue/unmarshalValue identity for XPubKey [✔]
      +++ OK, passed 100 tests.
    MarshalJSON marshalEncoding/unmarshalValue identity for XPubKey [✔]
      +++ OK, passed 100 tests.
  Binary Encoding
    Binary encoding/decoding identity for DerivPathI AnyDeriv [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for DerivPathI HardDeriv [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for DerivPathI SoftDeriv [✔]
      +++ OK, passed 100 tests.
  Marshal Encoding
    Marshal marshalPut/marshalGet identity for XPrvKey [✔]
      +++ OK, passed 100 tests.
    Marshal marshalPut/marshalGet identity for XPubKey [✔]
      +++ OK, passed 100 tests.
  Custom identity tests
    encodes and decodes extended private key [✔]
      +++ OK, passed 100 tests.
    encodes and decodes extended public key [✔]
      +++ OK, passed 100 tests.
  bip32 subkey derivation vector 1
    chain m [✔]
    chain m/0' [✔]
    chain m/0'/1 [✔]
    chain m/0'/1/2' [✔]
    chain m/0'/1/2'/2 [✔]
    chain m/0'/1/2'/2/1000000000 [✔]
  bip32 subkey derivation vector 2
    chain m [✔]
    chain m/0 [✔]
    chain m/0/2147483647' [✔]
    chain m/0/2147483647'/1 [✔]
    chain m/0/2147483647'/1/2147483646' [✔]
    chain m/0/2147483647'/1/2147483646'/2 [✔]
  bip32 subkey derivation vector 3
    chain m [✔]
    chain m/0' [✔]
  bip32 subkey derivation using string path
    either derivations [✔]
    either derivations [✔]
    dublic derivations [✔]
    private derivations [✔]
    path parsing [✔]
    from json [✔]
    to json [✔]
  Derivation Paths
    from string derivation path [✔]
      +++ OK, passed 100 tests.
    from string hard derivation path [✔]
      +++ OK, passed 100 tests.
    from string soft derivation path [✔]
      +++ OK, passed 100 tests.
    from and to lists of derivation paths [✔]
      +++ OK, passed 100 tests.
    from and to lists of hard derivation paths [✔]
      +++ OK, passed 100 tests.
    from and to lists of soft derivation paths [✔]
      +++ OK, passed 100 tests.
  Extended Keys
    computes pubkey of a subkey is subkey of the pubkey [✔]
      +++ OK, passed 100 tests.
    exports and imports extended private key [✔]
      +++ OK, passed 100 tests.
    exports and imports extended public key [✔]
      +++ OK, passed 100 tests.
Haskoin.Crypto.Keys.Mnemonic
  mnemonic
    entropy to mnemonic sentence [✔]
    mnemonic sentence to entropy [✔]
    mnemonic sentence to seed [✔]
    mnemonic sentence with invalid checksum [✔]
    empty mnemonic sentence is invalid [✔]
    generate 12 words [✔]
      +++ OK, passed 100 tests.
    generate 18 words [✔]
      +++ OK, passed 100 tests.
    generate 24 words [✔]
      +++ OK, passed 100 tests.
    generate 48 words [✔]
      +++ OK, passed 100 tests.
    generate any number of words [✔]
      +++ OK, passed 100 tests; 611 discarded.
    encode and decode 128-bit entropy [✔]
      +++ OK, passed 100 tests.
    encode and decode 160-bit entropy [✔]
      +++ OK, passed 100 tests.
    encode and decode 256-bit entropy [✔]
      +++ OK, passed 100 tests.
    encode and decode 512-bit entropy [✔]
      +++ OK, passed 100 tests.
    encode and decode n-bit entropy [✔]
      +++ OK, passed 100 tests; 611 discarded.
    convert 128-bit mnemonic to seed [✔]
      +++ OK, passed 100 tests.
    convert 160-bit mnemonic to seed [✔]
      +++ OK, passed 100 tests.
    convert 256-bit mnemonic to seed [✔]
      +++ OK, passed 100 tests.
    convert 512-bit mnemonic to seed [✔]
      +++ OK, passed 100 tests.
    convert n-bit mnemonic to seed [✔]
      +++ OK, passed 100 tests; 286 discarded.
    get bits [✔]
      +++ OK, passed 100 tests.
    get end bits [✔]
      +++ OK, passed 100 tests.
    passes the Trezor vectors [✔]
Haskoin.Crypto.Signature
  Signature property checks
    verifies signature [✔]
      +++ OK, passed 100 tests.
    s component less than half order [✔]
      +++ OK, passed 100 tests.
    encoded signature is canonical [✔]
      +++ OK, passed 100 tests.
    decodeStrictSig . exportSig identity [✔]
      +++ OK, passed 100 tests.
    importSig . exportSig identity [✔]
      +++ OK, passed 100 tests.
    signature JSON identity [✔]
      +++ OK, passed 100 tests.
    getSig . putSig identity [✔]
      +++ OK, passed 100 tests.
  Signature vectors
    passes RFC6979 test vectors [✔]
  BIP143 signature vectors
    agrees with BIP143 p2wpkh example [✔]
    agrees with BIP143 p2sh-p2wpkh example [✔]
    builds a p2wsh multisig transaction [✔]
    agrees with BIP143 p2sh-p2wsh multisig example [✔]
Haskoin.Network
  Binary Encoding
    Binary encoding/decoding identity for VarInt [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for VarString [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for NetworkAddress [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for InvType [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for InvVector [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for Inv [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for Version [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for Addr [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for Alert [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for Reject [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for RejectCode [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for GetData [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for NotFound [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for Ping [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for Pong [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for MessageCommand [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for MessageHeader [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for BloomFlags [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for (Int,Double,BloomFilter) [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for FilterLoad [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for FilterAdd [✔]
      +++ OK, passed 100 tests.
  Custom identity tests
    Data.Serialize Encoding for type Message [✔]
      +++ OK, passed 100 tests.
  bloom filters
    bloom filter vector 1 [✔]
    bloom filter vector 2 [✔]
    bloom filter vector 3 [✔]
  relevant bloom filter update
    Relevant Update [✔]
    Irrelevant Update [✔]
Haskoin.Script
  Read/Show Encoding
    read/show identity for SigHash [✔]
      +++ OK, passed 100 tests.
    read/show identity for SigHashFlag [✔]
      +++ OK, passed 100 tests.
    read/show identity for Script [✔]
      +++ OK, passed 100 tests.
    read/show identity for PushDataType [✔]
      +++ OK, passed 100 tests.
    read/show identity for ScriptOp [✔]
      +++ OK, passed 100 tests.
    read/show identity for ScriptOutput [✔]
      +++ OK, passed 100 tests.
    read/show identity for ScriptInput [✔]
      +++ OK, passed 100 tests.
  Data.Aeson Encoding
    Data.Aeson toJSON/fromJSON identity for Script [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for Script [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toJSON/fromJSON identity for OutPoint [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for OutPoint [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toJSON/fromJSON identity for SigHash [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for SigHash [✔]
      +++ OK, passed 100 tests.
  MarshalJSON Encoding
    MarshalJSON marshalValue/unmarshalValue identity for TxSignature [✔]
      +++ OK, passed 100 tests.
    MarshalJSON marshalEncoding/unmarshalValue identity for TxSignature [✔]
      +++ OK, passed 100 tests.
    MarshalJSON marshalValue/unmarshalValue identity for ScriptOutput [✔]
      +++ OK, passed 100 tests.
    MarshalJSON marshalEncoding/unmarshalValue identity for ScriptOutput [✔]
      +++ OK, passed 100 tests.
    MarshalJSON marshalValue/unmarshalValue identity for SigInput [✔]
      +++ OK, passed 100 tests.
    MarshalJSON marshalEncoding/unmarshalValue identity for SigInput [✔]
      +++ OK, passed 100 tests.
  Binary Encoding
    Binary encoding/decoding identity for ScriptOp [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for Script [✔]
      +++ OK, passed 100 tests.
  Marshal Encoding
    Marshal marshalPut/marshalGet identity for TxSignature [✔]
      +++ OK, passed 100 tests.
    Marshal marshalPut/marshalGet identity for ScriptOutput [✔]
      +++ OK, passed 100 tests.
    Marshal marshalPut/marshalGet identity for ScriptInput [✔]
      +++ OK, passed 100 tests.
  btc scripts
    has intToScriptOp . scriptOpToInt identity [✔]
      +++ OK, passed 100 tests.
    has decodeOutput . encodeOutput identity [✔]
      +++ OK, passed 100 tests.
    has decodeInput . encodeOutput identity [✔]
      +++ OK, passed 100 tests.
    can sort multisig scripts [✔]
      +++ OK, passed 100 tests.
    can decode inputs with empty signatures [✔]
    can decode strict signatures [✔]
    can detect non-strict signatures [✔]
    can verify standard scripts from script_tests.json file [✔]
    can produce valid sighashes from forkid_sighash.json test vectors [✔]
    can correctly show [✔]
    can add a forkid [✔]
    can extract a forkid [✔]
    can build some vectors [✔]
    can test flags [✔]
    can decodeTxSig . encode a TxSignature [✔]
      +++ OK, passed 100 tests.
    can produce the sighash one [✔]
      +++ OK, passed 100 tests.
    can produce valid sighashes from sighash.json test vectors [✔]
  bch scripts
    has intToScriptOp . scriptOpToInt identity [✔]
      +++ OK, passed 100 tests.
    has decodeOutput . encodeOutput identity [✔]
      +++ OK, passed 100 tests.
    has decodeInput . encodeOutput identity [✔]
      +++ OK, passed 100 tests.
    can sort multisig scripts [✔]
      +++ OK, passed 100 tests.
    can decode inputs with empty signatures [✔]
    can verify scripts from forkid_script_tests.json file [✔]
    can correctly show [✔]
    can add a forkid [✔]
    can extract a forkid [✔]
    can build some vectors [✔]
    can test flags [✔]
    can decodeTxSig . encode a TxSignature [✔]
      +++ OK, passed 100 tests.
    can produce the sighash one [✔]
      +++ OK, passed 100 tests.
  multi signatures
    check multisig vector 0 [✔]
  signature decoding
    check signature 0 [✔]
  SigHashFlag fromEnum/toEnum
    fromEnum/toEnum [✔]
      +++ OK, passed 100 tests.
  Script vectors
    Can encode script vectors [✔]
Haskoin.Transaction
  Read/Show Encoding
    read/show identity for TxHash [✔]
      +++ OK, passed 100 tests.
    read/show identity for Tx [✔]
      +++ OK, passed 100 tests.
    read/show identity for TxIn [✔]
      +++ OK, passed 100 tests.
    read/show identity for TxOut [✔]
      +++ OK, passed 100 tests.
    read/show identity for OutPoint [✔]
      +++ OK, passed 100 tests.
  Data.Aeson Encoding
    Data.Aeson toJSON/fromJSON identity for TxHash [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for TxHash [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toJSON/fromJSON identity for Tx [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for Tx [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toJSON/fromJSON identity for Tx [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for Tx [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toJSON/fromJSON identity for Tx [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for Tx [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toJSON/fromJSON identity for TxIn [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for TxIn [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toJSON/fromJSON identity for TxOut [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for TxOut [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toJSON/fromJSON identity for OutPoint [✔]
      +++ OK, passed 100 tests.
    Data.Aeson toEncoding/fromJSON identity for OutPoint [✔]
      +++ OK, passed 100 tests.
  Binary Encoding
    Binary encoding/decoding identity for Tx [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for Tx [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for Tx [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for TxIn [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for TxOut [✔]
      +++ OK, passed 100 tests.
    Binary encoding/decoding identity for OutPoint [✔]
      +++ OK, passed 100 tests.
  Transaction properties
    decode and encode txid [✔]
      +++ OK, passed 100 tests.
    from string transaction id [✔]
      +++ OK, passed 100 tests.
    building address tx [✔]
      +++ OK, passed 100 tests.
    guess transaction size [✔]
      +++ OK, passed 100 tests.
    choose coins [✔]
      +++ OK, passed 100 tests; 99 discarded.
    choose multisig coins [✔]
      +++ OK, passed 100 tests; 64 discarded.
    sign and validate transaction [✔]
      +++ OK, passed 100 tests.
    sign and validate (nested) transaction [✔]
      +++ OK, passed 100 tests.
    merge partially signed transactions [✔]
      +++ OK, passed 100 tests.
  Transaction vectors
    compute txid from tx [✔]
    build pkhash transaction (generated from bitcoind) [✔]
Haskoin.Transaction.Partial
  PSBT unit tests
    encodes trivial PSBT [✔]
    decodes trivial PSBT [✔]
    encodes and decodes non-empty transactions [✔]
    does not decode invalid BIP test vectors [✔]
    encodes valid BIP test vectors [✔]
    decodes valid BIP test vectors [✔]
    decodes vector 2 [✔]
    decodes vector 3 [✔]
    decodes vector 4 [✔]
    decodes vector 5 [✔]
    decodes vector 6 [✔]
    signed and finalized P2PKH PSBTs verify [✔]
      +++ OK, passed 100 tests.
    signed and finalized multisig PSBTs verify [✔]
      +++ OK, passed 100 tests.
    encodes and decodes PSBT with final witness script [✔]
    handles complex PSBTs correctly [✔]
    calculates keys properly [✔]
Haskoin.Transaction.Taproot
  Taproot
    should calculate the correct hashes [✔]
    should build the correct output key [✔]
    should build the correct script output [✔]
    should calculate the correct control blocks [✔]
    should arrive at the correct address [✔]
Haskoin.Util
  utility functions
    Read/Show Encoding
      read/show identity for Network [✔]
        +++ OK, passed 100 tests.
    bsToInteger . integerToBS [✔]
      +++ OK, passed 100 tests.
    decodeHex . encodeHex [✔]
      +++ OK, passed 100 tests.
    compare updateIndex with Data.Sequence [✔]
      +++ OK, passed 100 tests.
    matchTemplate [✔]
      +++ OK, passed 100 tests.
    testing matchTemplate with two lists [✔]
      +++ OK, passed 100 tests.
    test eitherToMaybe [✔]
      +++ OK, passed 100 tests.
    test maybeToEither [✔]
      +++ OK, passed 100 tests.

Finished in 13.2599 seconds
407 examples, 0 failures
Test suite spec: PASS
Test suite logged to:
/tmp/workdir-haskoin-core/haskoin-core-1.0.4/dist-newstyle/build/x86_64-linux/ghc-9.6.6/haskoin-core-1.0.4/t/spec/test/haskoin-core-1.0.4-spec.log
1 of 1 test suites (1 of 1 test cases) passed.
