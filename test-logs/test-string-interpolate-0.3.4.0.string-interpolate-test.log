Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - string-interpolate-0.3.4.0 (test:string-interpolate-test) (ephemeral targets)
Preprocessing test suite 'string-interpolate-test' for string-interpolate-0.3.4.0...
Building test suite 'string-interpolate-test' for string-interpolate-0.3.4.0...
Running 1 test suites...
Test suite string-interpolate-test: RUNNING...
TTTee
TeparseInterpSegments
mmemppmpllplaalattateete  e HH HaaHassaskkskeekellelllll  l ee errerrrrroororror::r:  : DD DaaDattataata..a.SS.SttStrrtriirinninggng..g.II.InnInttnteeterrerpprpoopollolaalattateete..e.ii.i::i:  : uu unnuntenteskercnrmaomipwinennad at ete#sed cd sa #ypb{mea.b c.ock.lhs} al wraiiasntchtht eoeerurspt:co  alicpan
ett ieaortnp 
oelnadt ioofn  sbtrraicnkge
ts
  terminates [✔]
    +++ OK, passed 10000 tests.
i
  should allow an escaped backslash right before an interp [✔]
  should only escape verbatim segments a single time [✔]
  should error on hanging # [✔]
  should error on unterminated backslash [✔]
  should error on unknown escape sequence [✔]
  should error on unclosed expression [✔]
  should parse TypeApplications [✔]
  should work with many interpolations [✔]
  when using String as a parameter
    just interpolating should be id [✔]
      +++ OK, passed 10000 tests.
    should passthrough a conversion to strict Text and back unchanged [✔]
      +++ OK, passed 10000 tests.
    should passthrough a conversion to lazy Text and back unchanged [✔]
      +++ OK, passed 10000 tests.
    should passthrough a conversion to strict ByteString and back unchanged [✔]
      +++ OK, passed 10000 tests.
    should passthrough a conversion to lazy ByteString and back unchanged [✔]
      +++ OK, passed 10000 tests.
  when using strict Text as a parameter
    just interpolating should be id [✔]
      +++ OK, passed 10000 tests.
    should passthrough a conversion to String and back unchanged [✔]
      +++ OK, passed 10000 tests.
    should passthrough a conversion to lazy Text and back unchanged [✔]
      +++ OK, passed 10000 tests.
    should passthrough a conversion to strict ByteString and back unchanged [✔]
      +++ OK, passed 10000 tests.
    should passthrough a conversion to lazy ByteString and back unchanged [✔]
      +++ OK, passed 10000 tests.
  when using lazy Text as a parameter
    just interpolating should be id [✔]
      +++ OK, passed 10000 tests.
    should passthrough a conversion to String and back unchanged [✔]
      +++ OK, passed 10000 tests.
    should passthrough a conversion to strict Text and back unchanged [✔]
      +++ OK, passed 10000 tests.
    should passthrough a conversion to strict ByteString and back unchanged [✔]
      +++ OK, passed 10000 tests.
    should passthrough a conversion to lazy ByteString and back unchanged [✔]
      +++ OK, passed 10000 tests.
  when using strict ByteString as a parameter
    just interpolating should be id [✔]
      +++ OK, passed 10000 tests.
    should passthrough a conversion to lazy ByteString and back unchanged [✔]
      +++ OK, passed 10000 tests.
    and the ByteString is valid UTF8
      should passthrough a conversion to String and back unchanged [✔]
        +++ OK, passed 10000 tests.
      should passthrough a conversion to strict Text and back unchanged [✔]
        +++ OK, passed 10000 tests.
      should passthrough a conversion to lazy Text and back unchanged [✔]
        +++ OK, passed 10000 tests.
  when using lazy ByteString as a parameter
    just interpolating should be id [✔]
      +++ OK, passed 10000 tests.
    should passthrough a conversion to strict ByteString and back unchanged [✔]
      +++ OK, passed 10000 tests.
    and the ByteString is valid UTF8
      should passthrough a conversion to String and back unchanged [✔]
        +++ OK, passed 10000 tests.
      should passthrough a conversion to strict Text and back unchanged [✔]
        +++ OK, passed 10000 tests.
      should passthrough a conversion to lazy Text and back unchanged [✔]
        +++ OK, passed 10000 tests.
  when using Char as a parameter
    interpolating into a String shouldn't have quotes [✔]
      +++ OK, passed 10000 tests.
    interpolating into strict Text shouldn't have quotes [✔]
      +++ OK, passed 10000 tests.
    interpolating into lazy Text shouldn't have quotes [✔]
      +++ OK, passed 10000 tests.
    interpolating into strict ByteString shouldn't have quotes [✔]
      +++ OK, passed 10000 tests.
    interpolating into lazy ByteString shouldn't have quotes [✔]
      +++ OK, passed 10000 tests.
  when interpolating into strict ByteString
    should handle literal Unicode strings correctly [✔]
  when interpolating into lazy ByteString
    should handle literal Unicode strings correctly [✔]
__i
  when there are newlines
    handles a small code snippet correctly/1 [✔]
    handles a small code snippet correctly/2 [✔]
    handles a small code snippet correctly/3 [✔]
    handles tabs [✔]
__i'E
  when there are newlines
    handles a small code snippet correctly/1 [✔]
    handles a small code snippet correctly/2 [✔]
    handles a small code snippet correctly/3 [✔]
__i'L
  when there are newlines
    handles a small code snippet correctly/1 [✔]
    handles a small code snippet correctly/2 [✔]
    handles a small code snippet correctly/3 [✔]
iii
  when there is whitespace
    collapses a small example of whitespace [✔]
    collapses a small example of newlines [✔]
iii'E
  when there is whitespace
    collapses a small example of whitespace [✔]
    collapses a small example of newlines [✔]
iii'L
  when there is whitespace
    collapses a small example of whitespace [✔]
    collapses a small example of newlines [✔]

Finished in 0.5565 seconds
57 examples, 0 failures
Test suite string-interpolate-test: PASS
Test suite logged to:
/tmp/workdir-string-interpolate/string-interpolate-0.3.4.0/dist-newstyle/build/x86_64-linux/ghc-9.6.6/string-interpolate-0.3.4.0/t/string-interpolate-test/test/string-interpolate-0.3.4.0-string-interpolate-test.log
1 of 1 test suites (1 of 1 test cases) passed.
