Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - mixed-types-num-0.5.12 (test:mixed-types-num-test) (ephemeral targets)
Preprocessing test suite 'mixed-types-num-test' for mixed-types-num-0.5.12...
Building test suite 'mixed-types-num-test' for mixed-types-num-0.5.12...
Running 1 test suites...
Test suite mixed-types-num-test: RUNNING...

Numeric.MixedTypes.AddSub
  CanAdd Int Int, CanAdd Int Int
    absorbs 0 [✔]
      +++ OK, passed 100 tests.
    is commutative [✔]
      +++ OK, passed 100 tests.
    is associative [✔]
      +++ OK, passed 100 tests.
    increases when positive [✔]
      +++ OK, passed 100 tests; 92 discarded.
    decreases when negative [✔]
      +++ OK, passed 100 tests; 147 discarded.
  CanAdd Integer Integer, CanAdd Integer Integer
    absorbs 0 [✔]
      +++ OK, passed 100 tests.
    is commutative [✔]
      +++ OK, passed 100 tests.
    is associative [✔]
      +++ OK, passed 100 tests.
    increases when positive [✔]
      +++ OK, passed 100 tests; 92 discarded.
    decreases when negative [✔]
      +++ OK, passed 100 tests; 147 discarded.
  CanAdd Rational Rational, CanAdd Rational Rational
    absorbs 0 [✔]
      +++ OK, passed 100 tests.
    is commutative [✔]
      +++ OK, passed 100 tests.
    is associative [✔]
      +++ OK, passed 100 tests.
    increases when positive [✔]
      +++ OK, passed 100 tests; 96 discarded.
    decreases when negative [✔]
      +++ OK, passed 100 tests; 132 discarded.
  CanAdd Int Integer, CanAdd Integer Rational
    absorbs 0 [✔]
      +++ OK, passed 100 tests.
    is commutative [✔]
      +++ OK, passed 100 tests.
    is associative [✔]
      +++ OK, passed 100 tests.
    increases when positive [✔]
      +++ OK, passed 100 tests; 92 discarded.
    decreases when negative [✔]
      +++ OK, passed 100 tests; 147 discarded.
  CanAdd Integer Rational, CanAdd Rational Int
    absorbs 0 [✔]
      +++ OK, passed 100 tests.
    is commutative [✔]
      +++ OK, passed 100 tests.
    is associative [✔]
      +++ OK, passed 100 tests.
    increases when positive [✔]
      +++ OK, passed 100 tests; 92 discarded.
    decreases when negative [✔]
      +++ OK, passed 100 tests; 147 discarded.
  CanAddSameType Integer
    has sum working over integers [✔]
      +++ OK, passed 100 tests.
    has sum [] = 0 [✔]
      +++ OK, passed 1 test.
  CanAddSameType Rational
    has sum working over integers [✔]
      +++ OK, passed 100 tests.
    has sum [] = 0 [✔]
      +++ OK, passed 1 test.
  CanSub Int Int
    x-0 = x [✔]
      +++ OK, passed 100 tests.
    x-x = 0 [✔]
      +++ OK, passed 100 tests.
    x-y = x+(-y) [✔]
      +++ OK, passed 100 tests.
  CanSub Integer Integer
    x-0 = x [✔]
      +++ OK, passed 100 tests.
    x-x = 0 [✔]
      +++ OK, passed 100 tests.
    x-y = x+(-y) [✔]
      +++ OK, passed 100 tests.
  CanSub Rational Rational
    x-0 = x [✔]
      +++ OK, passed 100 tests.
    x-x = 0 [✔]
      +++ OK, passed 100 tests.
    x-y = x+(-y) [✔]
      +++ OK, passed 100 tests.
  CanSub Int Integer
    x-0 = x [✔]
      +++ OK, passed 100 tests.
    x-x = 0 [✔]
      +++ OK, passed 100 tests.
    x-y = x+(-y) [✔]
      +++ OK, passed 100 tests.
  CanSub Int Rational
    x-0 = x [✔]
      +++ OK, passed 100 tests.
    x-x = 0 [✔]
      +++ OK, passed 100 tests.
    x-y = x+(-y) [✔]
      +++ OK, passed 100 tests.
  CanSub Integer Rational
    x-0 = x [✔]
      +++ OK, passed 100 tests.
    x-x = 0 [✔]
      +++ OK, passed 100 tests.
    x-y = x+(-y) [✔]
      +++ OK, passed 100 tests.
Numeric.MixedTypes.Bool
  IsBool Bool
    CanTestCertainly Bool
      detects True using isCertainlyTrue [✔]
      does not detect False using isCertainlyTrue [✔]
      detects False using isCertainlyFalse [✔]
      does not detect True using isCertainlyFalse [✔]
    CanNeg Bool
      ignores double negation [✔]
      negates True to False [✔]
      negates False to True [✔]
    CanAndOr Bool Bool, CanAndOr Bool Bool
      has idempotent || [✔]
      has idempotent && [✔]
      has commutative || [✔]
      has commutative && [✔]
      has associative || [✔]
      has associative && [✔]
      distributes || over && [✔]
      distributes && over || [✔]
      distributes not over || [✔]
      distributes not over && [✔]
Numeric.MixedTypes.EqOrd
  HasEq Int Int, HasEq Int Int
    has reflexive == [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive /= [✔]
      +++ OK, passed 100 tests.
    has stronly commutative == [✔]
      +++ OK, passed 100 tests.
    has stronly commutative /= [✔]
      +++ OK, passed 100 tests.
    has stronly transitive == [✔]
      +++ OK, passed 100 tests.
  HasEq Integer Integer, HasEq Integer Integer
    has reflexive == [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive /= [✔]
      +++ OK, passed 100 tests.
    has stronly commutative == [✔]
      +++ OK, passed 100 tests.
    has stronly commutative /= [✔]
      +++ OK, passed 100 tests.
    has stronly transitive == [✔]
      +++ OK, passed 100 tests.
  HasEq Rational Rational, HasEq Rational Rational
    has reflexive == [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive /= [✔]
      +++ OK, passed 100 tests.
    has stronly commutative == [✔]
      +++ OK, passed 100 tests.
    has stronly commutative /= [✔]
      +++ OK, passed 100 tests.
    has stronly transitive == [✔]
      +++ OK, passed 100 tests.
  HasEq Double Double, HasEq Double Double
    has reflexive == [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive /= [✔]
      +++ OK, passed 100 tests.
    has stronly commutative == [✔]
      +++ OK, passed 100 tests.
    has stronly commutative /= [✔]
      +++ OK, passed 100 tests.
    has stronly transitive == [✔]
      +++ OK, passed 100 tests.
  HasEq Int Integer, HasEq Integer Rational
    has reflexive == [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive /= [✔]
      +++ OK, passed 100 tests.
    has stronly commutative == [✔]
      +++ OK, passed 100 tests.
    has stronly commutative /= [✔]
      +++ OK, passed 100 tests.
    has stronly transitive == [✔]
      +++ OK, passed 100 tests.
  HasEq Integer Rational, HasEq Rational Int
    has reflexive == [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive /= [✔]
      +++ OK, passed 100 tests.
    has stronly commutative == [✔]
      +++ OK, passed 100 tests.
    has stronly commutative /= [✔]
      +++ OK, passed 100 tests.
    has stronly transitive == [✔]
      +++ OK, passed 100 tests.
  HasEq Integer Double, HasEq Double Int
    has reflexive == [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive /= [✔]
      +++ OK, passed 100 tests.
    has stronly commutative == [✔]
      +++ OK, passed 100 tests.
    has stronly commutative /= [✔]
      +++ OK, passed 100 tests.
    has stronly transitive == [✔]
      +++ OK, passed 100 tests.
  CanTestZero Int
    converted non-zero Integer is not isCertainlyZero [✔]
      +++ OK, passed 100 tests; 14 discarded.
    converted non-zero Integer is isCertainlyNonZero [✔]
      +++ OK, passed 100 tests; 14 discarded.
    converted 0.0 is not isCertainlyNonZero [✔]
  CanTestZero Integer
    converted non-zero Integer is not isCertainlyZero [✔]
      +++ OK, passed 100 tests; 14 discarded.
    converted non-zero Integer is isCertainlyNonZero [✔]
      +++ OK, passed 100 tests; 14 discarded.
    converted 0.0 is not isCertainlyNonZero [✔]
  CanTestZero Rational
    converted non-zero Integer is not isCertainlyZero [✔]
      +++ OK, passed 100 tests; 14 discarded.
    converted non-zero Integer is isCertainlyNonZero [✔]
      +++ OK, passed 100 tests; 14 discarded.
    converted 0.0 is not isCertainlyNonZero [✔]
  CanPickNonZero Int
    picks a non-zero element if there is one [✔]
      +++ OK, passed 100 tests; 14 discarded.
    returns Nothing when all the elements are 0 [✔]
  CanPickNonZero Integer
    picks a non-zero element if there is one [✔]
      +++ OK, passed 100 tests; 14 discarded.
    returns Nothing when all the elements are 0 [✔]
  CanPickNonZero Rational
    picks a non-zero element if there is one [✔]
      +++ OK, passed 100 tests; 14 discarded.
    returns Nothing when all the elements are 0 [✔]
  HasOrd Int Int, HasOrd Int Int
    has reflexive >= [✔]
      +++ OK, passed 100 tests.
    has reflexive <= [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive > [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive < [✔]
      +++ OK, passed 100 tests.
    > stronly implies >= [✔]
      +++ OK, passed 100 tests.
    < stronly implies <= [✔]
      +++ OK, passed 100 tests.
    has stronly equivalent > and < [✔]
      +++ OK, passed 100 tests.
    has stronly equivalent >= and <= [✔]
      +++ OK, passed 100 tests.
    has stronly transitive < [✔]
      +++ OK, passed 100 tests.
  HasOrd Integer Integer, HasOrd Integer Integer
    has reflexive >= [✔]
      +++ OK, passed 100 tests.
    has reflexive <= [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive > [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive < [✔]
      +++ OK, passed 100 tests.
    > stronly implies >= [✔]
      +++ OK, passed 100 tests.
    < stronly implies <= [✔]
      +++ OK, passed 100 tests.
    has stronly equivalent > and < [✔]
      +++ OK, passed 100 tests.
    has stronly equivalent >= and <= [✔]
      +++ OK, passed 100 tests.
    has stronly transitive < [✔]
      +++ OK, passed 100 tests.
  HasOrd Rational Rational, HasOrd Rational Rational
    has reflexive >= [✔]
      +++ OK, passed 100 tests.
    has reflexive <= [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive > [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive < [✔]
      +++ OK, passed 100 tests.
    > stronly implies >= [✔]
      +++ OK, passed 100 tests.
    < stronly implies <= [✔]
      +++ OK, passed 100 tests.
    has stronly equivalent > and < [✔]
      +++ OK, passed 100 tests.
    has stronly equivalent >= and <= [✔]
      +++ OK, passed 100 tests.
    has stronly transitive < [✔]
      +++ OK, passed 100 tests.
  HasOrd Double Double, HasOrd Double Double
    has reflexive >= [✔]
      +++ OK, passed 100 tests.
    has reflexive <= [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive > [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive < [✔]
      +++ OK, passed 100 tests.
    > stronly implies >= [✔]
      +++ OK, passed 100 tests.
    < stronly implies <= [✔]
      +++ OK, passed 100 tests.
    has stronly equivalent > and < [✔]
      +++ OK, passed 100 tests.
    has stronly equivalent >= and <= [✔]
      +++ OK, passed 100 tests.
    has stronly transitive < [✔]
      +++ OK, passed 100 tests.
  HasOrd Int Integer, HasOrd Integer Rational
    has reflexive >= [✔]
      +++ OK, passed 100 tests.
    has reflexive <= [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive > [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive < [✔]
      +++ OK, passed 100 tests.
    > stronly implies >= [✔]
      +++ OK, passed 100 tests.
    < stronly implies <= [✔]
      +++ OK, passed 100 tests.
    has stronly equivalent > and < [✔]
      +++ OK, passed 100 tests.
    has stronly equivalent >= and <= [✔]
      +++ OK, passed 100 tests.
    has stronly transitive < [✔]
      +++ OK, passed 100 tests.
  HasOrd Integer Rational, HasOrd Rational Int
    has reflexive >= [✔]
      +++ OK, passed 100 tests.
    has reflexive <= [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive > [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive < [✔]
      +++ OK, passed 100 tests.
    > stronly implies >= [✔]
      +++ OK, passed 100 tests.
    < stronly implies <= [✔]
      +++ OK, passed 100 tests.
    has stronly equivalent > and < [✔]
      +++ OK, passed 100 tests.
    has stronly equivalent >= and <= [✔]
      +++ OK, passed 100 tests.
    has stronly transitive < [✔]
      +++ OK, passed 100 tests.
  HasOrd Integer Double, HasOrd Double Int
    has reflexive >= [✔]
      +++ OK, passed 100 tests.
    has reflexive <= [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive > [✔]
      +++ OK, passed 100 tests.
    has anti-reflexive < [✔]
      +++ OK, passed 100 tests.
    > stronly implies >= [✔]
      +++ OK, passed 100 tests.
    < stronly implies <= [✔]
      +++ OK, passed 100 tests.
    has stronly equivalent > and < [✔]
      +++ OK, passed 100 tests.
    has stronly equivalent >= and <= [✔]
      +++ OK, passed 100 tests.
    has stronly transitive < [✔]
      +++ OK, passed 100 tests.
Numeric.MixedTypes.Field
  CanDiv Int Int
    recip(recip x) = x [✔]
      +++ OK, passed 100 tests; 14 discarded.
    x/1 = x [✔]
      +++ OK, passed 100 tests.
    x/x = 1 [✔]
      +++ OK, passed 100 tests; 14 discarded.
    x/y = x*(1/y) [✔]
      +++ OK, passed 100 tests; 14 discarded.
  CanDiv Integer Integer
    recip(recip x) = x [✔]
      +++ OK, passed 100 tests; 14 discarded.
    x/1 = x [✔]
      +++ OK, passed 100 tests.
    x/x = 1 [✔]
      +++ OK, passed 100 tests; 14 discarded.
    x/y = x*(1/y) [✔]
      +++ OK, passed 100 tests; 14 discarded.
  CanDiv Rational Rational
    recip(recip x) = x [✔]
      +++ OK, passed 100 tests; 11 discarded.
    x/1 = x [✔]
      +++ OK, passed 100 tests.
    x/x = 1 [✔]
      +++ OK, passed 100 tests; 11 discarded.
    x/y = x*(1/y) [✔]
      +++ OK, passed 100 tests; 17 discarded.
  CanDiv Int Integer
    recip(recip x) = x [✔]
      +++ OK, passed 100 tests; 14 discarded.
    x/1 = x [✔]
      +++ OK, passed 100 tests.
    x/x = 1 [✔]
      +++ OK, passed 100 tests; 14 discarded.
    x/y = x*(1/y) [✔]
      +++ OK, passed 100 tests; 14 discarded.
  CanDiv Rational Integer
    recip(recip x) = x [✔]
      +++ OK, passed 100 tests; 11 discarded.
    x/1 = x [✔]
      +++ OK, passed 100 tests.
    x/x = 1 [✔]
      +++ OK, passed 100 tests; 11 discarded.
    x/y = x*(1/y) [✔]
      +++ OK, passed 100 tests; 14 discarded.
Numeric.MixedTypes.Literals
  generic list index (!!)
    works using Int index [✔]
      +++ OK, passed 100 tests; 111 discarded.
  generic list index (!!)
    works using Integer index [✔]
      +++ OK, passed 100 tests; 111 discarded.
  conversion
    Int -> Integer -> Int [✔]
      +++ OK, passed 100 tests.
  converting large integer to int throws exception [✔]
  conversion
    Int -> Rational -> Int [✔]
      +++ OK, passed 100 tests.
  conversion
    Integer -> Rational -> Integer [✔]
      +++ OK, passed 100 tests.
  conversion
    Double -> Rational -> Double [✔]
      +++ OK, passed 100 tests.
Numeric.MixedTypes.MinMaxAbs
  CanMinMax Int Int, CanMinMax Int Int
    `min` is not larger than its arguments [✔]
      +++ OK, passed 100 tests.
    `max` is not smaller than its arguments [✔]
      +++ OK, passed 100 tests.
    has idempotent `min` [✔]
      +++ OK, passed 100 tests.
    has idempotent `max` [✔]
      +++ OK, passed 100 tests.
    has commutative `min` [✔]
      +++ OK, passed 100 tests.
    has commutative `max` [✔]
      +++ OK, passed 100 tests.
    has associative `min` [✔]
      +++ OK, passed 100 tests.
    has associative `max` [✔]
      +++ OK, passed 100 tests.
  CanMinMax Integer Integer, CanMinMax Integer Integer
    `min` is not larger than its arguments [✔]
      +++ OK, passed 100 tests.
    `max` is not smaller than its arguments [✔]
      +++ OK, passed 100 tests.
    has idempotent `min` [✔]
      +++ OK, passed 100 tests.
    has idempotent `max` [✔]
      +++ OK, passed 100 tests.
    has commutative `min` [✔]
      +++ OK, passed 100 tests.
    has commutative `max` [✔]
      +++ OK, passed 100 tests.
    has associative `min` [✔]
      +++ OK, passed 100 tests.
    has associative `max` [✔]
      +++ OK, passed 100 tests.
  CanMinMax Rational Rational, CanMinMax Rational Rational
    `min` is not larger than its arguments [✔]
      +++ OK, passed 100 tests.
    `max` is not smaller than its arguments [✔]
      +++ OK, passed 100 tests.
    has idempotent `min` [✔]
      +++ OK, passed 100 tests.
    has idempotent `max` [✔]
      +++ OK, passed 100 tests.
    has commutative `min` [✔]
      +++ OK, passed 100 tests.
    has commutative `max` [✔]
      +++ OK, passed 100 tests.
    has associative `min` [✔]
      +++ OK, passed 100 tests.
    has associative `max` [✔]
      +++ OK, passed 100 tests.
  CanMinMax Int Integer, CanMinMax Integer Rational
    `min` is not larger than its arguments [✔]
      +++ OK, passed 100 tests.
    `max` is not smaller than its arguments [✔]
      +++ OK, passed 100 tests.
    has idempotent `min` [✔]
      +++ OK, passed 100 tests.
    has idempotent `max` [✔]
      +++ OK, passed 100 tests.
    has commutative `min` [✔]
      +++ OK, passed 100 tests.
    has commutative `max` [✔]
      +++ OK, passed 100 tests.
    has associative `min` [✔]
      +++ OK, passed 100 tests.
    has associative `max` [✔]
      +++ OK, passed 100 tests.
  CanMinMax Integer Rational, CanMinMax Rational Int
    `min` is not larger than its arguments [✔]
      +++ OK, passed 100 tests.
    `max` is not smaller than its arguments [✔]
      +++ OK, passed 100 tests.
    has idempotent `min` [✔]
      +++ OK, passed 100 tests.
    has idempotent `max` [✔]
      +++ OK, passed 100 tests.
    has commutative `min` [✔]
      +++ OK, passed 100 tests.
    has commutative `max` [✔]
      +++ OK, passed 100 tests.
    has associative `min` [✔]
      +++ OK, passed 100 tests.
    has associative `max` [✔]
      +++ OK, passed 100 tests.
  CanNeg Int
    ignores double negation [✔]
      +++ OK, passed 100 tests.
    takes 0 to 0 [✔]
    takes positive to negative [✔]
      +++ OK, passed 100 tests; 119 discarded.
    takes negative to positive [✔]
      +++ OK, passed 100 tests; 105 discarded.
  CanNeg Integer
    ignores double negation [✔]
      +++ OK, passed 100 tests.
    takes 0 to 0 [✔]
    takes positive to negative [✔]
      +++ OK, passed 100 tests; 119 discarded.
    takes negative to positive [✔]
      +++ OK, passed 100 tests; 105 discarded.
  CanNeg Rational
    ignores double negation [✔]
      +++ OK, passed 100 tests.
    takes 0 to 0 [✔]
    takes positive to negative [✔]
      +++ OK, passed 100 tests; 130 discarded.
    takes negative to positive [✔]
      +++ OK, passed 100 tests; 127 discarded.
  CanAbs Int
    is idempotent [✔]
      +++ OK, passed 100 tests.
    is identity on non-negative arguments [✔]
      +++ OK, passed 100 tests; 111 discarded.
    is negation on non-positive arguments [✔]
      +++ OK, passed 100 tests; 99 discarded.
    does not give negative results [✔]
      +++ OK, passed 100 tests.
  CanAbs Integer
    is idempotent [✔]
      +++ OK, passed 100 tests.
    is identity on non-negative arguments [✔]
      +++ OK, passed 100 tests; 111 discarded.
    is negation on non-positive arguments [✔]
      +++ OK, passed 100 tests; 99 discarded.
    does not give negative results [✔]
      +++ OK, passed 100 tests.
  CanAbs Rational
    is idempotent [✔]
      +++ OK, passed 100 tests.
    is identity on non-negative arguments [✔]
      +++ OK, passed 100 tests; 54 discarded.
    is negation on non-positive arguments [✔]
      +++ OK, passed 100 tests; 95 discarded.
    does not give negative results [✔]
      +++ OK, passed 100 tests.
Numeric.MixedTypes.Ring
  CanMul Int Int, CanMul Int Int
    absorbs 1 [✔]
      +++ OK, passed 100 tests.
    is commutative [✔]
      +++ OK, passed 100 tests.
    is associative [✔]
      +++ OK, passed 100 tests.
    distributes over addition [✔]
      +++ OK, passed 100 tests.
  CanMul Integer Integer, CanMul Integer Integer
    absorbs 1 [✔]
      +++ OK, passed 100 tests.
    is commutative [✔]
      +++ OK, passed 100 tests.
    is associative [✔]
      +++ OK, passed 100 tests.
    distributes over addition [✔]
      +++ OK, passed 100 tests.
  CanMul Rational Rational, CanMul Rational Rational
    absorbs 1 [✔]
      +++ OK, passed 100 tests.
    is commutative [✔]
      +++ OK, passed 100 tests.
    is associative [✔]
      +++ OK, passed 100 tests.
    distributes over addition [✔]
      +++ OK, passed 100 tests.
  CanMul Int Integer, CanMul Integer Rational
    absorbs 1 [✔]
      +++ OK, passed 100 tests.
    is commutative [✔]
      +++ OK, passed 100 tests.
    is associative [✔]
      +++ OK, passed 100 tests.
    distributes over addition [✔]
      +++ OK, passed 100 tests.
  CanMul Integer Rational, CanMul Rational Int
    absorbs 1 [✔]
      +++ OK, passed 100 tests.
    is commutative [✔]
      +++ OK, passed 100 tests.
    is associative [✔]
      +++ OK, passed 100 tests.
    distributes over addition [✔]
      +++ OK, passed 100 tests.
  CanMulSameType Integer
    has product working over integers [✔]
      +++ OK, passed 100 tests.
    has product [] = 1 [✔]
      +++ OK, passed 1 test.
  CanMulSameType Rational
    has product working over integers [✔]
      +++ OK, passed 100 tests.
    has product [] = 1 [✔]
      +++ OK, passed 1 test.
  CanPow Integer Integer
    x^0 = 1 [✔]
      +++ OK, passed 100 tests.
    x^1 = x [✔]
      +++ OK, passed 100 tests.
    x^(y+1) = x*x^y [✔]
      +++ OK, passed 100 tests; 90 discarded.
  CanPow Integer Int
    x^0 = 1 [✔]
      +++ OK, passed 100 tests.
    x^1 = x [✔]
      +++ OK, passed 100 tests.
    x^(y+1) = x*x^y [✔]
      +++ OK, passed 100 tests; 90 discarded.
  CanPow Rational Integer
    x^0 = 1 [✔]
      +++ OK, passed 100 tests.
    x^1 = x [✔]
      +++ OK, passed 100 tests.
    x^(y+1) = x*x^y [✔]
      +++ OK, passed 100 tests; 90 discarded.
  CanPow Rational Int
    x^0 = 1 [✔]
      +++ OK, passed 100 tests.
    x^1 = x [✔]
      +++ OK, passed 100 tests.
    x^(y+1) = x*x^y [✔]
      +++ OK, passed 100 tests; 90 discarded.
Numeric.MixedTypes.Round
  CanDivMod (CN Integer) (CN Integer)
    holds 0 <= x `mod` m < m [✔]
      +++ OK, passed 100 tests; 133 discarded.
    holds x == (x `div'` m)*m + (x `mod` m) [✔]
      +++ OK, passed 100 tests; 133 discarded.
  CanDivMod (CN Rational) (CN Rational)
    holds 0 <= x `mod` m < m [✔]
      +++ OK, passed 100 tests; 96 discarded.
    holds x == (x `div'` m)*m + (x `mod` m) [✔]
      +++ OK, passed 100 tests; 96 discarded.
  CanRound Rational
    holds floor x <= x <= ceiling x [✔]
      +++ OK, passed 100 tests.
    holds floor x <= round x <= ceiling x [✔]
      +++ OK, passed 100 tests.
    0 <= ceiling x - floor x <= 1 [✔]
      +++ OK, passed 100 tests.
    holds floor x = round x = ceiling x for integers [✔]
      +++ OK, passed 100 tests.

Finished in 0.0820 seconds
312 examples, 0 failures
Test suite mixed-types-num-test: PASS
Test suite logged to:
/tmp/workdir-mixed-types-num/mixed-types-num-0.5.12/dist-newstyle/build/x86_64-linux/ghc-9.6.6/mixed-types-num-0.5.12/t/mixed-types-num-test/test/mixed-types-num-0.5.12-mixed-types-num-test.log
1 of 1 test suites (1 of 1 test cases) passed.
