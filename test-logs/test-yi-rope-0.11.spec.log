Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - yi-rope-0.11 (test:spec) (ephemeral targets)
Preprocessing test suite 'spec' for yi-rope-0.11...
Building test suite 'spec' for yi-rope-0.11...
Running 1 test suites...
Test suite spec: RUNNING...

Yi.Rope
  Working with YiString is just like working with Text
    id ~ id [✔]
      +++ OK, passed 100 tests.
    R.take ~ T.take [✔]
      +++ OK, passed 100 tests.
    R.drop ~ T.drop [✔]
      +++ OK, passed 100 tests.
    R.reverse ~ T.reverse [✔]
      +++ OK, passed 100 tests.
    R.length ~ T.length [✔]
      +++ OK, passed 100 tests.
    R.null ~ T.null [✔]
      +++ OK, passed 100 tests.
    R.countNewLines ~ T.count \n [✔]
      +++ OK, passed 100 tests.
    R.concat . R.lines' = id [✔]
      +++ OK, passed 100 tests.
    R.lines ~ T.lines [✔]
      +++ OK, passed 100 tests.
    R.empty ~ T.empty [✔]
      +++ OK, passed 1 test.
    fst . R.splitAt ~ fst . T.splitAt [✔]
      +++ OK, passed 100 tests.
    snd . R.splitAt ~ snd . T.splitAt [✔]
      +++ OK, passed 100 tests.
    R.append ~ T.append [✔]
      +++ OK, passed 100 tests.
    R.concat ~ T.concat [✔]
      +++ OK, passed 100 tests.
    R.head ~ T.head [✔]
      +++ OK, passed 100 tests.
    R.last ~ T.last [✔]
      +++ OK, passed 100 tests.
    R.cons ~ T.cons [✔]
      +++ OK, passed 100 tests.
    R.snoc ~ T.snoc [✔]
      +++ OK, passed 100 tests.
    R.singleton ~ T.singleton [✔]
      +++ OK, passed 100 tests.
    \p -> R.any p ~ T.any p $ const True [✔]
      +++ OK, passed 100 tests.
    \p -> R.any p ~ T.any p $ const False [✔]
      +++ OK, passed 100 tests.
    \p c -> R.any (== c) p ~ T.any (== c) p [✔]
      +++ OK, passed 100 tests.
    \p c -> R.all (== c) p ~ T.all (== c) p [✔]
      +++ OK, passed 100 tests.
    \f -> R.withText ~ f $ T.toTitle [✔]
      +++ OK, passed 100 tests.
    \p -> R.dropWhile p ~ T.dropWhile p $ isUpper [✔]
      +++ OK, passed 100 tests.
    \p -> R.takeWhile p ~ T.takeWhile p $ isUpper [✔]
      +++ OK, passed 100 tests.
    R.compare ~ T.compare [✔]
      +++ OK, passed 100 tests.
    \p -> R.filter p ~ T.filter p $ isUpper [✔]
      +++ OK, passed 100 tests.
    \f -> R.map f ~ T.map f $ toUpper [✔]
      +++ OK, passed 100 tests.
    \p -> R.dropWhileEnd p ~ T.dropWhileEnd p $ isSpace [✔]
      +++ OK, passed 100 tests.
    \p -> R.takeWhileEnd p ~ rev . T.takeWhile p . rev $ isSpace [✔]
      +++ OK, passed 100 tests.
    R.words ~ T.words [✔]
      +++ OK, passed 100 tests.
    R.unwords ~ T.unwords [✔]
      +++ OK, passed 100 tests.
    \p -> R.split p ~ T.split p $ isUpper [✔]
      +++ OK, passed 100 tests.
    non-empty s ⊢ R.init s ~ T.init s [✔]
      +++ OK, passed 100 tests.
    non-empty s ⊢ R.tail s ~ T.tail s [✔]
      +++ OK, passed 100 tests.
    \p -> R.span p ~ T.span p $ isUpper [✔]
      +++ OK, passed 100 tests.
    \p -> R.break p ~ T.break p $ isUpper [✔]
      +++ OK, passed 100 tests.
    \p -> R.foldl' p ~ T.foldl' p $ \x _ -> x + 1 [✔]
      +++ OK, passed 100 tests.
    R.replicate ~ T.replicate [✔]
      +++ OK, passed 100 tests.
    R.intercalate ~ T.intercalate [✔]
      +++ OK, passed 100 tests.
  But R.intersperse is not like T.intersperse
    R.intercalate (R.singleton c) = R.intersperse c [✔]
      +++ OK, passed 100 tests.

Finished in 2.4697 seconds
42 examples, 0 failures
Test suite spec: PASS
Test suite logged to:
/tmp/workdir-yi-rope/yi-rope-0.11/dist-newstyle/build/x86_64-linux/ghc-9.6.6/yi-rope-0.11/t/spec/test/yi-rope-0.11-spec.log
1 of 1 test suites (1 of 1 test cases) passed.
