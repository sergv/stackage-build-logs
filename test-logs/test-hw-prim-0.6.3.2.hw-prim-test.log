Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - hw-prim-0.6.3.2 (test:hw-prim-test) (ephemeral targets)
Preprocessing test suite 'hw-prim-test' for hw-prim-0.6.3.2...
Building test suite 'hw-prim-test' for hw-prim-0.6.3.2...
Running 1 test suites...
Test suite hw-prim-test: RUNNING...

HaskellWorks.Data.ByteString
  HaskellWorks.Data.ByteStringSpec
  ✓ <interactive> passed 100 tests.
    resegment does not modify data [✔]
  ✓ <interactive> passed 100 tests.
    resegment creates correctly sized segments [✔]
  ✓ <interactive> passed 100 tests.
    resegmentPadded does not modify data [✔]
  ✓ <interactive> passed 100 tests.
    resegmentPadded creates correctly sized segments [✔]
  ✓ <interactive> passed 100 tests.
    rechunk does not modify data [✔]
  ✓ <interactive> passed 100 tests.
    rechunk creates correctly sized segments [✔]
  ✓ <interactive> passed 100 tests.
    rechunk creates correctly sized segments [✔]
HaskellWorks.Data.Foldable
  HaskellWorks.Data.FoldableSpec
  ✓ <interactive> passed 100 tests.
    foldFirst [✔]
  ✓ <interactive> passed 100 tests.
    foldLast [✔]
HaskellWorks.Data.FromByteString
  HaskellWorks.Data.FromByteStringSpec
    For DVS.Vector Word8
      fromByteString (BS.unpack []) :: DVS.Vector Word8 [✔]
      fromByteString (BS.unpack [0x1]) :: DVS.Vector Word8 [✔]
      fromByteString (BS.unpack [0x1, 0x2]) :: DVS.Vector Word8 [✔]
      fromByteString (BS.unpack [0x1, 0x2, 0x04]) :: DVS.Vector Word8 [✔]
    For DVS.Vector Word16
      fromByteString (BS.unpack []) :: DVS.Vector Word16 [✔]
      fromByteString (BS.unpack [0x1]) :: DVS.Vector Word16 [✔]
      fromByteString (BS.unpack [0x1, 0x2]) :: DVS.Vector Word16 [✔]
      fromByteString (BS.unpack [0x1, 0x2, 0x10]) :: DVS.Vector Word16 [✔]
    For DVS.Vector Word32
      fromByteString (BS.unpack []) :: DVS.Vector Word32 [✔]
      fromByteString (BS.unpack [0x1]) :: DVS.Vector Word32 [✔]
      fromByteString (BS.unpack [0x1, 0x2, 0x4, 0x8]) :: DVS.Vector Word32 [✔]
      fromByteString (BS.unpack [0x1, 0x2, 0x4, 0x8, 0x10]) :: DVS.Vector Word32 [✔]
    For DVS.Vector Word64
      fromByteString (BS.unpack []) :: DVS.Vector Word64 [✔]
      fromByteString (BS.unpack [0x1]) :: DVS.Vector Word64 [✔]
      fromByteString (BS.unpack [0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80]) :: DVS.Vector Word64 [✔]
      fromByteString (BS.unpack [0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x81]) :: DVS.Vector Word64 [✔]
HaskellWorks.Data.FromForeignRegion
  HaskellWorks.Data.FromForeignRegionSpec
  ✓ <interactive> passed 100 tests.
    Be able to load file into Vector [✔]
HaskellWorks.Data.Search
  HaskellWorks.Data.SearchSpec
    No tests [✔]
HaskellWorks.Data.Vector.AsVector8ns
  HaskellWorks.Data.Vector.AsVector8nsSpec
  ✓ <interactive> passed 100 tests.
    Conversion of ByteString works 1 [✔]
  ✓ <interactive> passed 100 tests.
    Conversion of ByteString works 2 [✔]
  ✓ <interactive> passed 100 tests.
    Conversion of ByteString works 3 [✔]
HaskellWorks.Data.Vector.AsVector8s
  HaskellWorks.Data.Vector.AsVector8sSpec
  ✓ <interactive> passed 100 tests.
    Conversion of ByteString works 1 [✔]
  ✓ <interactive> passed 100 tests.
    Conversion of ByteString works 2 [✔]
  ✓ <interactive> passed 100 tests.
    Conversion of ByteString works 3 [✔]
HaskellWorks.Data.Vector.AsVector64ns
  HaskellWorks.Data.Vector.AsVector64nsSpec
  ✓ <interactive> passed 100 tests.
    Conversion of ByteString works 1 [✔]
  ✓ <interactive> passed 100 tests.
    Conversion of ByteString works 2 [✔]
  ✓ <interactive> passed 100 tests.
    Conversion of ByteString works 3 [✔]
HaskellWorks.Data.Vector.AsVector64s
  HaskellWorks.Data.Vector.AsVector64sSpec
  ✓ <interactive> passed 100 tests.
    Conversion of ByteString works 1 [✔]
  ✓ <interactive> passed 100 tests.
    Conversion of ByteString works 2 [✔]
  ✓ <interactive> passed 100 tests.
    Conversion of ByteString works 3 [✔]
HaskellWorks.Data.Vector.Storable
  HaskellWorks.Data.Vector.StorableSpec
  ✓ <interactive> passed 100 tests.
    mapAccumL: f a b = (a + 1, b * 2) [✔]
  ✓ <interactive> passed 100 tests.
    mapAccumL: f a b = (a * 2, b + 1) [✔]
  ✓ <interactive> passed 100 tests.
    construct2N [✔]
    construct64UnzipN
  ✓ <interactive> passed 100 tests.
      property [✔]
  ✓ <interactive> passed 100 tests.
    unzipFromListN2 [✔]

Finished in 2.1004 seconds
44 examples, 0 failures
Test suite hw-prim-test: PASS
Test suite logged to:
/tmp/workdir-hw-prim/hw-prim-0.6.3.2/dist-newstyle/build/x86_64-linux/ghc-9.6.6/hw-prim-0.6.3.2/t/hw-prim-test/test/hw-prim-0.6.3.2-hw-prim-test.log
1 of 1 test suites (1 of 1 test cases) passed.
