Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - lattices-2.2.1 (test:test) (ephemeral targets)
Preprocessing test suite 'test' for lattices-2.2.1...
Building test suite 'test' for lattices-2.2.1...
Running 1 test suites...
Test suite test: RUNNING...
Tests
  M3
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        81% diff
        19% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        53% related
        47% non-related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  M2
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        70% diff
        30% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        72% related
        28% non-related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
    Heyting
      neg default:                                  OK
        +++ OK, passed 100 tests.
      <=> default:                                  OK
        +++ OK, passed 100 tests.
      x ==> x = top:                                OK
        +++ OK, passed 100 tests.
      a /\ (a ==> b) = a /\ b:                      OK
        +++ OK, passed 100 tests.
      b /\ (a ==> b) = b:                           OK
        +++ OK, passed 100 tests.
      a ==> (b /\ c) = (a ==> b) /\ (a ==> c):      OK
        +++ OK, passed 100 tests.
      de Morgan 1:                                  OK
        +++ OK, passed 100 tests.
      weak de Morgan 2:                             OK
        +++ OK, passed 100 tests.
    de Morgan
      de Morgan 2:                                  OK
        +++ OK, passed 100 tests.
    Boolean
      LEM: neg x \/ x = top:                        OK
        +++ OK, passed 100 tests.
      DN: neg (neg x) = x:                          OK
        +++ OK, passed 100 tests.
  Set Bool
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        81% same
        19% diff
      transitive:                                   OK
        +++ OK, passed 100 tests:
        96% related
         4% non-related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
    Heyting
      neg default:                                  OK
        +++ OK, passed 100 tests.
      <=> default:                                  OK
        +++ OK, passed 100 tests.
      x ==> x = top:                                OK
        +++ OK, passed 100 tests.
      a /\ (a ==> b) = a /\ b:                      OK
        +++ OK, passed 100 tests.
      b /\ (a ==> b) = b:                           OK
        +++ OK, passed 100 tests.
      a ==> (b /\ c) = (a ==> b) /\ (a ==> c):      OK
        +++ OK, passed 100 tests.
      de Morgan 1:                                  OK
        +++ OK, passed 100 tests.
      weak de Morgan 2:                             OK
        +++ OK, passed 100 tests.
    de Morgan
      de Morgan 2:                                  OK
        +++ OK, passed 100 tests.
    Boolean
      LEM: neg x \/ x = top:                        OK
        +++ OK, passed 100 tests.
      DN: neg (neg x) = x:                          OK
        +++ OK, passed 100 tests.
  N5
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        79% diff
        21% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        70% related
        30% non-related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  ()
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests (100% same).
      transitive:                                   OK
        +++ OK, passed 100 tests (100% related).
      total:                                        OK
        +++ OK, passed 100 tests.
      leq/compare agree:                            OK
        +++ OK, passed 100 tests.
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
    Heyting
      neg default:                                  OK
        +++ OK, passed 100 tests.
      <=> default:                                  OK
        +++ OK, passed 100 tests.
      x ==> x = top:                                OK
        +++ OK, passed 100 tests.
      a /\ (a ==> b) = a /\ b:                      OK
        +++ OK, passed 100 tests.
      b /\ (a ==> b) = b:                           OK
        +++ OK, passed 100 tests.
      a ==> (b /\ c) = (a ==> b) /\ (a ==> c):      OK
        +++ OK, passed 100 tests.
      de Morgan 1:                                  OK
        +++ OK, passed 100 tests.
      weak de Morgan 2:                             OK
        +++ OK, passed 100 tests.
    de Morgan
      de Morgan 2:                                  OK
        +++ OK, passed 100 tests.
    Boolean
      LEM: neg x \/ x = top:                        OK
        +++ OK, passed 100 tests.
      DN: neg (neg x) = x:                          OK
        +++ OK, passed 100 tests.
  Bool
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        61% same
        39% diff
      transitive:                                   OK
        +++ OK, passed 100 tests (100% related).
      total:                                        OK
        +++ OK, passed 100 tests.
      leq/compare agree:                            OK
        +++ OK, passed 100 tests.
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
    Heyting
      neg default:                                  OK
        +++ OK, passed 100 tests.
      <=> default:                                  OK
        +++ OK, passed 100 tests.
      x ==> x = top:                                OK
        +++ OK, passed 100 tests.
      a /\ (a ==> b) = a /\ b:                      OK
        +++ OK, passed 100 tests.
      b /\ (a ==> b) = b:                           OK
        +++ OK, passed 100 tests.
      a ==> (b /\ c) = (a ==> b) /\ (a ==> c):      OK
        +++ OK, passed 100 tests.
      de Morgan 1:                                  OK
        +++ OK, passed 100 tests.
      weak de Morgan 2:                             OK
        +++ OK, passed 100 tests.
    de Morgan
      de Morgan 2:                                  OK
        +++ OK, passed 100 tests.
    Boolean
      LEM: neg x \/ x = top:                        OK
        +++ OK, passed 100 tests.
      DN: neg (neg x) = x:                          OK
        +++ OK, passed 100 tests.
  ZeroHalfOne
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        65% diff
        35% same
      transitive:                                   OK
        +++ OK, passed 100 tests (100% related).
      total:                                        OK
        +++ OK, passed 100 tests.
      leq/compare agree:                            OK
        +++ OK, passed 100 tests.
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
    Heyting
      neg default:                                  OK
        +++ OK, passed 100 tests.
      <=> default:                                  OK
        +++ OK, passed 100 tests.
      x ==> x = top:                                OK
        +++ OK, passed 100 tests.
      a /\ (a ==> b) = a /\ b:                      OK
        +++ OK, passed 100 tests.
      b /\ (a ==> b) = b:                           OK
        +++ OK, passed 100 tests.
      a ==> (b /\ c) = (a ==> b) /\ (a ==> c):      OK
        +++ OK, passed 100 tests.
      de Morgan 1:                                  OK
        +++ OK, passed 100 tests.
      weak de Morgan 2:                             OK
        +++ OK, passed 100 tests.
    de Morgan
      de Morgan 2:                                  OK
        +++ OK, passed 100 tests.
  Map Int (Ordered Int)
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        98% diff
         2% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        98% non-related
         2% related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
  IntMap (Ordered Int)
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        99% diff
         1% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        98% non-related
         2% related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
  HashMap Int (Ordered Int)
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        98% diff
         2% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        98% non-related
         2% related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
  Set Int8
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        99% diff
         1% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        95% non-related
         5% related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
    Heyting
      neg default:                                  OK
        +++ OK, passed 100 tests.
      <=> default:                                  OK
        +++ OK, passed 100 tests.
      x ==> x = top:                                OK
        +++ OK, passed 100 tests.
      a /\ (a ==> b) = a /\ b:                      OK
        +++ OK, passed 100 tests.
      b /\ (a ==> b) = b:                           OK
        +++ OK, passed 100 tests.
      a ==> (b /\ c) = (a ==> b) /\ (a ==> c):      OK
        +++ OK, passed 100 tests.
      de Morgan 1:                                  OK
        +++ OK, passed 100 tests.
      weak de Morgan 2:                             OK
        +++ OK, passed 100 tests.
    de Morgan
      de Morgan 2:                                  OK
        +++ OK, passed 100 tests.
    Boolean
      LEM: neg x \/ x = top:                        OK
        +++ OK, passed 100 tests.
      DN: neg (neg x) = x:                          OK
        +++ OK, passed 100 tests.
  HashSet Int8
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        99% diff
         1% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        96% non-related
         4% related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
    Heyting
      neg default:                                  OK
        +++ OK, passed 100 tests.
      <=> default:                                  OK
        +++ OK, passed 100 tests.
      x ==> x = top:                                OK
        +++ OK, passed 100 tests.
      a /\ (a ==> b) = a /\ b:                      OK
        +++ OK, passed 100 tests.
      b /\ (a ==> b) = b:                           OK
        +++ OK, passed 100 tests.
      a ==> (b /\ c) = (a ==> b) /\ (a ==> c):      OK
        +++ OK, passed 100 tests.
      de Morgan 1:                                  OK
        +++ OK, passed 100 tests.
      weak de Morgan 2:                             OK
        +++ OK, passed 100 tests.
    de Morgan
      de Morgan 2:                                  OK
        +++ OK, passed 100 tests.
    Boolean
      LEM: neg x \/ x = top:                        OK
        +++ OK, passed 100 tests.
      DN: neg (neg x) = x:                          OK
        +++ OK, passed 100 tests.
  Set Int
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        94% diff
         6% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        96% non-related
         4% related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  IntSet
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        99% diff
         1% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        97% non-related
         3% related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  HashSet Int
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        97% diff
         3% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        97% non-related
         3% related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  Ordered Int8
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        99% diff
         1% same
      transitive:                                   OK
        +++ OK, passed 100 tests (100% related).
      total:                                        OK
        +++ OK, passed 100 tests.
      leq/compare agree:                            OK
        +++ OK, passed 100 tests.
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
    Heyting
      neg default:                                  OK
        +++ OK, passed 100 tests.
      <=> default:                                  OK
        +++ OK, passed 100 tests.
      x ==> x = top:                                OK
        +++ OK, passed 100 tests.
      a /\ (a ==> b) = a /\ b:                      OK
        +++ OK, passed 100 tests.
      b /\ (a ==> b) = b:                           OK
        +++ OK, passed 100 tests.
      a ==> (b /\ c) = (a ==> b) /\ (a ==> c):      OK
        +++ OK, passed 100 tests.
      de Morgan 1:                                  OK
        +++ OK, passed 100 tests.
      weak de Morgan 2:                             OK
        +++ OK, passed 100 tests.
    de Morgan
      de Morgan 2:                                  OK
        +++ OK, passed 100 tests.
  Divisibility Int
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        91% diff
         9% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        94% non-related
         6% related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  Lexicographic (Ordered Int) (Ordered Int)
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        99% diff
         1% same
      transitive:                                   OK
        +++ OK, passed 100 tests (100% related).
      total:                                        OK
        +++ OK, passed 100 tests.
      leq/compare agree:                            OK
        +++ OK, passed 100 tests.
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
  Wide Int
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        99% diff
         1% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        91% non-related
         9% related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  Lexicographic (Set Bool) (Set Bool)
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        71% same
        29% diff
      transitive:                                   OK
        +++ OK, passed 100 tests:
        99% related
         1% non-related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  Lexicographic M2 M2
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        94% diff
         6% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        77% related
        23% non-related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  [Char]
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        99% diff
         1% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        96% non-related
         4% related
  (M2,M2)
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        90% diff
        10% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        76% non-related
        24% related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  Either M2 M2
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        87% diff
        13% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        88% related
        12% non-related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  Either M3 N5
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        93% diff
         7% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        79% related
        21% non-related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  All
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        54% same
        46% diff
      transitive:                                   OK
        +++ OK, passed 100 tests (100% related).
      total:                                        OK
        +++ OK, passed 100 tests.
      leq/compare agree:                            OK
        +++ OK, passed 100 tests.
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
    Heyting
      neg default:                                  OK
        +++ OK, passed 100 tests.
      <=> default:                                  OK
        +++ OK, passed 100 tests.
      x ==> x = top:                                OK
        +++ OK, passed 100 tests.
      a /\ (a ==> b) = a /\ b:                      OK
        +++ OK, passed 100 tests.
      b /\ (a ==> b) = b:                           OK
        +++ OK, passed 100 tests.
      a ==> (b /\ c) = (a ==> b) /\ (a ==> c):      OK
        +++ OK, passed 100 tests.
      de Morgan 1:                                  OK
        +++ OK, passed 100 tests.
      weak de Morgan 2:                             OK
        +++ OK, passed 100 tests.
    de Morgan
      de Morgan 2:                                  OK
        +++ OK, passed 100 tests.
    Boolean
      LEM: neg x \/ x = top:                        OK
        +++ OK, passed 100 tests.
      DN: neg (neg x) = x:                          OK
        +++ OK, passed 100 tests.
  Any
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        60% diff
        40% same
      transitive:                                   OK
        +++ OK, passed 100 tests (100% related).
      total:                                        OK
        +++ OK, passed 100 tests.
      leq/compare agree:                            OK
        +++ OK, passed 100 tests.
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
    Heyting
      neg default:                                  OK
        +++ OK, passed 100 tests.
      <=> default:                                  OK
        +++ OK, passed 100 tests.
      x ==> x = top:                                OK
        +++ OK, passed 100 tests.
      a /\ (a ==> b) = a /\ b:                      OK
        +++ OK, passed 100 tests.
      b /\ (a ==> b) = b:                           OK
        +++ OK, passed 100 tests.
      a ==> (b /\ c) = (a ==> b) /\ (a ==> c):      OK
        +++ OK, passed 100 tests.
      de Morgan 1:                                  OK
        +++ OK, passed 100 tests.
      weak de Morgan 2:                             OK
        +++ OK, passed 100 tests.
    de Morgan
      de Morgan 2:                                  OK
        +++ OK, passed 100 tests.
    Boolean
      LEM: neg x \/ x = top:                        OK
        +++ OK, passed 100 tests.
      DN: neg (neg x) = x:                          OK
        +++ OK, passed 100 tests.
  Endo Bool
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        80% diff
        20% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        71% related
        29% non-related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
    Heyting
      neg default:                                  OK
        +++ OK, passed 100 tests.
      <=> default:                                  OK
        +++ OK, passed 100 tests.
      x ==> x = top:                                OK
        +++ OK, passed 100 tests.
      a /\ (a ==> b) = a /\ b:                      OK
        +++ OK, passed 100 tests.
      b /\ (a ==> b) = b:                           OK
        +++ OK, passed 100 tests.
      a ==> (b /\ c) = (a ==> b) /\ (a ==> c):      OK
        +++ OK, passed 100 tests.
      de Morgan 1:                                  OK
        +++ OK, passed 100 tests.
      weak de Morgan 2:                             OK
        +++ OK, passed 100 tests.
    de Morgan
      de Morgan 2:                                  OK
        +++ OK, passed 100 tests.
    Boolean
      LEM: neg x \/ x = top:                        OK
        +++ OK, passed 100 tests.
      DN: neg (neg x) = x:                          OK
        +++ OK, passed 100 tests.
  Endo M3
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests (100% diff).
      transitive:                                   OK
        +++ OK, passed 100 tests (100% non-related).
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  Int8 -> Bool
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests (100% diff).
      transitive:                                   OK
        +++ OK, passed 100 tests (100% non-related).
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK (0.02s)
        +++ OK, passed 100 tests.
      join is upper bound:                          OK (0.02s)
        +++ OK, passed 100 tests.
      meet commutes:                                OK (0.01s)
        +++ OK, passed 100 tests.
      join commute:                                 OK (0.01s)
        +++ OK, passed 100 tests.
      meet associative:                             OK (0.01s)
        +++ OK, passed 100 tests.
      join associative:                             OK (0.01s)
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK (0.01s)
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK (0.02s)
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK (0.02s)
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK (0.02s)
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
    Heyting
      neg default:                                  OK
        +++ OK, passed 100 tests.
      <=> default:                                  OK (0.02s)
        +++ OK, passed 100 tests.
      x ==> x = top:                                OK
        +++ OK, passed 100 tests.
      a /\ (a ==> b) = a /\ b:                      OK (0.01s)
        +++ OK, passed 100 tests.
      b /\ (a ==> b) = b:                           OK (0.01s)
        +++ OK, passed 100 tests.
      a ==> (b /\ c) = (a ==> b) /\ (a ==> c):      OK (0.01s)
        +++ OK, passed 100 tests.
      de Morgan 1:                                  OK (0.01s)
        +++ OK, passed 100 tests.
      weak de Morgan 2:                             OK (0.01s)
        +++ OK, passed 100 tests.
    de Morgan
      de Morgan 2:                                  OK (0.01s)
        +++ OK, passed 100 tests.
    Boolean
      LEM: neg x \/ x = top:                        OK
        +++ OK, passed 100 tests.
      DN: neg (neg x) = x:                          OK
        +++ OK, passed 100 tests.
  Int8 -> M2
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests (100% diff).
      transitive:                                   OK
        +++ OK, passed 100 tests (100% non-related).
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK (0.02s)
        +++ OK, passed 100 tests.
      join is upper bound:                          OK (0.02s)
        +++ OK, passed 100 tests.
      meet commutes:                                OK (0.02s)
        +++ OK, passed 100 tests.
      join commute:                                 OK (0.02s)
        +++ OK, passed 100 tests.
      meet associative:                             OK (0.02s)
        +++ OK, passed 100 tests.
      join associative:                             OK (0.02s)
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK (0.01s)
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK (0.01s)
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK (0.02s)
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK (0.02s)
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK (0.02s)
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
    Heyting
      neg default:                                  OK
        +++ OK, passed 100 tests.
      <=> default:                                  OK (0.02s)
        +++ OK, passed 100 tests.
      x ==> x = top:                                OK
        +++ OK, passed 100 tests.
      a /\ (a ==> b) = a /\ b:                      OK (0.01s)
        +++ OK, passed 100 tests.
      b /\ (a ==> b) = b:                           OK (0.01s)
        +++ OK, passed 100 tests.
      a ==> (b /\ c) = (a ==> b) /\ (a ==> c):      OK (0.02s)
        +++ OK, passed 100 tests.
      de Morgan 1:                                  OK (0.01s)
        +++ OK, passed 100 tests.
      weak de Morgan 2:                             OK (0.01s)
        +++ OK, passed 100 tests.
    de Morgan
      de Morgan 2:                                  OK (0.01s)
        +++ OK, passed 100 tests.
    Boolean
      LEM: neg x \/ x = top:                        OK
        +++ OK, passed 100 tests.
      DN: neg (neg x) = x:                          OK
        +++ OK, passed 100 tests.
  Int8 -> M3
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests (100% diff).
      transitive:                                   OK
        +++ OK, passed 100 tests (100% non-related).
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK (0.02s)
        +++ OK, passed 100 tests.
      join is upper bound:                          OK (0.02s)
        +++ OK, passed 100 tests.
      meet commutes:                                OK (0.01s)
        +++ OK, passed 100 tests.
      join commute:                                 OK (0.01s)
        +++ OK, passed 100 tests.
      meet associative:                             OK (0.02s)
        +++ OK, passed 100 tests.
      join associative:                             OK (0.02s)
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK (0.01s)
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK (0.01s)
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK (0.02s)
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  Free Int8
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        99% diff
         1% same
      transitive:                                   OK
        +++ OK, passed 100 tests (100% non-related).
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK (0.01s)
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK (0.01s)
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK (0.01s)
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK (0.01s)
        +++ OK, passed 100 tests.
  Free Var
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        95% diff
         5% same
      transitive:                                   OK
        +++ OK, passed 100 tests:
        67% non-related
        33% related
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
    Heyting
      neg default:                                  OK
        +++ OK, passed 100 tests.
      <=> default:                                  OK
        +++ OK, passed 100 tests.
      x ==> x = top:                                OK
        +++ OK, passed 100 tests.
      a /\ (a ==> b) = a /\ b:                      OK
        +++ OK, passed 100 tests.
      b /\ (a ==> b) = b:                           OK
        +++ OK, passed 100 tests.
      a ==> (b /\ c) = (a ==> b) /\ (a ==> c):      OK (0.15s)
        +++ OK, passed 100 tests.
      de Morgan 1:                                  OK
        +++ OK, passed 100 tests.
      weak de Morgan 2:                             OK
        +++ OK, passed 100 tests.
  Dropped (Ordered Int)
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        96% diff
         4% same
      transitive:                                   OK
        +++ OK, passed 100 tests (100% related).
      total:                                        OK
        +++ OK, passed 100 tests.
      leq/compare agree:                            OK
        +++ OK, passed 100 tests.
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
  Levitated (Ordered Int)
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        93% diff
         7% same
      transitive:                                   OK
        +++ OK, passed 100 tests (100% related).
      total:                                        OK
        +++ OK, passed 100 tests.
      leq/compare agree:                            OK
        +++ OK, passed 100 tests.
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedMeetSemiLattice
      top /\ x = x:                                 OK
        +++ OK, passed 100 tests.
      x /\ top = x:                                 OK
        +++ OK, passed 100 tests.
      top \/ x = top:                               OK
        +++ OK, passed 100 tests.
      x \/ top = top:                               OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  Lifted (Ordered Int)
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        98% diff
         2% same
      transitive:                                   OK
        +++ OK, passed 100 tests (100% related).
      total:                                        OK
        +++ OK, passed 100 tests.
      leq/compare agree:                            OK
        +++ OK, passed 100 tests.
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
    BoundedJoinSemiLattice
      bottom \/ x = x:                              OK
        +++ OK, passed 100 tests.
      x \/ bottom = x:                              OK
        +++ OK, passed 100 tests.
      bottom /\ x = bottom:                         OK
        +++ OK, passed 100 tests.
      x /\ bottom = bottom:                         OK
        +++ OK, passed 100 tests.
  Op (Ordered Int)
    PartialOrd
      reflexive:                                    OK
        +++ OK, passed 100 tests.
      anti-symmetric:                               OK
        +++ OK, passed 100 tests:
        95% diff
         5% same
      transitive:                                   OK
        +++ OK, passed 100 tests (100% related).
      total:                                        OK
        +++ OK, passed 100 tests.
      leq/compare agree:                            OK
        +++ OK, passed 100 tests.
    Lattice
      leq = joinLeq:                                OK
        +++ OK, passed 100 tests.
      leq = meetLeq:                                OK
        +++ OK, passed 100 tests.
      meet is lower bound:                          OK
        +++ OK, passed 100 tests.
      join is upper bound:                          OK
        +++ OK, passed 100 tests.
      meet commutes:                                OK
        +++ OK, passed 100 tests.
      join commute:                                 OK
        +++ OK, passed 100 tests.
      meet associative:                             OK
        +++ OK, passed 100 tests.
      join associative:                             OK
        +++ OK, passed 100 tests.
      absorbtion 1:                                 OK
        +++ OK, passed 100 tests.
      absorbtion 2:                                 OK
        +++ OK, passed 100 tests.
      meet idempontent:                             OK
        +++ OK, passed 100 tests.
      join idempontent:                             OK
        +++ OK, passed 100 tests.
      comparableDef:                                OK
        +++ OK, passed 100 tests.
    Modular
      (y ∧ (x ∨ z)) ∨ z = (y ∨ z) ∧ (x ∨ z):        OK
        +++ OK, passed 100 tests.
    Distributive
      x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z):              OK
        +++ OK, passed 100 tests.
      x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z):              OK
        +++ OK, passed 100 tests.
  Lexicographic M2 M2 contains M3:                  OK
    +++ OK, passed 1 test.
  Monad laws: Dropped
    left identity:                                  OK
      +++ OK, passed 100 tests.
    right identity:                                 OK
      +++ OK, passed 100 tests.
    composition:                                    OK
      +++ OK, passed 100 tests.
    Applicative pure:                               OK
      +++ OK, passed 100 tests.
    Applicative ap:                                 OK
      +++ OK, passed 100 tests.
  Monad laws: Levitated
    left identity:                                  OK
      +++ OK, passed 100 tests.
    right identity:                                 OK
      +++ OK, passed 100 tests.
    composition:                                    OK
      +++ OK, passed 100 tests.
    Applicative pure:                               OK
      +++ OK, passed 100 tests.
    Applicative ap:                                 OK
      +++ OK, passed 100 tests.
  Monad laws: Lexicographic
    left identity:                                  OK
      +++ OK, passed 100 tests.
    right identity:                                 OK
      +++ OK, passed 100 tests.
    composition:                                    OK
      +++ OK, passed 100 tests.
    Applicative pure:                               OK
      +++ OK, passed 100 tests.
    Applicative ap:                                 OK
      +++ OK, passed 100 tests.
  Monad laws: Lifted
    left identity:                                  OK
      +++ OK, passed 100 tests.
    right identity:                                 OK
      +++ OK, passed 100 tests.
    composition:                                    OK
      +++ OK, passed 100 tests.
    Applicative pure:                               OK
      +++ OK, passed 100 tests.
    Applicative ap:                                 OK
      +++ OK, passed 100 tests.
  Monad laws: Op
    left identity:                                  OK
      +++ OK, passed 100 tests.
    right identity:                                 OK
      +++ OK, passed 100 tests.
    composition:                                    OK
      +++ OK, passed 100 tests.
    Applicative pure:                               OK
      +++ OK, passed 100 tests.
    Applicative ap:                                 OK
      +++ OK, passed 100 tests.
  Monad laws: Ordered
    left identity:                                  OK
      +++ OK, passed 100 tests.
    right identity:                                 OK
      +++ OK, passed 100 tests.
    composition:                                    OK
      +++ OK, passed 100 tests.
    Applicative pure:                               OK
      +++ OK, passed 100 tests.
    Applicative ap:                                 OK
      +++ OK, passed 100 tests.
  Monad laws: Wide
    left identity:                                  OK
      +++ OK, passed 100 tests.
    right identity:                                 OK
      +++ OK, passed 100 tests.
    composition:                                    OK
      +++ OK, passed 100 tests.
    Applicative pure:                               OK
      +++ OK, passed 100 tests.
    Applicative ap:                                 OK
      +++ OK, passed 100 tests.
  Monad laws: Heyting.Free
    left identity:                                  OK
      +++ OK, passed 100 tests.
    right identity:                                 OK
      +++ OK, passed 100 tests.
    composition:                                    OK
      +++ OK, passed 100 tests.
    Applicative pure:                               OK
      +++ OK, passed 100 tests.
    Applicative ap:                                 OK
      +++ OK, passed 100 tests.
  M2
    elem x universe:                                OK
      +++ OK, passed 100 tests.
    length pfx = length (nub pfx):                  OK
      +++ OK, passed 100 tests.
    elem x universeF:                               OK
      +++ OK, passed 100 tests.
    length (filter (== x) universeF) = 1:           OK
      +++ OK, passed 100 tests.
    cardinality = Tagged (genericLength universeF): OK
      +++ OK, passed 1 test.
  M3
    elem x universe:                                OK
      +++ OK, passed 100 tests.
    length pfx = length (nub pfx):                  OK
      +++ OK, passed 100 tests.
    elem x universeF:                               OK
      +++ OK, passed 100 tests.
    length (filter (== x) universeF) = 1:           OK
      +++ OK, passed 100 tests.
    cardinality = Tagged (genericLength universeF): OK
      +++ OK, passed 1 test.
  N5
    elem x universe:                                OK
      +++ OK, passed 100 tests.
    length pfx = length (nub pfx):                  OK
      +++ OK, passed 100 tests.
    elem x universeF:                               OK
      +++ OK, passed 100 tests.
    length (filter (== x) universeF) = 1:           OK
      +++ OK, passed 100 tests.
    cardinality = Tagged (genericLength universeF): OK
      +++ OK, passed 1 test.
  ZeroHalfOne
    elem x universe:                                OK
      +++ OK, passed 100 tests.
    length pfx = length (nub pfx):                  OK
      +++ OK, passed 100 tests.
    elem x universeF:                               OK
      +++ OK, passed 100 tests.
    length (filter (== x) universeF) = 1:           OK
      +++ OK, passed 100 tests.
    cardinality = Tagged (genericLength universeF): OK
      +++ OK, passed 1 test.
  Ordered Int8
    elem x universe:                                OK
      +++ OK, passed 100 tests.
    length pfx = length (nub pfx):                  OK
      +++ OK, passed 100 tests.
    elem x universeF:                               OK
      +++ OK, passed 100 tests.
    length (filter (== x) universeF) = 1:           OK
      +++ OK, passed 100 tests.
    cardinality = Tagged (genericLength universeF): OK
      +++ OK, passed 1 test.
  Divisibility Int8
    elem x universe:                                OK
      +++ OK, passed 100 tests.
    length pfx = length (nub pfx):                  OK
      +++ OK, passed 100 tests.
    elem x universeF:                               OK
      +++ OK, passed 100 tests.
    length (filter (== x) universeF) = 1:           OK
      +++ OK, passed 100 tests.
    cardinality = Tagged (genericLength universeF): OK
      +++ OK, passed 1 test.
  Wide Int8
    elem x universe:                                OK
      +++ OK, passed 100 tests.
    length pfx = length (nub pfx):                  OK
      +++ OK, passed 100 tests.
    elem x universeF:                               OK
      +++ OK, passed 100 tests.
    length (filter (== x) universeF) = 1:           OK
      +++ OK, passed 100 tests.
    cardinality = Tagged (genericLength universeF): OK
      +++ OK, passed 1 test.
  Dropped (Ordered Int8)
    elem x universe:                                OK
      +++ OK, passed 100 tests.
    length pfx = length (nub pfx):                  OK
      +++ OK, passed 100 tests.
    elem x universeF:                               OK
      +++ OK, passed 100 tests.
    length (filter (== x) universeF) = 1:           OK
      +++ OK, passed 100 tests.
    cardinality = Tagged (genericLength universeF): OK
      +++ OK, passed 1 test.
  Levitated (Ordered Int8)
    elem x universe:                                OK
      +++ OK, passed 100 tests.
    length pfx = length (nub pfx):                  OK
      +++ OK, passed 100 tests.
    elem x universeF:                               OK
      +++ OK, passed 100 tests.
    length (filter (== x) universeF) = 1:           OK
      +++ OK, passed 100 tests.
    cardinality = Tagged (genericLength universeF): OK
      +++ OK, passed 1 test.
  Lifted (Ordered Int8)
    elem x universe:                                OK
      +++ OK, passed 100 tests.
    length pfx = length (nub pfx):                  OK
      +++ OK, passed 100 tests.
    elem x universeF:                               OK
      +++ OK, passed 100 tests.
    length (filter (== x) universeF) = 1:           OK
      +++ OK, passed 100 tests.
    cardinality = Tagged (genericLength universeF): OK
      +++ OK, passed 1 test.
  Lexicographic (Ordered Int8) (Ordered Int8)
    elem x universe:                                OK (0.06s)
      +++ OK, passed 100 tests.
    length pfx = length (nub pfx):                  OK
      +++ OK, passed 100 tests.
    elem x universeF:                               OK (0.06s)
      +++ OK, passed 100 tests.
    length (filter (== x) universeF) = 1:           OK (0.10s)
      +++ OK, passed 100 tests.
    cardinality = Tagged (genericLength universeF): OK
      +++ OK, passed 1 test.

All 1173 tests passed (1.83s)
Test suite test: PASS
Test suite logged to:
/tmp/workdir-lattices/lattices-2.2.1/dist-newstyle/build/x86_64-linux/ghc-9.6.6/lattices-2.2.1/t/test/test/lattices-2.2.1-test.log
1 of 1 test suites (1 of 1 test cases) passed.
