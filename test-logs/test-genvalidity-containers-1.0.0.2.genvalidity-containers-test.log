Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - genvalidity-containers-1.0.0.2 (test:genvalidity-containers-test) (ephemeral targets)
Preprocessing test suite 'genvalidity-containers-test' for genvalidity-containers-1.0.0.2...
Building test suite 'genvalidity-containers-test' for genvalidity-containers-1.0.0.2...
Running 1 test suites...
Test suite genvalidity-containers-test: RUNNING...

Data.GenValidity.Containers.IntMap
  genIntMapOf
    produces valid maps [✔]
      +++ OK, passed 100 tests.
  GenValid (IntMap (Ratio Integer))
    genValid   :: Gen (IntMap (Ratio Integer))
      only generates valid '(IntMap (Ratio Integer))'s [✔]
        +++ OK, passed 100 tests.
  GenValid (IntMap (Ratio Integer))
    genValid   :: Gen (IntMap (Ratio Integer))
      only generates valid '(IntMap (Ratio Integer))'s [✔]
        +++ OK, passed 100 tests.
Data.GenValidity.Containers.Map
  genMapOf
    produces valid maps [✔]
      +++ OK, passed 100 tests.
  GenValid (Map Int (Ratio Integer))
    genValid   :: Gen (Map Int (Ratio Integer))
      only generates valid '(Map Int (Ratio Integer))'s [✔]
        +++ OK, passed 100 tests.
  GenValid (Map (Ratio Integer) (Ratio Integer))
    genValid   :: Gen (Map (Ratio Integer) (Ratio Integer))
      only generates valid '(Map (Ratio Integer) (Ratio Integer))'s [✔]
        +++ OK, passed 100 tests.
Data.GenValidity.Containers.Seq
  GenValid (Seq Int)
    genValid   :: Gen (Seq Int)
      only generates valid '(Seq Int)'s [✔]
        +++ OK, passed 100 tests.
  GenValid (Seq (Ratio Integer))
    genValid   :: Gen (Seq (Ratio Integer))
      only generates valid '(Seq (Ratio Integer))'s [✔]
        +++ OK, passed 100 tests.
Data.GenValidity.Containers.Set
  genSetOf
    produces valid sets [✔]
      +++ OK, passed 100 tests.
  GenValid (Set Int)
    genValid   :: Gen (Set Int)
      only generates valid '(Set Int)'s [✔]
        +++ OK, passed 100 tests.
  GenValid (Set (Ratio Integer))
    genValid   :: Gen (Set (Ratio Integer))
      only generates valid '(Set (Ratio Integer))'s [✔]
        +++ OK, passed 100 tests.
  genSeperate
    generates values that are seperate [✔]
      +++ OK, passed 100 tests.
    generates values that are seperate [✔]
      +++ OK, passed 100 tests.
  genSeperateFor
    generates values that are seperate [✔]
      +++ OK, passed 100 tests.
    generates values that are seperate [✔]
      +++ OK, passed 100 tests.
  genValidSeperateFor
    generates values that are seperate [✔]
      +++ OK, passed 100 tests.
Data.GenValidity.Containers.Tree
  GenValid (Tree Int)
    genValid   :: Gen (Tree Int)
      only generates valid '(Tree Int)'s [✔]
        +++ OK, passed 100 tests.
  GenValid (Tree (Ratio Integer))
    genValid   :: Gen (Tree (Ratio Integer))
      only generates valid '(Tree (Ratio Integer))'s [✔]
        +++ OK, passed 100 tests.

Finished in 0.0294 seconds
18 examples, 0 failures
Test suite genvalidity-containers-test: PASS
Test suite logged to:
/tmp/workdir-genvalidity-containers/genvalidity-containers-1.0.0.2/dist-newstyle/build/x86_64-linux/ghc-9.6.6/genvalidity-containers-1.0.0.2/t/genvalidity-containers-test/test/genvalidity-containers-1.0.0.2-genvalidity-containers-test.log
1 of 1 test suites (1 of 1 test cases) passed.
