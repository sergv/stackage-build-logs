Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - flay-0.4 (lib) (first run)
 - flay-0.4 (test:tests) (first run)
Warning: flay.cabal:12:22: Packages with 'cabal-version: 1.12' or later should
specify a specific version of the Cabal spec of the form 'cabal-version: x.y'.
Use 'cabal-version: 1.18'.
Configuring library for flay-0.4...
Preprocessing library for flay-0.4...
Building library for flay-0.4...
[1 of 1] Compiling Flay

src/Flay.hs:357:49: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
357 | type Flay (c :: k -> Constraint) s t (f :: k -> *) (g :: k -> *)
    |                                                 ^

src/Flay.hs:357:63: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
357 | type Flay (c :: k -> Constraint) s t (f :: k -> *) (g :: k -> *)
    |                                                               ^

src/Flay.hs:404:54: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
404 | class Flayable (c :: k -> Constraint) s t (f :: k -> *) (g :: k -> *)
    |                                                      ^

src/Flay.hs:404:68: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
404 | class Flayable (c :: k -> Constraint) s t (f :: k -> *) (g :: k -> *)
    |                                                                    ^

src/Flay.hs:444:58: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
444 | type family Flayable1 (c :: k -> Constraint) (r :: (k -> *) -> *) :: Constraint where
    |                                                          ^

src/Flay.hs:444:64: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
444 | type family Flayable1 (c :: k -> Constraint) (r :: (k -> *) -> *) :: Constraint where
    |                                                                ^

src/Flay.hs:449:52: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
449 |   => Flayable1_ (c :: k -> Constraint) (r :: (k -> *) -> *)
    |                                                    ^

src/Flay.hs:449:58: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
449 |   => Flayable1_ (c :: k -> Constraint) (r :: (k -> *) -> *)
    |                                                          ^

src/Flay.hs:456:52: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
456 |   => Flayable1K (c :: k -> Constraint) (r :: (k -> *) -> *) (x :: *)
    |                                                    ^

src/Flay.hs:456:58: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
456 |   => Flayable1K (c :: k -> Constraint) (r :: (k -> *) -> *) (x :: *)
    |                                                          ^

src/Flay.hs:456:67: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
456 |   => Flayable1K (c :: k -> Constraint) (r :: (k -> *) -> *) (x :: *)
    |                                                                   ^

src/Flay.hs:541:50: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
541 | type GFlay (c :: k -> Constraint) s t (f :: k -> *) (g :: k -> *)
    |                                                  ^

src/Flay.hs:541:64: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
541 | type GFlay (c :: k -> Constraint) s t (f :: k -> *) (g :: k -> *)
    |                                                                ^

src/Flay.hs:544:72: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
544 | gflay :: GFlay c s t f g => Flay (c :: k -> Constraint) s t (f :: k -> *) (g :: k -> *)
    |                                                                        ^

src/Flay.hs:544:86: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
544 | gflay :: GFlay c s t f g => Flay (c :: k -> Constraint) s t (f :: k -> *) (g :: k -> *)
    |                                                                                      ^

src/Flay.hs:548:52: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
548 | class GFlay' (c :: k -> Constraint) s t (f :: k -> *) (g :: k -> *) where
    |                                                    ^

src/Flay.hs:548:66: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
548 | class GFlay' (c :: k -> Constraint) s t (f :: k -> *) (g :: k -> *) where
    |                                                                  ^

src/Flay.hs:660:23: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
660 | class GTerminal (f :: * -> *) where
    |                       ^

src/Flay.hs:660:28: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
660 | class GTerminal (f :: * -> *) where
    |                            ^

src/Flay.hs:762:31: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a lambda abstraction:
        Patterns of type ‘[Dynamic]’ not matched: []
    |
762 |    f2 = \Dict !ga -> StateT $ \(x:xs) -> do
    |                               ^^^^^^^^^^^^^...

src/Flay.hs:898:25: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
898 | class GPump' (s :: k -> *) (f :: * -> *) where
    |                         ^

src/Flay.hs:898:34: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
898 | class GPump' (s :: k -> *) (f :: * -> *) where
    |                                  ^

src/Flay.hs:898:39: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
898 | class GPump' (s :: k -> *) (f :: * -> *) where
    |                                       ^

src/Flay.hs:899:28: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
899 |   type GPumped s f :: k -> *
    |                            ^

src/Flay.hs:1004:57: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
     |
1004 | type family GFields (c :: kc -> Constraint) (s :: ks -> *) :: Constraint where
     |                                                         ^

src/Flay.hs:1045:56: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
     |
1045 | type family FieldsF (c :: k -> Constraint) (r :: (k -> *) -> *) :: Constraint where
     |                                                        ^

src/Flay.hs:1045:62: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
     |
1045 | type family FieldsF (c :: k -> Constraint) (r :: (k -> *) -> *) :: Constraint where
     |                                                              ^

src/Flay.hs:1056:57: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
     |
1056 | type family GFieldsF (c :: k -> Constraint) (s :: ks -> *) (f :: k -> *) :: Constraint where
     |                                                         ^

src/Flay.hs:1056:71: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
     |
1056 | type family GFieldsF (c :: k -> Constraint) (s :: ks -> *) (f :: k -> *) :: Constraint where
     |                                                                       ^
Warning: flay.cabal:12:22: Packages with 'cabal-version: 1.12' or later should
specify a specific version of the Cabal spec of the form 'cabal-version: x.y'.
Use 'cabal-version: 1.18'.
Configuring test suite 'tests' for flay-0.4...
Preprocessing test suite 'tests' for flay-0.4...
Building test suite 'tests' for flay-0.4...
[1 of 1] Compiling Main

tests/Main.hs:36:37: error: [GHC-83865]
    • Expecting one more argument to ‘Trivial’
      Expected a type, but ‘Trivial’ has kind ‘k1 -> Constraint’
    • In the type ‘Trivial’
      In the expression: flay @Trivial
      In an equation for ‘_test_flay_TypeApplications’:
          _test_flay_TypeApplications = flay @Trivial
   |
36 | _test_flay_TypeApplications = flay @Trivial
   |                                     ^^^^^^^

tests/Main.hs:140:33: error: [GHC-83865]
    • Expecting one more argument to ‘Trivial’
      Expected a type, but ‘Trivial’ has kind ‘k0 -> Constraint’
    • In the type ‘Trivial’
      In the second argument of ‘(===)’, namely
        ‘flay @Trivial (const pure) foo’
      In the expression: Identity foo === flay @Trivial (const pure) foo
    |
140 |          Identity foo === flay @Trivial (const pure) foo
    |                                 ^^^^^^^
Error: [Cabal-7125]
Failed to build test:tests from flay-0.4.

