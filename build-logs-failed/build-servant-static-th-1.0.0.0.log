Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - servant-static-th-1.0.0.0 (lib) (first run)
 - servant-static-th-1.0.0.0 (test:servant-static-th-doctest) (first run)
 - servant-static-th-1.0.0.0 (test:servant-static-th-test) (first run)
Configuring library for servant-static-th-1.0.0.0...
Preprocessing library for servant-static-th-1.0.0.0...
Building library for servant-static-th-1.0.0.0...
[1 of 7] Compiling Servant.Static.TH.Internal.FileTree

src/Servant/Static/TH/Internal/FileTree.hs:21:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
21 | import Data.Monoid ((<>))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
[2 of 7] Compiling Servant.Static.TH.Internal.Util
[3 of 7] Compiling Servant.Static.TH.Internal.Mime

src/Servant/Static/TH/Internal/Mime.hs:30:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
30 | import Data.Monoid ((<>))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^

src/Servant/Static/TH/Internal/Mime.hs:79:7: warning: [GHC-55524] [-Wmonomorphism-restriction]
    • The Monomorphism Restriction applies to the binding
      for ‘stringExp’
    • In the expression:
        let
          stringExp
            = stringE . unpack $ decodeUtf8With lenientDecode byteString
          packedExp = appE (varE 'pack) stringExp
          byteStringExp = appE (varE 'encodeUtf8) packedExp
        in appE (varE 'pure) byteStringExp
      In an equation for ‘utf8ByteStringToExp’:
          utf8ByteStringToExp byteString
            = let
                stringExp
                  = stringE . unpack $ decodeUtf8With lenientDecode byteString
                packedExp = appE (varE ...) stringExp
                ....
              in appE (varE 'pure) byteStringExp
    Suggested fix: Consider giving ‘stringExp’ a type signature
   |
79 |   let stringExp = stringE . unpack $ decodeUtf8With lenientDecode byteString
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[4 of 7] Compiling Servant.Static.TH.Internal.Server

src/Servant/Static/TH/Internal/Server.hs:7:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
  |
7 | import Data.Foldable (foldl1)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Servant/Static/TH/Internal/Server.hs:8:1: warning: [-Wunused-imports]
    The import of ‘:|’ from module ‘Data.List.NonEmpty’ is redundant
  |
8 | import Data.List.NonEmpty (NonEmpty((:|)))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Servant/Static/TH/Internal/Server.hs:129:7: warning: [GHC-55524] [-Wmonomorphism-restriction]
    • The Monomorphism Restriction applies to the binding
      for ‘sigTypeQ’
    • In the expression:
        let
          funcName = mkName serverName
          sigTypeQ
            = [t| forall m.
                  Applicative m => ServerT $(conT (mkName apiName)) m |]
              pending(rn) [<spn, conT (mkName apiName)>]
          signatureQ = sigD funcName sigTypeQ
          ....
        in sequence [signatureQ, funcQ]
      In an equation for ‘createServerDec’:
          createServerDec apiName serverName templateDir
            = let
                funcName = mkName serverName
                sigTypeQ = ...
                ....
              in sequence [signatureQ, funcQ]
    Suggested fix: Consider giving ‘sigTypeQ’ a type signature
    |
129 |       sigTypeQ =
    |       ^^^^^^^^^^...
[5 of 7] Compiling Servant.Static.TH.Internal.Api

src/Servant/Static/TH/Internal/Api.hs:8:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
  |
8 | import Data.Foldable (foldl1)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Servant/Static/TH/Internal/Api.hs:25:7: warning: [GHC-55524] [-Wmonomorphism-restriction]
    • The Monomorphism Restriction applies to the binding
      for ‘fileNameLitT’
    • In the expression:
        do addDependentFile filePath
           MimeTypeInfo mimeT respT _ <- extensionToMimeTypeInfoEx filePath
           let fileName = takeFileName filePath
           let fileNameLitT = litT $ strTyLit fileName
           ....
      In an equation for ‘fileTreeToApiType’:
          fileTreeToApiType (FileTreeFile filePath _)
            = do addDependentFile filePath
                 MimeTypeInfo mimeT respT _ <- extensionToMimeTypeInfoEx filePath
                 let fileName = ...
                 ....
    Suggested fix: Consider giving ‘fileNameLitT’ a type signature
   |
25 |   let fileNameLitT = litT $ strTyLit fileName
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Servant/Static/TH/Internal/Api.hs:32:7: warning: [GHC-55524] [-Wmonomorphism-restriction]
    • The Monomorphism Restriction applies to the binding
      for ‘fileNameLitT’
    • In the expression:
        let fileNameLitT = litT $ strTyLit $ takeFileName filePath
        in
          [t| $(fileNameLitT)
              :> $(combineWithServantOrT nonEmptyApiTypesQ) |]
          pending(rn) [<spn, combineWithServantOrT nonEmptyApiTypesQ>,
                       <spn, fileNameLitT>]
      In an equation for ‘fileTreeToApiType’:
          fileTreeToApiType (FileTreeDir filePath fileTrees)
            = let fileNameLitT = litT $ strTyLit $ takeFileName filePath
              in
                [t| $(fileNameLitT)
                    :> $(combineWithServantOrT nonEmptyApiTypesQ) |]
                pending(rn) [<spn, combineWithServantOrT nonEmptyApiTypesQ>,
                             <spn, fileNameLitT>]
            where
                nonEmptyApiTypesQ :: NonEmpty (Q Type)
                nonEmptyApiTypesQ = fmap fileTreeToApiType fileTrees
    Suggested fix: Consider giving ‘fileNameLitT’ a type signature
   |
32 |   let fileNameLitT = litT $ strTyLit $ takeFileName filePath
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[6 of 7] Compiling Servant.Static.TH.Internal
[7 of 7] Compiling Servant.Static.TH
Configuring test suite 'servant-static-th-doctest' for servant-static-th-1.0.0.0...
Preprocessing test suite 'servant-static-th-doctest' for servant-static-th-1.0.0.0...
Building test suite 'servant-static-th-doctest' for servant-static-th-1.0.0.0...
[1 of 1] Compiling Main

test/DocTest.hs:6:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
  |
6 | import Data.Monoid ((<>))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^
[2 of 2] Linking /tmp/workdir-servant-static-th/servant-static-th-1.0.0.0/dist-newstyle/build/x86_64-linux/ghc-9.6.6/servant-static-th-1.0.0.0/t/servant-static-th-doctest/build/servant-static-th-doctest/servant-static-th-doctest
Configuring test suite 'servant-static-th-test' for servant-static-th-1.0.0.0...
Preprocessing test suite 'servant-static-th-test' for servant-static-th-1.0.0.0...
Building test suite 'servant-static-th-test' for servant-static-th-1.0.0.0...
[1 of 6] Compiling Spec.TastyHelpers
[2 of 6] Compiling Spec.TestDirLocation
[3 of 6] Compiling Spec.ServerSpec

test/Spec/ServerSpec.hs:15:36: error:
    Module ‘Test.Tasty.Hspec’ does not export ‘it’
   |
15 | import Test.Tasty.Hspec (testSpec, it)
   |                                    ^^
[4 of 6] Compiling Spec.HelperFuncSpec
[5 of 6] Compiling Spec.ApiSpec

test/Spec/ApiSpec.hs:36:24: error: [GHC-83865]
    • Couldn't match type: ("dir"
                            :> (("inner-file.html" :> Get '[HTML] Html)
                                :<|> ("test.js" :> Get '[JS] ByteString)))
                           :<|> ("hello.html" :> Get '[HTML] Html)
                     with: "dir"
                           :> (("inner-file.html" :> Get '[HTML] Html)
                               :<|> ("test.js" :> Get '[JS] ByteString))
      Expected: ExpectedFrontEndApi :~: FrontEndApi
        Actual: ExpectedFrontEndApi :~: ExpectedFrontEndApi
      Type synonyms expanded:
      Expected type: ExpectedFrontEndApi
                     :~: (("dir"
                           :> (("inner-file.html" :> Get '[HTML] Html)
                               :<|> ("test.js" :> Get '[JS] ByteString)))
                          :<|> ("hello.html" :> Get '[HTML] Html))
        Actual type: ExpectedFrontEndApi
                     :~: ((("dir"
                            :> (("inner-file.html" :> Get '[HTML] Html)
                                :<|> ("test.js" :> Get '[JS] ByteString)))
                           :<|> ("hello.html" :> Get '[HTML] Html))
                          :<|> (Get '[HTML] Html :<|> ("index.html" :> Get '[HTML] Html)))
    • In the expression: Refl
      In an equation for ‘checkFrontEndApiType’:
          checkFrontEndApiType = Refl
   |
36 | checkFrontEndApiType = Refl
   |                        ^^^^

test/Spec/ApiSpec.hs:40:59: error: [GHC-83865]
    • Couldn't match type: ("dir"
                            :> (("inner-file.html" :> Get '[HTML] Html)
                                :<|> ("test.js" :> Get '[JS] ByteString)))
                           :<|> ("hello.html" :> Get '[HTML] Html)
                     with: "dir"
                           :> (("inner-file.html" :> Get '[HTML] Html)
                               :<|> ("test.js" :> Get '[JS] ByteString))
      Expected: ExpectedFrontEndApi :~: FrontEndApi
        Actual: ExpectedFrontEndApi :~: ExpectedFrontEndApi
      Type synonyms expanded:
      Expected type: ExpectedFrontEndApi
                     :~: (("dir"
                           :> (("inner-file.html" :> Get '[HTML] Html)
                               :<|> ("test.js" :> Get '[JS] ByteString)))
                          :<|> ("hello.html" :> Get '[HTML] Html))
        Actual type: ExpectedFrontEndApi
                     :~: ((("dir"
                            :> (("inner-file.html" :> Get '[HTML] Html)
                                :<|> ("test.js" :> Get '[JS] ByteString)))
                           :<|> ("hello.html" :> Get '[HTML] Html))
                          :<|> (Get '[HTML] Html :<|> ("index.html" :> Get '[HTML] Html)))
    • In the second argument of ‘(@?=)’, namely ‘Refl’
      In the second argument of ‘($)’, namely
        ‘checkFrontEndApiType @?= Refl’
      In the expression:
        testCase "created correctly" $ checkFrontEndApiType @?= Refl
   |
40 |   testCase "created correctly" $ checkFrontEndApiType @?= Refl
   |                                                           ^^^^
Error: [Cabal-7125]
Failed to build test:servant-static-th-test from servant-static-th-1.0.0.0.

