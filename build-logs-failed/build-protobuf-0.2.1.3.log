Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - protobuf-0.2.1.3 (lib) (first run)
 - protobuf-0.2.1.3 (test:protobuf-test) (first run)
Configuring library for protobuf-0.2.1.3...
Preprocessing library for protobuf-0.2.1.3...
Building library for protobuf-0.2.1.3...
[1 of 8] Compiling Data.ProtocolBuffers.Orphans
[2 of 8] Compiling Data.ProtocolBuffers.Types

src/Data/ProtocolBuffers/Types.hs:31:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
   |
31 | import Data.Foldable as Fold
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/ProtocolBuffers/Types.hs:33:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
   |
33 | import Data.Semigroup (Semigroup(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/ProtocolBuffers/Types.hs:34:1: warning: [-Wunused-imports]
    The import of ‘Data.Traversable’ is redundant
      except perhaps to import instances from ‘Data.Traversable’
    To import instances alone, use: import Data.Traversable()
   |
34 | import Data.Traversable
   | ^^^^^^^^^^^^^^^^^^^^^^^

src/Data/ProtocolBuffers/Types.hs:103:23: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
103 |   type FieldType a :: *
    |                       ^

src/Data/ProtocolBuffers/Types.hs:164:39: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
164 | type family Optional (n :: Nat) (a :: *) :: *
    |                                       ^

src/Data/ProtocolBuffers/Types.hs:164:45: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
164 | type family Optional (n :: Nat) (a :: *) :: *
    |                                             ^

src/Data/ProtocolBuffers/Types.hs:169:39: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
169 | type family Required (n :: Nat) (a :: *) :: *
    |                                       ^

src/Data/ProtocolBuffers/Types.hs:169:45: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
169 | type family Required (n :: Nat) (a :: *) :: *
    |                                             ^
[3 of 8] Compiling Data.ProtocolBuffers.Wire
[4 of 8] Compiling Data.ProtocolBuffers.Encode

src/Data/ProtocolBuffers/Encode.hs:42:20: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
42 | class Encode (a :: *) where
   |                    ^

src/Data/ProtocolBuffers/Encode.hs:52:21: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
52 | class GEncode (f :: * -> *) where
   |                     ^

src/Data/ProtocolBuffers/Encode.hs:52:26: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
52 | class GEncode (f :: * -> *) where
   |                          ^
[5 of 8] Compiling Data.ProtocolBuffers.Decode

src/Data/ProtocolBuffers/Decode.hs:28:1: warning: [-Wunused-imports]
    The import of ‘Data.Traversable’ is redundant
      except perhaps to import instances from ‘Data.Traversable’
    To import instances alone, use: import Data.Traversable()
   |
28 | import Data.Traversable (traverse)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/ProtocolBuffers/Decode.hs:45:44: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a lambda abstraction:
        Patterns of type ‘[WireField]’, ‘[WireField]’ not matched:
            [] _
            (_:_:_) _
   |
45 |       Just v  -> go $! HashMap.insertWith (\(x:[]) xs -> x:xs) (wireFieldTag v) [v] msg
   |                                            ^^^^^^^^^^^^^^^^^^

src/Data/ProtocolBuffers/Decode.hs:61:20: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
61 | class Decode (a :: *) where
   |                    ^

src/Data/ProtocolBuffers/Decode.hs:70:21: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
70 | class GDecode (f :: * -> *) where
   |                     ^

src/Data/ProtocolBuffers/Decode.hs:70:26: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
70 | class GDecode (f :: * -> *) where
   |                          ^
[6 of 8] Compiling Data.ProtocolBuffers.Message

src/Data/ProtocolBuffers/Message.hs:20:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
20 | import Data.Monoid hiding ((<>))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/ProtocolBuffers/Message.hs:23:1: warning: [-Wunused-imports]
    The import of ‘Data.Traversable’ is redundant
      except perhaps to import instances from ‘Data.Traversable’
    To import instances alone, use: import Data.Traversable()
   |
23 | import Data.Traversable
   | ^^^^^^^^^^^^^^^^^^^^^^^

src/Data/ProtocolBuffers/Message.hs:24:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
   |
24 | import Data.Semigroup (Semigroup(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/ProtocolBuffers/Message.hs:113:28: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
113 | class GMessageMonoid (f :: * -> *) where
    |                            ^

src/Data/ProtocolBuffers/Message.hs:113:33: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
113 | class GMessageMonoid (f :: * -> *) where
    |                                 ^
[7 of 8] Compiling Data.ProtocolBuffers.Internal
[8 of 8] Compiling Data.ProtocolBuffers
Configuring test suite 'protobuf-test' for protobuf-0.2.1.3...
Preprocessing test suite 'protobuf-test' for protobuf-0.2.1.3...
Building test suite 'protobuf-test' for protobuf-0.2.1.3...
[1 of 1] Compiling Main

tests/Main.hs:426:30: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely ‘unhex "089601"’
      In the expression: testSpecific msg =<< unhex "089601"
      In an equation for ‘test1’:
          test1
            = testSpecific msg =<< unhex "089601"
            where
                msg = Test1 {test1_a = putField 150}
    |
426 | test1 = testSpecific msg =<< unhex "089601" where
    |                              ^^^^^^^^^^^^^^

tests/Main.hs:436:30: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely
        ‘unhex "120774657374696e67"’
      In the expression: testSpecific msg =<< unhex "120774657374696e67"
      In an equation for ‘test2’:
          test2
            = testSpecific msg =<< unhex "120774657374696e67"
            where
                msg = Test2 {test2_b = putField "testing"}
    |
436 | test2 = testSpecific msg =<< unhex "120774657374696e67" where
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/Main.hs:444:30: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely ‘unhex "1a03089601"’
      In the expression: testSpecific msg =<< unhex "1a03089601"
      In an equation for ‘test3’:
          test3
            = testSpecific msg =<< unhex "1a03089601"
            where
                msg = Test3 {test3_c = putField Test1 {test1_a = putField 150}}
    |
444 | test3 = testSpecific msg =<< unhex "1a03089601" where
    |                              ^^^^^^^^^^^^^^^^^^

tests/Main.hs:452:30: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely
        ‘unhex "2206038e029ea705"’
      In the expression: testSpecific msg =<< unhex "2206038e029ea705"
      In an equation for ‘test4’:
          test4
            = testSpecific msg =<< unhex "2206038e029ea705"
            where
                msg = Test4 {test4_d = putField [...]}
    |
452 | test4 = testSpecific msg =<< unhex "2206038e029ea705" where
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^

tests/Main.hs:456:36: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely ‘unhex ""’
      In the expression: testSpecific msg =<< unhex ""
      In an equation for ‘test4_empty’:
          test4_empty
            = testSpecific msg =<< unhex ""
            where
                msg = Test4 {test4_d = putField mempty}
    |
456 | test4_empty = testSpecific msg =<< unhex "" where
    |                                    ^^^^^^^^

tests/Main.hs:475:30: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely ‘unhex ""’
      In the expression: testSpecific msg =<< unhex ""
      In an equation for ‘test5’:
          test5
            = testSpecific msg =<< unhex ""
            where
                msg = Test5 {test5_e = putField Nothing}
    |
475 | test5 = testSpecific msg =<< unhex "" where
    |                              ^^^^^^^^

tests/Main.hs:479:30: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely ‘unhex "2800"’
      In the expression: testSpecific msg =<< unhex "2800"
      In an equation for ‘test6’:
          test6
            = testSpecific msg =<< unhex "2800"
            where
                msg = Test5 {test5_e = putField $ Just Test5A}
    |
479 | test6 = testSpecific msg =<< unhex "2800" where
    |                              ^^^^^^^^^^^^

tests/Main.hs:483:30: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely ‘unhex "2801"’
      In the expression: testSpecific msg =<< unhex "2801"
      In an equation for ‘test7’:
          test7
            = testSpecific msg =<< unhex "2801"
            where
                msg = Test5 {test5_e = putField $ Just Test5B}
    |
483 | test7 = testSpecific msg =<< unhex "2801" where
    |                              ^^^^^^^^^^^^

tests/Main.hs:487:30: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely ‘unhex ""’
      In the expression: testSpecific msg =<< unhex ""
      In an equation for ‘test8’:
          test8
            = testSpecific msg =<< unhex ""
            where
                msg = Test6 {test6_e = putField $ []}
    |
487 | test8 = testSpecific msg =<< unhex "" where
    |                              ^^^^^^^^

tests/Main.hs:491:30: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely ‘unhex "3000"’
      In the expression: testSpecific msg =<< unhex "3000"
      In an equation for ‘test9’:
          test9
            = testSpecific msg =<< unhex "3000"
            where
                msg = Test6 {test6_e = putField $ [...]}
    |
491 | test9 = testSpecific msg =<< unhex "3000" where
    |                              ^^^^^^^^^^^^

tests/Main.hs:495:31: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely ‘unhex "30003001"’
      In the expression: testSpecific msg =<< unhex "30003001"
      In an equation for ‘test10’:
          test10
            = testSpecific msg =<< unhex "30003001"
            where
                msg = Test6 {test6_e = putField $ [...]}
    |
495 | test10 = testSpecific msg =<< unhex "30003001" where
    |                               ^^^^^^^^^^^^^^^^

tests/Main.hs:499:31: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely ‘unhex "30003000"’
      In the expression: testSpecific msg =<< unhex "30003000"
      In an equation for ‘test11’:
          test11
            = testSpecific msg =<< unhex "30003000"
            where
                msg = Test6 {test6_e = putField $ [...]}
    |
499 | test11 = testSpecific msg =<< unhex "30003000" where
    |                               ^^^^^^^^^^^^^^^^

tests/Main.hs:503:31: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely ‘unhex "300030013000"’
      In the expression: testSpecific msg =<< unhex "300030013000"
      In an equation for ‘test12’:
          test12
            = testSpecific msg =<< unhex "300030013000"
            where
                msg = Test6 {test6_e = putField $ [...]}
    |
503 | test12 = testSpecific msg =<< unhex "300030013000" where
    |                               ^^^^^^^^^^^^^^^^^^^^

tests/Main.hs:507:31: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely ‘unhex ""’
      In the expression: testSpecific msg =<< unhex ""
      In an equation for ‘test13’:
          test13
            = testSpecific msg =<< unhex ""
            where
                msg = Test7 {test7_e = putField $ []}
    |
507 | test13 = testSpecific msg =<< unhex "" where
    |                               ^^^^^^^^

tests/Main.hs:511:31: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely ‘unhex "3800"’
      In the expression: testSpecific msg =<< unhex "3800"
      In an equation for ‘test14’:
          test14
            = testSpecific msg =<< unhex "3800"
            where
                msg = Test7 {test7_e = putField $ [...]}
    |
511 | test14 = testSpecific msg =<< unhex "3800" where
    |                               ^^^^^^^^^^^^

tests/Main.hs:515:31: error: [GHC-83865]
    • Couldn't match type ‘Either String’ with ‘IO’
      Expected: IO B.ByteString
        Actual: Either String B.ByteString
    • In the second argument of ‘(=<<)’, namely ‘unhex "38003800"’
      In the expression: testSpecific msg =<< unhex "38003800"
      In an equation for ‘test15’:
          test15
            = testSpecific msg =<< unhex "38003800"
            where
                msg = Test7 {test7_e = putField $ [...]}
    |
515 | test15 = testSpecific msg =<< unhex "38003800" where
    |                               ^^^^^^^^^^^^^^^^
Error: [Cabal-7125]
Failed to build test:protobuf-test from protobuf-0.2.1.3.

