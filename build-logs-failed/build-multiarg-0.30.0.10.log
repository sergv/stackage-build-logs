Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - multiarg-0.30.0.10 (lib) (first run)
 - multiarg-0.30.0.10 (test:multiarg-tests) (first run)
Warning: multiarg.cabal:11:23: Packages with 'cabal-version: 1.12' or later
should specify a specific version of the Cabal spec of the form
'cabal-version: x.y'. Use 'cabal-version: 1.18'.
Configuring library for multiarg-0.30.0.10...
Warning: [no-default-language] Packages using 'cabal-version: >= 1.10' and
before 'cabal-version: 3.4' must specify the 'default-language' field for each
component (e.g. Haskell98 or Haskell2010). If a component uses different
languages in different modules then list the other ones in the
'other-languages' field.
Preprocessing library for multiarg-0.30.0.10...
Building library for multiarg-0.30.0.10...
[ 1 of 12] Compiling Multiarg.Examples
[ 2 of 12] Compiling Multiarg.Types
[ 3 of 12] Compiling Multiarg.Maddash
[ 4 of 12] Compiling Multiarg.Limeline
[ 5 of 12] Compiling Multiarg.Util
[ 6 of 12] Compiling Multiarg.Internal
[ 7 of 12] Compiling Multiarg.Mode.Internal
[ 8 of 12] Compiling Multiarg.Mode
[ 9 of 12] Compiling Multiarg.Examples.Grover

lib/Multiarg/Examples/Grover.hs:24:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
24 | import Control.Applicative
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
[10 of 12] Compiling Multiarg
[11 of 12] Compiling Multiarg.Examples.Telly
[12 of 12] Compiling Multiarg.Vocabulary
Warning: multiarg.cabal:11:23: Packages with 'cabal-version: 1.12' or later
should specify a specific version of the Cabal spec of the form
'cabal-version: x.y'. Use 'cabal-version: 1.18'.
Configuring test suite 'multiarg-tests' for multiarg-0.30.0.10...
Warning: [no-default-language] Packages using 'cabal-version: >= 1.10' and
before 'cabal-version: 3.4' must specify the 'default-language' field for each
component (e.g. Haskell98 or Haskell2010). If a component uses different
languages in different modules then list the other ones in the
'other-languages' field.
Preprocessing test suite 'multiarg-tests' for multiarg-0.30.0.10...
Building test suite 'multiarg-tests' for multiarg-0.30.0.10...
[ 1 of 20] Compiling Multiarg.Examples
[ 2 of 20] Compiling Multiarg.Types
[ 3 of 20] Compiling Multiarg.Maddash
[ 4 of 20] Compiling Makeopt
[ 5 of 20] Compiling Multiarg.Limeline
[ 6 of 20] Compiling Ernie

tests/Ernie.hs:39:14: error: [GHC-39999]
    • No instance for ‘MonadFail Gen’ arising from a use of ‘fail’
    • In the expression: fail "pickItem: empty list"
      In an equation for ‘pickItem’:
          pickItem a
            | null a = fail "pickItem: empty list"
            | otherwise = fmap (a !!) (choose (0, length a - 1))
   |
39 |   | null a = fail "pickItem: empty list"
   |              ^^^^
[ 7 of 20] Compiling Multiarg.Types.Instances

tests/Multiarg/Types/Instances.hs:4:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
  |
4 | import Control.Applicative
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 8 of 20] Compiling Multiarg.Maddash.Instances

tests/Multiarg/Maddash/Instances.hs:4:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
  |
4 | import Control.Applicative
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 9 of 20] Compiling Multiarg.Maddash.Tests

tests/Multiarg/Maddash/Tests.hs:117:9: error: [GHC-39999]
    • No instance for ‘MonadFail Gen’
        arising from a do statement
        with the failable pattern ‘s1 : s2 : []’
    • In a stmt of a 'do' block: s1 : s2 : [] <- vectorOf 2 arbitrary
      In the expression:
        do s1 : s2 : [] <- vectorOf 2 arbitrary
           return ([s1, s2], f s1 s2)
      In a case alternative:
          TwoArg f
            -> do s1 : s2 : [] <- vectorOf 2 arbitrary
                  return ([s1, ....], f s1 s2)
    |
117 |         s1:s2:[] <- vectorOf 2 arbitrary
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[10 of 20] Compiling Multiarg.Util
[11 of 20] Compiling Multiarg.Internal
[12 of 20] Compiling Multiarg.Mode.Internal
[13 of 20] Compiling Multiarg.Mode
[14 of 20] Compiling Multiarg.Examples.Grover

lib/Multiarg/Examples/Grover.hs:24:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
24 | import Control.Applicative
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
[16 of 20] Compiling Multiarg
[17 of 20] Compiling Multiarg.Examples.Telly
[18 of 20] Compiling Multiarg.Vocabulary
Error: [Cabal-7125]
Failed to build test:multiarg-tests from multiarg-0.30.0.10.

