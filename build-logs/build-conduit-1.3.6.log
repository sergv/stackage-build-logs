Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - conduit-1.3.6 (lib) (first run)
 - conduit-1.3.6 (test:conduit-test) (first run)
Warning: conduit.cabal:101:3: Inconsistent indentation. Indentation jumps at
lines 101
Configuring library for conduit-1.3.6...
Preprocessing library for conduit-1.3.6...
Building library for conduit-1.3.6...
[ 1 of 14] Compiling Data.Conduit.Internal.Pipe

src/Data/Conduit/Internal/Pipe.hs:48:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
48 | import Control.Applicative (Applicative (..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/Internal/Pipe.hs:56:51: warning: [-Wunused-imports]
    The import of ‘MonadUnliftIO’
    from module ‘Control.Monad.IO.Unlift’ is redundant
   |
56 | import Control.Monad.IO.Unlift (MonadIO (liftIO), MonadUnliftIO, withRunInIO)
   |                                                   ^^^^^^^^^^^^^

src/Data/Conduit/Internal/Pipe.hs:59:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
59 | import Data.Monoid (Monoid (mappend, mempty))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/Internal/Pipe.hs:60:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
   |
60 | import Data.Semigroup (Semigroup ((<>)))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/Internal/Pipe.hs:217:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: CI.await >>= maybe" may never fire
      because ‘maybe’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘maybe’
    |
217 | {-# RULES "conduit: CI.await >>= maybe" forall x y. await >>= maybe x y = NeedInput y (const x) #-}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/Internal/Pipe.hs:226:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: awaitE >>= either" may never fire
      because ‘either’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘either’
    |
226 | {-# RULES "conduit: awaitE >>= either" forall x y. awaitE >>= either x y = NeedInput y x #-}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 2 of 14] Compiling Data.Conduit.Internal.Conduit

src/Data/Conduit/Internal/Conduit.hs:93:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
93 | import Control.Applicative (Applicative (..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/Internal/Conduit.hs:104:51: warning: [-Wunused-imports]
    The import of ‘MonadUnliftIO’
    from module ‘Control.Monad.IO.Unlift’ is redundant
    |
104 | import Control.Monad.IO.Unlift (MonadIO (liftIO), MonadUnliftIO, withRunInIO)
    |                                                   ^^^^^^^^^^^^^

src/Data/Conduit/Internal/Conduit.hs:108:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
    |
108 | import Data.Monoid (Monoid (mappend, mempty))
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/Internal/Conduit.hs:109:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
    |
109 | import Data.Semigroup (Semigroup ((<>)))
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/Internal/Conduit.hs:114:1: warning: [-Wunused-imports]
    The import of ‘Data.Traversable’ is redundant
      except perhaps to import instances from ‘Data.Traversable’
    To import instances alone, use: import Data.Traversable()
    |
114 | import Data.Traversable (Traversable (..))
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/Internal/Conduit.hs:151:5: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘(*>) = (>>)’ definition detected
    in the instance declaration for ‘Applicative (ConduitT i o m)’.
    Move definition from ‘(>>)’ to ‘(*>)’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
    |
151 |     (*>) = (>>)
    |     ^^^^^^^^^^^

src/Data/Conduit/Internal/Conduit.hs:739:20: warning: [GHC-63397] [-Wname-shadowing]
    This binding for ‘p’ shadows the existing binding
      bound at src/Data/Conduit/Internal/Conduit.hs:736:25
    |
739 |     go (HaveOutput p o) = pure $ Just (o, SealedConduitT p)
    |                    ^

src/Data/Conduit/Internal/Conduit.hs:743:18: warning: [GHC-63397] [-Wname-shadowing]
    This binding for ‘p’ shadows the existing binding
      bound at src/Data/Conduit/Internal/Conduit.hs:736:25
    |
743 |     go (Leftover p ()) = go p
    |                  ^

src/Data/Conduit/Internal/Conduit.hs:756:20: warning: [GHC-63397] [-Wname-shadowing]
    This binding for ‘p’ shadows the existing binding
      bound at src/Data/Conduit/Internal/Conduit.hs:753:31
    |
756 |     go (HaveOutput p o) = pure $ Right (o, SealedConduitT p)
    |                    ^

src/Data/Conduit/Internal/Conduit.hs:760:18: warning: [GHC-63397] [-Wname-shadowing]
    This binding for ‘p’ shadows the existing binding
      bound at src/Data/Conduit/Internal/Conduit.hs:753:31
    |
760 |     go (Leftover p ()) = go p
    |                  ^

src/Data/Conduit/Internal/Conduit.hs:881:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: await >>= maybe" may never fire
      because ‘maybe’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘maybe’
    |
881 | {-# RULES "conduit: await >>= maybe" forall x y. await >>= maybe x y = await' x y #-}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 3 of 14] Compiling Data.Conduit.Internal.Fusion

src/Data/Conduit/Internal/Fusion.hs:71:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: fuseStream (.|)" may never fire
      because ‘.|’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘.|’
   |
71 | {-# RULES "conduit: fuseStream (.|)" forall left right.
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:74:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: fuseStream (fuse)" may never fire
      because ‘fuse’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘fuse’
   |
74 | {-# RULES "conduit: fuseStream (fuse)" forall left right.
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:78:23: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘=$=’ (imported from Data.Conduit.Internal.Conduit):
    Deprecated: "Use .|"
   |
78 |         unstream left =$= unstream right = unstream (fuseStream left right)
   |                       ^^^

src/Data/Conduit/Internal/Fusion.hs:102:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: runStream (pure)" may never fire
      because ‘runConduitPure’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘runConduitPure’
    |
102 | {-# RULES "conduit: runStream (pure)" forall stream.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:105:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: runStream (ResourceT)" may never fire
      because ‘runConduitRes’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘runConduitRes’
    |
105 | {-# RULES "conduit: runStream (ResourceT)" forall stream.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:129:23: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘$$’ (imported from Data.Conduit.Internal.Conduit):
    Deprecated: "Use runConduit and .|"
    |
129 |         unstream left $$ unstream right = connectStream left right
    |                       ^^

src/Data/Conduit/Internal/Fusion.hs:154:23: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘$$’ (imported from Data.Conduit.Internal.Conduit):
    Deprecated: "Use runConduit and .|"
    |
154 |         unstream left $$ right = connectStream1 left right
    |                       ^^

src/Data/Conduit/Internal/Fusion.hs:157:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream1 (runConduit/.|)" may never fire
      because ‘.|’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘.|’
    |
157 | {-# RULES "conduit: connectStream1 (runConduit/.|)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:161:35: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘=$=’ (imported from Data.Conduit.Internal.Conduit):
    Deprecated: "Use .|"
    |
161 |         runConduit (unstream left =$= right) = connectStream1 left right
    |                                   ^^^

src/Data/Conduit/Internal/Fusion.hs:163:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream1 (runConduit/fuse)" may never fire
      because ‘fuse’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘fuse’
    |
163 | {-# RULES "conduit: connectStream1 (runConduit/fuse)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:167:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream1 (runConduitPure/.|)" may never fire
      because ‘.|’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘.|’
    |
167 | {-# RULES "conduit: connectStream1 (runConduitPure/.|)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:167:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream1 (runConduitPure/.|)" may never fire
      because ‘runConduitPure’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘runConduitPure’
    |
167 | {-# RULES "conduit: connectStream1 (runConduitPure/.|)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:170:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream1 (runConduitPure/=$=)" may never fire
      because ‘runConduitPure’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘runConduitPure’
    |
170 | {-# RULES "conduit: connectStream1 (runConduitPure/=$=)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:171:39: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘=$=’ (imported from Data.Conduit.Internal.Conduit):
    Deprecated: "Use .|"
    |
171 |         runConduitPure (unstream left =$= right) = runIdentity (connectStream1 left right)
    |                                       ^^^

src/Data/Conduit/Internal/Fusion.hs:173:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream1 (runConduitPure/fuse)" may never fire
      because ‘fuse’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘fuse’
    |
173 | {-# RULES "conduit: connectStream1 (runConduitPure/fuse)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:173:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream1 (runConduitPure/fuse)" may never fire
      because ‘runConduitPure’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘runConduitPure’
    |
173 | {-# RULES "conduit: connectStream1 (runConduitPure/fuse)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:177:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream1 (runConduitRes/.|)" may never fire
      because ‘.|’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘.|’
    |
177 | {-# RULES "conduit: connectStream1 (runConduitRes/.|)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:177:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream1 (runConduitRes/.|)" may never fire
      because ‘runConduitRes’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘runConduitRes’
    |
177 | {-# RULES "conduit: connectStream1 (runConduitRes/.|)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:180:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream1 (runConduitRes/=$=)" may never fire
      because ‘runConduitRes’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘runConduitRes’
    |
180 | {-# RULES "conduit: connectStream1 (runConduitRes/=$=)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:181:38: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘=$=’ (imported from Data.Conduit.Internal.Conduit):
    Deprecated: "Use .|"
    |
181 |         runConduitRes (unstream left =$= right) = runResourceT (connectStream1 left right)
    |                                      ^^^

src/Data/Conduit/Internal/Fusion.hs:183:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream1 (runConduitRes/fuse)" may never fire
      because ‘fuse’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘fuse’
    |
183 | {-# RULES "conduit: connectStream1 (runConduitRes/fuse)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:183:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream1 (runConduitRes/fuse)" may never fire
      because ‘runConduitRes’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘runConduitRes’
    |
183 | {-# RULES "conduit: connectStream1 (runConduitRes/fuse)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:214:14: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘$$’ (imported from Data.Conduit.Internal.Conduit):
    Deprecated: "Use runConduit and .|"
    |
214 |         left $$ unstream right = connectStream2 left right
    |              ^^

src/Data/Conduit/Internal/Fusion.hs:217:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream2 (runConduit/.|)" may never fire
      because ‘.|’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘.|’
    |
217 | {-# RULES "conduit: connectStream2 (runConduit/.|)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:220:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream2 (runConduit/fuse)" may never fire
      because ‘fuse’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘fuse’
    |
220 | {-# RULES "conduit: connectStream2 (runConduit/fuse)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:224:26: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘=$=’ (imported from Data.Conduit.Internal.Conduit):
    Deprecated: "Use .|"
    |
224 |         runConduit (left =$= unstream right) = connectStream2 left right
    |                          ^^^

src/Data/Conduit/Internal/Fusion.hs:227:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream2 (runConduitPure/.|)" may never fire
      because ‘.|’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘.|’
    |
227 | {-# RULES "conduit: connectStream2 (runConduitPure/.|)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:227:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream2 (runConduitPure/.|)" may never fire
      because ‘runConduitPure’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘runConduitPure’
    |
227 | {-# RULES "conduit: connectStream2 (runConduitPure/.|)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:230:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream2 (runConduitPure/fuse)" may never fire
      because ‘fuse’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘fuse’
    |
230 | {-# RULES "conduit: connectStream2 (runConduitPure/fuse)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:230:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream2 (runConduitPure/fuse)" may never fire
      because ‘runConduitPure’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘runConduitPure’
    |
230 | {-# RULES "conduit: connectStream2 (runConduitPure/fuse)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:233:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream2 (runConduitPure/=$=)" may never fire
      because ‘runConduitPure’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘runConduitPure’
    |
233 | {-# RULES "conduit: connectStream2 (runConduitPure/=$=)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:234:30: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘=$=’ (imported from Data.Conduit.Internal.Conduit):
    Deprecated: "Use .|"
    |
234 |         runConduitPure (left =$= unstream right) = runIdentity (connectStream2 left right)
    |                              ^^^

src/Data/Conduit/Internal/Fusion.hs:237:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream2 (runConduitRes/.|)" may never fire
      because ‘.|’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘.|’
    |
237 | {-# RULES "conduit: connectStream2 (runConduitRes/.|)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:237:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream2 (runConduitRes/.|)" may never fire
      because ‘runConduitRes’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘runConduitRes’
    |
237 | {-# RULES "conduit: connectStream2 (runConduitRes/.|)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:240:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream2 (runConduitRes/fuse)" may never fire
      because ‘fuse’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘fuse’
    |
240 | {-# RULES "conduit: connectStream2 (runConduitRes/fuse)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:240:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream2 (runConduitRes/fuse)" may never fire
      because ‘runConduitRes’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘runConduitRes’
    |
240 | {-# RULES "conduit: connectStream2 (runConduitRes/fuse)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:243:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connectStream2 (runConduitRes/=$=)" may never fire
      because ‘runConduitRes’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘runConduitRes’
    |
243 | {-# RULES "conduit: connectStream2 (runConduitRes/=$=)" forall left right.
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Conduit/Internal/Fusion.hs:244:29: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘=$=’ (imported from Data.Conduit.Internal.Conduit):
    Deprecated: "Use .|"
    |
244 |         runConduitRes (left =$= unstream right) = runResourceT (connectStream2 left right)
    |                             ^^^
[ 4 of 14] Compiling Data.Conduit.Internal.List.Stream
[ 5 of 14] Compiling Data.Conduit.Combinators.Stream

src/Data/Conduit/Combinators/Stream.hs:362:61: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
362 | slidingWindowS :: (Monad m, Seq.IsSequence seq, Element seq ~ a) => Int -> StreamConduit a m seq
    |                                                             ^
[ 6 of 14] Compiling Data.Conduit

src/Data/Conduit.hs:105:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Identity’ is redundant
      except perhaps to import instances from ‘Data.Functor.Identity’
    To import instances alone, use: import Data.Functor.Identity()
    |
105 | import Data.Functor.Identity (Identity, runIdentity)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit.hs:106:1: warning: [-Wunused-imports]
    The import of ‘Control.Monad.Trans.Resource’ is redundant
      except perhaps to import instances from ‘Control.Monad.Trans.Resource’
    To import instances alone, use: import Control.Monad.Trans.Resource()
    |
106 | import Control.Monad.Trans.Resource (ResourceT, runResourceT)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit.hs:107:1: warning: [-Wunused-imports]
    The import of ‘Control.Monad.IO.Unlift’ is redundant
      except perhaps to import instances from ‘Control.Monad.IO.Unlift’
    To import instances alone, use: import Control.Monad.IO.Unlift()
    |
107 | import Control.Monad.IO.Unlift (MonadUnliftIO)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 7 of 14] Compiling Data.Conduit.Internal
[ 8 of 14] Compiling Data.Conduit.Lift

src/Data/Conduit/Lift.hs:67:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
67 | import Data.Monoid (Monoid(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 9 of 14] Compiling Data.Conduit.List

src/Data/Conduit/List.hs:336:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: $$ fold" may never fire
      because ‘.|’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘.|’
    |
336 | {-# RULES "conduit: $$ fold" forall src f b. runConduit (src .| fold f b) = connectFold src f b #-}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/List.hs:352:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: $$ foldM" may never fire
      because ‘.|’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘.|’
    |
352 | {-# RULES "conduit: $$ foldM" forall src f b. runConduit (src .| foldM f b) = connectFoldM src f b #-}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/List.hs:395:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connect to mapM_" may never fire
      because ‘.|’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘.|’
    |
395 | {-# RULES "conduit: connect to mapM_" [2] forall f src. runConduit (src .| mapM_ f) = srcMapM_ src f #-}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/List.hs:836:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: source/filter fusion .|" may never fire
      because ‘.|’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘.|’
    |
836 | {-# RULES "conduit: source/filter fusion .|" forall f src. src .| filter f = filterFuseRight src f #-}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/List.hs:860:11: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "conduit: connect to sinkNull" may never fire
      because ‘.|’ might inline first
    Suggested fix: Add an INLINE[n] or NOINLINE[n] pragma for ‘.|’
    |
860 | {-# RULES "conduit: connect to sinkNull" forall src. runConduit (src .| sinkNull) = srcSinkNull src #-}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[10 of 14] Compiling Data.Streaming.FileRead
[11 of 14] Compiling Data.Streaming.Filesystem
[12 of 14] Compiling Data.Conduit.Combinators

src/Data/Conduit/Combinators.hs:901:43: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
901 | foldl1E :: (Monad m, MonoFoldable mono, a ~ Element mono)
    |                                           ^

src/Data/Conduit/Combinators.hs:907:40: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
907 | foldMaybeNull :: (MonoFoldable mono, e ~ Element mono)
    |                                        ^

src/Data/Conduit/Combinators.hs:992:51: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
992 | andE :: (Monad m, MonoFoldable mono, Element mono ~ Bool)
    |                                                   ^

src/Data/Conduit/Combinators.hs:1013:50: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
1013 | orE :: (Monad m, MonoFoldable mono, Element mono ~ Bool)
     |                                                  ^

src/Data/Conduit/Combinators.hs:1801:76: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
1801 | slidingWindow, slidingWindowC :: (Monad m, Seq.IsSequence seq, Element seq ~ a) => Int -> ConduitT a seq m ()
     |                                                                            ^

src/Data/Conduit/Combinators.hs:2036:51: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
2036 | line :: (Monad m, Seq.IsSequence seq, Element seq ~ Char)
     |                                                   ^

src/Data/Conduit/Combinators.hs:2045:56: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
2045 | lineAscii :: (Monad m, Seq.IsSequence seq, Element seq ~ Word8)
     |                                                        ^

src/Data/Conduit/Combinators.hs:2082:54: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
2082 | unlines :: (Monad m, Seq.IsSequence seq, Element seq ~ Char) => ConduitT seq seq m ()
     |                                                      ^

src/Data/Conduit/Combinators.hs:2090:59: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
2090 | unlinesAscii :: (Monad m, Seq.IsSequence seq, Element seq ~ Word8) => ConduitT seq seq m ()
     |                                                           ^

src/Data/Conduit/Combinators.hs:2126:61: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
2126 | linesUnbounded :: (Monad m, Seq.IsSequence seq, Element seq ~ Char)
     |                                                             ^

src/Data/Conduit/Combinators.hs:2135:66: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
2135 | linesUnboundedAscii :: (Monad m, Seq.IsSequence seq, Element seq ~ Word8)
     |                                                                  ^

src/Data/Conduit/Combinators.hs:2437:71: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
2437 | vectorBuilder :: (PrimMonad m, PrimMonad n, V.Vector v e, PrimState m ~ PrimState n)
     |                                                                       ^
[13 of 14] Compiling Data.Conduit.Combinators.Unqualified

src/Data/Conduit/Combinators/Unqualified.hs:461:52: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
461 | andCE :: (Monad m, MonoFoldable mono, Element mono ~ Bool)
    |                                                    ^

src/Data/Conduit/Combinators/Unqualified.hs:480:51: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
480 | orCE :: (Monad m, MonoFoldable mono, Element mono ~ Bool)
    |                                                   ^

src/Data/Conduit/Combinators/Unqualified.hs:993:61: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
993 | slidingWindowC :: (Monad m, Seq.IsSequence seq, Element seq ~ a) => Int -> ConduitT a seq m ()
    |                                                             ^

src/Data/Conduit/Combinators/Unqualified.hs:1135:52: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
1135 | lineC :: (Monad m, Seq.IsSequence seq, Element seq ~ Char)
     |                                                    ^

src/Data/Conduit/Combinators/Unqualified.hs:1144:57: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
1144 | lineAsciiC :: (Monad m, Seq.IsSequence seq, Element seq ~ Word8)
     |                                                         ^

src/Data/Conduit/Combinators/Unqualified.hs:1153:55: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
1153 | unlinesC :: (Monad m, Seq.IsSequence seq, Element seq ~ Char) => ConduitT seq seq m ()
     |                                                       ^

src/Data/Conduit/Combinators/Unqualified.hs:1160:60: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
1160 | unlinesAsciiC :: (Monad m, Seq.IsSequence seq, Element seq ~ Word8) => ConduitT seq seq m ()
     |                                                            ^

src/Data/Conduit/Combinators/Unqualified.hs:1170:62: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
1170 | linesUnboundedC :: (Monad m, Seq.IsSequence seq, Element seq ~ Char)
     |                                                              ^

src/Data/Conduit/Combinators/Unqualified.hs:1178:67: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
1178 | linesUnboundedAsciiC :: (Monad m, Seq.IsSequence seq, Element seq ~ Word8)
     |                                                                   ^

src/Data/Conduit/Combinators/Unqualified.hs:1201:72: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
     |
1201 | vectorBuilderC :: (PrimMonad m, V.Vector v e, PrimMonad n, PrimState m ~ PrimState n)
     |                                                                        ^
[14 of 14] Compiling Conduit
Warning: conduit.cabal:101:3: Inconsistent indentation. Indentation jumps at
lines 101
Configuring test suite 'conduit-test' for conduit-1.3.6...
Preprocessing test suite 'conduit-test' for conduit-1.3.6...
Building test suite 'conduit-test' for conduit-1.3.6...
[1 of 5] Compiling Data.Conduit.Extra.ZipConduitSpec

test/Data/Conduit/Extra/ZipConduitSpec.hs:5:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
  |
5 | import Control.Applicative ((<*), pure)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[2 of 5] Compiling Data.Conduit.StreamSpec

test/Data/Conduit/StreamSpec.hs:572:20: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a lambda abstraction: Patterns of type ‘[a]’ not matched: []
    |
572 |     Data.List.map (\(x:xs) -> (x, xs)) . Data.List.groupBy ((==) `on` f)
    |                    ^^^^^^^^^^^^^^^^^^
[3 of 5] Compiling StreamSpec

test/StreamSpec.hs:471:3: warning: [-Wnoncanonical-monoid-instances]
    Noncanonical ‘mappend’ definition detected
    in the instance declaration for ‘Monoid (Sum a)’.
    ‘mappend’ will eventually be removed in favour of ‘(<>)’
    Either remove definition for ‘mappend’ (recommended) or define as ‘mappend = (<>)’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/semigroup-monoid
    |
471 |   mappend (Sum x) (Sum y) = Sum $ x Prelude.+ y
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[4 of 5] Compiling Spec
[5 of 5] Compiling Main

test/main.hs:35:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
35 | import Control.Applicative (pure, (<$>), (<*>), liftA2)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[6 of 6] Linking /tmp/workdir-conduit/conduit-1.3.6/dist-newstyle/build/x86_64-linux/ghc-9.6.6/conduit-1.3.6/t/conduit-test/build/conduit-test/conduit-test
