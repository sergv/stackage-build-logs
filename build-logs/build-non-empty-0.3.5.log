Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - non-empty-0.3.5 (lib) (first run)
 - non-empty-0.3.5 (test:non-empty-test) (first run)
Configuring library for non-empty-0.3.5...
Preprocessing library for non-empty-0.3.5...
Building library for non-empty-0.3.5...
[ 1 of 14] Compiling Data.NonEmpty.Class

src/Data/NonEmpty/Class.hs:14:26: warning: [-Wunused-imports]
    The import of ‘Traversable’
    from module ‘Data.Traversable’ is redundant
   |
14 | import Data.Traversable (Traversable, mapAccumL, mapAccumR)
   |                          ^^^^^^^^^^^
[ 2 of 14] Compiling Data.Empty

src/Data/Empty.hs:8:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
  |
8 | import Control.Applicative (pure, )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 3 of 14] Compiling Data.Append

src/Data/Append.hs:4:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
  |
4 | import Control.Applicative (liftA2)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Append.hs:6:1: warning: [-Wunused-imports]
    The import of ‘Data.Traversable’ is redundant
      except perhaps to import instances from ‘Data.Traversable’
    To import instances alone, use: import Data.Traversable()
  |
6 | import Data.Traversable (Traversable, traverse)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Append.hs:7:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
  |
7 | import Data.Foldable (Foldable, foldMap)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Append.hs:8:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
  |
8 | import Data.Monoid (mappend)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 4 of 14] Compiling Data.NonEmpty.Foldable

src/Data/NonEmpty/Foldable.hs:4:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
  |
4 | import Data.Foldable (Foldable, )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 5 of 14] Compiling Data.NonEmpty.Match
[ 6 of 14] Compiling Data.NonEmptyPrivate

src/Data/NonEmptyPrivate.hs:152:4: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad (T f)’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
    |
152 |    return = singleton
    |    ^^^^^^^^^^^^^^^^^^
[ 7 of 14] Compiling Data.NonEmpty
[ 8 of 14] Compiling Data.NonEmpty.Set

src/Data/NonEmpty/Set.hs:34:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
34 | import Control.Applicative (liftA2)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 9 of 14] Compiling Data.NonEmpty.Mixed

src/Data/NonEmpty/Mixed.hs:16:1: warning: [-Wunused-imports]
    The import of ‘Traversable, sequenceA’
    from module ‘Data.Traversable’ is redundant
   |
16 | import Data.Traversable (Traversable, mapAccumL, sequenceA, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/NonEmpty/Mixed.hs:17:23: warning: [-Wunused-imports]
    The import of ‘Foldable’ from module ‘Data.Foldable’ is redundant
   |
17 | import Data.Foldable (Foldable, foldr, )
   |                       ^^^^^^^^
[10 of 14] Compiling Data.NonEmpty.Map

src/Data/NonEmpty/Map.hs:39:29: warning: [-Wunused-imports]
    The import of ‘liftA2’
    from module ‘Control.Applicative’ is redundant
   |
39 | import Control.Applicative (liftA2, liftA3)
   |                             ^^^^^^

src/Data/NonEmpty/Map.hs:41:1: warning: [-Wunused-imports]
    The import of ‘Data.Traversable’ is redundant
      except perhaps to import instances from ‘Data.Traversable’
    To import instances alone, use: import Data.Traversable()
   |
41 | import Data.Traversable (Traversable, traverse, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/NonEmpty/Map.hs:42:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
   |
42 | import Data.Foldable (Foldable, foldMap, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/NonEmpty/Map.hs:43:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
43 | import Data.Monoid (mappend, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[11 of 14] Compiling Data.FixedLengthList
[12 of 14] Compiling Data.NonEmptyTest
[13 of 14] Compiling Data.Optional
[14 of 14] Compiling Data.Zip

src/Data/Zip.hs:6:1: warning: [-Wunused-imports]
    The import of ‘Data.Traversable’ is redundant
      except perhaps to import instances from ‘Data.Traversable’
    To import instances alone, use: import Data.Traversable()
  |
6 | import Data.Traversable (Traversable, )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Zip.hs:7:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
  |
7 | import Control.Applicative (Applicative, pure, (<*>), )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Configuring test suite 'non-empty-test' for non-empty-0.3.5...
Preprocessing test suite 'non-empty-test' for non-empty-0.3.5...
Building test suite 'non-empty-test' for non-empty-0.3.5...
[1 of 3] Compiling Test.Data.NonEmpty.Map

src/Data/NonEmpty/Map.hs:63:41: warning: [GHC-63394] [-Wdeprecations]
    In the use of ‘fromList’ (imported from Data.NonEmpty.Map):
    "Dangerous because it silently drops colliding key/value pairs. Better use fromListWith."
   |
63 | >>> forAllNonEmptyMap = QC.forAll (fmap NonEmptyMap.fromList QC.arbitrary)
   |                                         ^^^^^^^^^^^^^^^^^^^^

src/Data/NonEmpty/Map.hs:180:78: warning: [GHC-63394] [-Wdeprecations]
    In the use of ‘fromList’ (imported from Data.NonEmpty.Map):
    "Dangerous because it silently drops colliding key/value pairs. Better use fromListWith."
    |
180 | -- | prop> \xs -> Map.fromList (NonEmpty.flatten xs) == NonEmptyMap.flatten (NonEmptyMap.fromList (xs::NonEmpty.T [] (Int,Char)))
    |                                                                              ^^^^^^^^^^^^^^^^^^^^

src/Data/NonEmpty/Map.hs:209:150: warning: [GHC-63394] [-Wdeprecations]
    In the use of ‘union’ (imported from Data.NonEmpty.Map):
    "Dangerous because it silently drops colliding key/value pairs. Better use unionWith."
    |
209 | -- | prop> forAllNonEmptyMap $ \xs -> forAllNonEmptyMap $ \ys -> Map.union (NonEmptyMap.flatten xs) (NonEmptyMap.flatten ys) == NonEmptyMap.flatten (NonEmptyMap.union xs ys)
    |                                                                                                                                                      ^^^^^^^^^^^^^^^^^

src/Data/NonEmpty/Map.hs:221:120: warning: [GHC-63394] [-Wdeprecations]
    In the use of ‘unionLeft’ (imported from Data.NonEmpty.Map):
    "Dangerous because it silently drops colliding key/value pairs. Better use unionLeftWith."
    |
221 | -- | prop> forAllMap $ \xm -> forAllNonEmptyMap $ \ym -> Map.union xm (NonEmptyMap.flatten ym) == NonEmptyMap.flatten (NonEmptyMap.unionLeft xm ym)
    |                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^

src/Data/NonEmpty/Map.hs:226:120: warning: [GHC-63394] [-Wdeprecations]
    In the use of ‘unionRight’ (imported from Data.NonEmpty.Map):
    "Dangerous because it silently drops colliding key/value pairs. Better use unionRightWith."
    |
226 | -- | prop> forAllNonEmptyMap $ \xm -> forAllMap $ \ym -> Map.union (NonEmptyMap.flatten xm) ym == NonEmptyMap.flatten (NonEmptyMap.unionRight xm ym)
    |                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^
[2 of 3] Compiling Test.Data.NonEmptyPrivate

src/Data/NonEmptyPrivate.hs:49:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
49 | >>> import Control.Applicative (liftA2)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[3 of 3] Compiling Main
[4 of 4] Linking /tmp/workdir-non-empty/non-empty-0.3.5/dist-newstyle/build/x86_64-linux/ghc-9.6.6/non-empty-0.3.5/t/non-empty-test/build/non-empty-test/non-empty-test
