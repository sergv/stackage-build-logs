Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - mysql-haskell-1.1.5 (lib) (first run)
 - mysql-haskell-1.1.5 (test:test) (first run)
Configuring library for mysql-haskell-1.1.5...
Preprocessing library for mysql-haskell-1.1.5...
Building library for mysql-haskell-1.1.5...
[ 1 of 24] Compiling Data.Binary.Parser.Word8
[ 2 of 24] Compiling Data.Binary.Parser.Numeric
[ 3 of 24] Compiling Data.Binary.Parser
[ 4 of 24] Compiling Data.Connection
[ 5 of 24] Compiling Data.Word.Word24

src/Data/Word/Word24.hs:219:1: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "fromIntegral/Word8->Word24" may never fire
      because ‘fromIntegral’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘fromIntegral’
    |
219 | "fromIntegral/Word8->Word24"    fromIntegral = \(W8# x#) -> W24# x#
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Word/Word24.hs:220:1: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "fromIntegral/Word16->Word24" may never fire
      because ‘fromIntegral’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘fromIntegral’
    |
220 | "fromIntegral/Word16->Word24"   fromIntegral = \(W16# x#) -> W24# x#
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Word/Word24.hs:221:1: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "fromIntegral/Word24->Word24" may never fire
      because ‘fromIntegral’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘fromIntegral’
    |
221 | "fromIntegral/Word24->Word24"   fromIntegral = id :: Word24 -> Word24
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Word/Word24.hs:222:1: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "fromIntegral/Word24->Integer" may never fire
      because ‘fromIntegral’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘fromIntegral’
    |
222 | "fromIntegral/Word24->Integer"  fromIntegral = toInteger :: Word24 -> Integer
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Word/Word24.hs:223:1: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "fromIntegral/a->Word24" may never fire
      because ‘fromIntegral’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘fromIntegral’
    |
223 | "fromIntegral/a->Word24"        fromIntegral = \x -> case fromIntegral x of W# x# -> W24# (narrow24Word# x#)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Word/Word24.hs:224:1: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "fromIntegral/Word24->a" may never fire
      because ‘fromIntegral’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘fromIntegral’
    |
224 | "fromIntegral/Word24->a"        fromIntegral = \(W24# x#) -> fromIntegral (W# x#)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 6 of 24] Compiling Data.Int.Int24

src/Data/Int/Int24.hs:205:1: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "fromIntegral/Word8->Int24" may never fire
      because ‘fromIntegral’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘fromIntegral’
    |
205 | "fromIntegral/Word8->Int24"   fromIntegral = \(W8# x#) -> I24# (word2Int# x#)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Int/Int24.hs:206:1: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "fromIntegral/Word16->Int24" may never fire
      because ‘fromIntegral’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘fromIntegral’
    |
206 | "fromIntegral/Word16->Int24"  fromIntegral = \(W16# x#) -> I24# (word2Int# x#)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Int/Int24.hs:207:1: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "fromIntegral/Int8->Int24" may never fire
      because ‘fromIntegral’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘fromIntegral’
    |
207 | "fromIntegral/Int8->Int24"    fromIntegral = \(I8# x#) -> I24# x#
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Int/Int24.hs:208:1: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "fromIntegral/Int16->Int24" may never fire
      because ‘fromIntegral’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘fromIntegral’
    |
208 | "fromIntegral/Int16->Int24"   fromIntegral = \(I16# x#) -> I24# x#
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Int/Int24.hs:209:1: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "fromIntegral/Int24->Int24" may never fire
      because ‘fromIntegral’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘fromIntegral’
    |
209 | "fromIntegral/Int24->Int24"   fromIntegral = id :: Int24 -> Int24
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Int/Int24.hs:210:1: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "fromIntegral/a->Int24" may never fire
      because ‘fromIntegral’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘fromIntegral’
    |
210 | "fromIntegral/a->Int24"       fromIntegral = \x -> case fromIntegral x of I# x# -> I24# (narrow24Int# x#)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Int/Int24.hs:211:1: warning: [GHC-95396] [-Winline-rule-shadowing]
    Rule "fromIntegral/Int24->a" may never fire
      because ‘fromIntegral’ might inline first
    Suggested fix:
      Add an INLINE[n] or NOINLINE[n] pragma for ‘fromIntegral’
    |
211 | "fromIntegral/Int24->a"       fromIntegral = \(I24# x#) -> fromIntegral (I# x#)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 7 of 24] Compiling Database.MySQL.Protocol.Escape
[ 8 of 24] Compiling Database.MySQL.Protocol.Packet
[ 9 of 24] Compiling Database.MySQL.Protocol.ColumnDef
[10 of 24] Compiling Database.MySQL.Protocol.MySQLValue
[11 of 24] Compiling Database.MySQL.Protocol.Command
[12 of 24] Compiling Database.MySQL.BinLogProtocol.BinLogMeta
[13 of 24] Compiling Database.MySQL.Protocol.Auth
[14 of 24] Compiling Database.MySQL.BinLogProtocol.BinLogValue
[15 of 24] Compiling Database.MySQL.Query
[16 of 24] Compiling Database.MySQL.BinLogProtocol.BinLogEvent
[17 of 24] Compiling Paths_mysql_haskell
[18 of 24] Compiling Data.TLSSetting
[19 of 24] Compiling System.IO.Streams.TCP
[20 of 24] Compiling Database.MySQL.Connection
[21 of 24] Compiling Database.MySQL.Base
[22 of 24] Compiling Database.MySQL.BinLog
[23 of 24] Compiling System.IO.Streams.TLS
[24 of 24] Compiling Database.MySQL.TLS
Configuring test suite 'test' for mysql-haskell-1.1.5...
Preprocessing test suite 'test' for mysql-haskell-1.1.5...
Building test suite 'test' for mysql-haskell-1.1.5...
[ 1 of 18] Compiling Aeson
[ 2 of 18] Compiling AesonBP
[ 3 of 18] Compiling BinLog
[ 4 of 18] Compiling BinLogNew
[ 5 of 18] Compiling BinaryRow
[ 6 of 18] Compiling BinaryRowNew
[ 7 of 18] Compiling ExecuteMany
[ 8 of 18] Compiling JSON
[ 9 of 18] Compiling QC.Common
[10 of 18] Compiling QC.Combinator
[11 of 18] Compiling QC.ByteString
[12 of 18] Compiling QCUtils
[13 of 18] Compiling TCPStreams
[14 of 18] Compiling TextRow
[15 of 18] Compiling TextRowNew
[16 of 18] Compiling MysqlTests
[17 of 18] Compiling Word24

test/Word24.hs:171:5: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘bitSize’
    (imported from Data.Bits, but defined in GHC.Bits):
    Deprecated: "Use 'bitSizeMaybe' or 'finiteBitSize' instead"
    |
171 |     bitSize s - popCount (a `asTypeOf` s) == bitSize t - popCount (fromIntegral a `asTypeOf` t)
    |     ^^^^^^^

test/Word24.hs:171:46: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘bitSize’
    (imported from Data.Bits, but defined in GHC.Bits):
    Deprecated: "Use 'bitSizeMaybe' or 'finiteBitSize' instead"
    |
171 |     bitSize s - popCount (a `asTypeOf` s) == bitSize t - popCount (fromIntegral a `asTypeOf` t)
    |                                              ^^^^^^^
[18 of 18] Compiling Main
[19 of 19] Linking /tmp/workdir-mysql-haskell/mysql-haskell-1.1.5/dist-newstyle/build/x86_64-linux/ghc-9.6.6/mysql-haskell-1.1.5/t/test/build/test/test
