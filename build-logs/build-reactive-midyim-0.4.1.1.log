Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - reactive-midyim-0.4.1.1 (lib:reactive-midyim) (first run)
Warning: reactive-midyim.cabal:52:35: version operators used. To use version
operators the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: reactive-midyim.cabal:53:18: version operators used. To use version
operators the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: reactive-midyim.cabal:54:24: version operators used. To use version
operators the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: reactive-midyim.cabal:55:26: version operators used. To use version
operators the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: reactive-midyim.cabal:56:42: version operators used. To use version
operators the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: reactive-midyim.cabal:57:29: version operators used. To use version
operators the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: reactive-midyim.cabal:58:26: version operators used. To use version
operators the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: reactive-midyim.cabal:59:24: version operators used. To use version
operators the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: reactive-midyim.cabal:60:26: version operators used. To use version
operators the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: reactive-midyim.cabal:61:24: version operators used. To use version
operators the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: reactive-midyim.cabal:62:18: version operators used. To use version
operators the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: reactive-midyim.cabal:63:16: version operators used. To use version
operators the package needs to specify at least 'cabal-version: >= 1.8'.
Configuring reactive-midyim-0.4.1.1...
Preprocessing library for reactive-midyim-0.4.1.1...
Building library for reactive-midyim-0.4.1.1...
[ 1 of 14] Compiling Reactive.Banana.MIDI.Program
[ 2 of 14] Compiling Reactive.Banana.MIDI.Time

src/Reactive/Banana/MIDI/Time.hs:8:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
  |
8 | import Data.Monoid (Monoid, mempty, mappend, )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Reactive/Banana/MIDI/Time.hs:9:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
  |
9 | import Data.Semigroup (Semigroup, (<>), )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Reactive/Banana/MIDI/Time.hs:80:4: warning: [-Wnoncanonical-monoid-instances]
    Noncanonical ‘mappend’ definition detected
    in the instance declaration for ‘Monoid (T m t a)’.
    ‘mappend’ will eventually be removed in favour of ‘(<>)’
    Either remove definition for ‘mappend’ (recommended) or define as ‘mappend = (<>)’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/semigroup-monoid
   |
80 |    mappend x y = cons $ mappend (decons x) (decons y)
   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 3 of 14] Compiling Reactive.Banana.MIDI.Controller

src/Reactive/Banana/MIDI/Controller.hs:14:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
14 | import Data.Monoid (mappend, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 4 of 14] Compiling Reactive.Banana.MIDI.Common

src/Reactive/Banana/MIDI/Common.hs:14:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
14 | import Data.Monoid (mempty, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 5 of 14] Compiling Reactive.Banana.MIDI.Pitch
[ 6 of 14] Compiling Reactive.Banana.MIDI.Guitar
[ 7 of 14] Compiling Reactive.Banana.MIDI.Note

src/Reactive/Banana/MIDI/Note.hs:15:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
15 | import Data.Monoid (mappend, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 8 of 14] Compiling Reactive.Banana.MIDI.KeySet
[ 9 of 14] Compiling Reactive.Banana.MIDI.Training
[10 of 14] Compiling Reactive.Banana.MIDI.Trie
[11 of 14] Compiling Reactive.Banana.MIDI.DeBruijn
[12 of 14] Compiling Reactive.Banana.MIDI.Utility
[13 of 14] Compiling Reactive.Banana.MIDI.Process

src/Reactive/Banana/MIDI/Process.hs:67:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
67 | import Control.Applicative (pure, liftA2, (<*>), (<$>), )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Reactive/Banana/MIDI/Process.hs:68:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
68 | import Data.Monoid (mempty, mappend, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Reactive/Banana/MIDI/Process.hs:546:69: warning: [GHC-47082] [-Woperator-whitespace-ext-conflict]
    The prefix use of a ‘$’ would denote an untyped splice
      were the TemplateHaskell extension enabled.
    Suggested fix: Add whitespace after the ‘$’.
    |
546 |    zipWith Common.Future (iterate (mappend stepTime) mempty) . map ($on)
    |                                                                     ^
[14 of 14] Compiling Reactive.Banana.MIDI.Pattern

src/Reactive/Banana/MIDI/Pattern.hs:34:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
34 | import Control.Applicative (pure, (<*>), )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
