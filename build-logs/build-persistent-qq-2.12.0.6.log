Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - persistent-qq-2.12.0.6 (lib) (first run)
 - persistent-qq-2.12.0.6 (test:specs) (first run)
Configuring library for persistent-qq-2.12.0.6...
Preprocessing library for persistent-qq-2.12.0.6...
Building library for persistent-qq-2.12.0.6...
[1 of 2] Compiling Database.Persist.Sql.Raw.QQ
[2 of 2] Compiling Paths_persistent_qq
Configuring test suite 'specs' for persistent-qq-2.12.0.6...
Preprocessing test suite 'specs' for persistent-qq-2.12.0.6...
Building test suite 'specs' for persistent-qq-2.12.0.6...
[1 of 5] Compiling PersistTestPetCollarType
[2 of 5] Compiling PersistTestPetType
[3 of 5] Compiling PersistentTestModels
test/PersistentTestModels.hs:(34,25)-(113,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistUpperCase
      "\n\
      \\n\
      \-- Dedented comment\n\
      \  -- Header-level comment\n\
      \    -- Indented comment\n\
      \  Person json\n\
      \    name Text\n\
      \    age Int \"some ignored -- \\\" attribute\"\n\
      \    color Text Maybe -- this is a comment sql=foobarbaz\n\
      \    PersonNameKey name -- this is a comment sql=foobarbaz\n\
      \    deriving Show Eq\n\
      \  Person1\n\
      \-- Dedented comment\n\
      \  -- Header-level comment\n\
      \    -- Indented comment\n\
      \    name Text\n\
      \    age Int\n\
      \    deriving Show Eq\n\
      \  PersonMaybeAge\n\
      \    name Text\n\
      \    age Int Maybe\n\
      \  PersonMay json\n\
      \    name Text Maybe\n\
      \    color Text Maybe\n\
      \    deriving Show Eq\n\
      \  Pet\n\
      \    ownerId PersonId\n\
      \    name Text\n\
      \    -- deriving Show Eq\n\
      \-- Dedented comment\n\
      \  -- Header-level comment\n\
      \    -- Indented comment\n\
      \    type PetType\n\
      \  MaybeOwnedPet\n\
      \    ownerId PersonId Maybe\n\
      \    name Text\n\
      \    type PetType\n\
      \-- Dedented comment\n\
      \  -- Header-level comment\n\
      \    -- Indented comment\n\
      \  NeedsPet\n\
      \    petKey PetId\n\
      \  OutdoorPet\n\
      \    ownerId PersonId\n\
      \    collar PetCollar\n\
      \    type PetType\n\
      \\n\
      \  -- From the scaffold\n\
      \  UserPT\n\
      \    ident Text\n\
      \    password Text Maybe\n\
      \    UniqueUserPT ident\n\
      \  EmailPT\n\
      \    email Text\n\
      \    user UserPTId Maybe\n\
      \    verkey Text Maybe\n\
      \    UniqueEmailPT email\n\
      \\n\
      \  Upsert\n\
      \    email Text\n\
      \    attr Text\n\
      \    extra Text\n\
      \    age Int\n\
      \    UniqueUpsert email\n\
      \    deriving Eq Show\n\
      \\n\
      \  UpsertBy\n\
      \    email Text\n\
      \    city Text\n\
      \    attr Text\n\
      \    UniqueUpsertBy email\n\
      \    UniqueUpsertByCity city\n\
      \    deriving Eq Show\n\
      \\n\
      \  Strict\n\
      \    !yes Int\n\
      \    ~no Int\n\
      \    def Int\n\
      \\n"
  ======>
    [Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "Person"# 6))
          (EntityNameDB (Data.Text.unpackCStringLen# "Person"# 6))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [Data.Text.unpackCStringLen# "json"# 4] []
          [UniqueDef
             (ConstraintNameHS
                (Data.Text.unpackCStringLen# "PersonNameKey"# 13))
             (ConstraintNameDB
                (Data.Text.unpackCStringLen# "PersonNameKey"# 13))
             ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
               FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
                NEL.:| [])
             []]
          []
          [Data.Text.unpackCStringLen# "Show"# 4,
           Data.Text.unpackCStringLen# "Eq"# 2]
          containers-0.6.7:Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
          (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3))
          [FieldAttrOther
             (Data.Text.unpackCStringLen# "some ignored -- \" attribute"# 27)]
          True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "color"# 5))
          (FieldNameDB (Data.Text.unpackCStringLen# "color"# 5))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "Person1"# 7))
          (EntityNameDB (Data.Text.unpackCStringLen# "Person1"# 7))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Person1Id"# 9))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] []
          [Data.Text.unpackCStringLen# "Show"# 4,
           Data.Text.unpackCStringLen# "Eq"# 2]
          containers-0.6.7:Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
          (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14))
          (EntityNameDB (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon
                   Nothing (Data.Text.unpackCStringLen# "PersonMaybeAgeId"# 16))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
          Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
          (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "PersonMay"# 9))
          (EntityNameDB (Data.Text.unpackCStringLen# "PersonMay"# 9))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonMayId"# 11))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [Data.Text.unpackCStringLen# "json"# 4] [] [] []
          [Data.Text.unpackCStringLen# "Show"# 4,
           Data.Text.unpackCStringLen# "Eq"# 2]
          containers-0.6.7:Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "color"# 5))
          (FieldNameDB (Data.Text.unpackCStringLen# "color"# 5))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "Pet"# 3))
          (EntityNameDB (Data.Text.unpackCStringLen# "Pet"# 3))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetId"# 5))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
          Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
          (FieldNameDB (Data.Text.unpackCStringLen# "ownerId"# 7)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "type"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetType"# 7))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13))
          (EntityNameDB (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon
                   Nothing (Data.Text.unpackCStringLen# "MaybeOwnedPetId"# 15))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
          Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
          (FieldNameDB (Data.Text.unpackCStringLen# "ownerId"# 7))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "type"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetType"# 7))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "NeedsPet"# 8))
          (EntityNameDB (Data.Text.unpackCStringLen# "NeedsPet"# 8))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NeedsPetId"# 10))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
          Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "petKey"# 6))
          (FieldNameDB (Data.Text.unpackCStringLen# "petKey"# 6)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetId"# 5))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "OutdoorPet"# 10))
          (EntityNameDB (Data.Text.unpackCStringLen# "OutdoorPet"# 10))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon
                   Nothing (Data.Text.unpackCStringLen# "OutdoorPetId"# 12))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
          Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
          (FieldNameDB (Data.Text.unpackCStringLen# "ownerId"# 7)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "collar"# 6))
          (FieldNameDB (Data.Text.unpackCStringLen# "collar"# 6)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetCollar"# 9))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "type"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetType"# 7))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "UserPT"# 6))
          (EntityNameDB (Data.Text.unpackCStringLen# "UserPT"# 6))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UserPTId"# 8))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] []
          [UniqueDef
             (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueUserPT"# 12))
             (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueUserPT"# 12))
             ((FieldNameHS (Data.Text.unpackCStringLen# "ident"# 5), 
               FieldNameDB (Data.Text.unpackCStringLen# "ident"# 5))
                NEL.:| [])
             []]
          [] [] containers-0.6.7:Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "ident"# 5))
          (FieldNameDB (Data.Text.unpackCStringLen# "ident"# 5)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "password"# 8))
          (FieldNameDB (Data.Text.unpackCStringLen# "password"# 8))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "EmailPT"# 7))
          (EntityNameDB (Data.Text.unpackCStringLen# "EmailPT"# 7))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "EmailPTId"# 9))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] []
          [UniqueDef
             (ConstraintNameHS
                (Data.Text.unpackCStringLen# "UniqueEmailPT"# 13))
             (ConstraintNameDB
                (Data.Text.unpackCStringLen# "UniqueEmailPT"# 13))
             ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
               FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                NEL.:| [])
             []]
          [] [] containers-0.6.7:Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
          (FieldNameDB (Data.Text.unpackCStringLen# "email"# 5)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "user"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "user"# 4))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UserPTId"# 8))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "verkey"# 6))
          (FieldNameDB (Data.Text.unpackCStringLen# "verkey"# 6))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "Upsert"# 6))
          (EntityNameDB (Data.Text.unpackCStringLen# "Upsert"# 6))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertId"# 8))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] []
          [UniqueDef
             (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueUpsert"# 12))
             (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueUpsert"# 12))
             ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
               FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                NEL.:| [])
             []]
          []
          [Data.Text.unpackCStringLen# "Eq"# 2,
           Data.Text.unpackCStringLen# "Show"# 4]
          containers-0.6.7:Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
          (FieldNameDB (Data.Text.unpackCStringLen# "email"# 5)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "attr"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "attr"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "extra"# 5))
          (FieldNameDB (Data.Text.unpackCStringLen# "extra"# 5)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
          (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "UpsertBy"# 8))
          (EntityNameDB (Data.Text.unpackCStringLen# "UpsertBy"# 8))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertById"# 10))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] []
          [UniqueDef
             (ConstraintNameHS
                (Data.Text.unpackCStringLen# "UniqueUpsertBy"# 14))
             (ConstraintNameDB
                (Data.Text.unpackCStringLen# "UniqueUpsertBy"# 14))
             ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
               FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                NEL.:| [])
             [],
           UniqueDef
             (ConstraintNameHS
                (Data.Text.unpackCStringLen# "UniqueUpsertByCity"# 18))
             (ConstraintNameDB
                (Data.Text.unpackCStringLen# "UniqueUpsertByCity"# 18))
             ((FieldNameHS (Data.Text.unpackCStringLen# "city"# 4), 
               FieldNameDB (Data.Text.unpackCStringLen# "city"# 4))
                NEL.:| [])
             []]
          []
          [Data.Text.unpackCStringLen# "Eq"# 2,
           Data.Text.unpackCStringLen# "Show"# 4]
          containers-0.6.7:Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
          (FieldNameDB (Data.Text.unpackCStringLen# "email"# 5)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "city"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "city"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "attr"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "attr"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "Strict"# 6))
          (EntityNameDB (Data.Text.unpackCStringLen# "Strict"# 6))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "StrictId"# 8))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
          Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "yes"# 3))
          (FieldNameDB (Data.Text.unpackCStringLen# "yes"# 3)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "no"# 2))
          (FieldNameDB (Data.Text.unpackCStringLen# "no"# 2)) [] False
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "def"# 3))
          (FieldNameDB (Data.Text.unpackCStringLen# "def"# 3)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing]]
test/PersistentTestModels.hs:(31,1)-(113,2): Splicing declarations
    share
      [mkPersist sqlSettings {mpsGeneric = True},
       mkMigrate "testMigrate"]
      ([Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "Person"# 6))
             (EntityNameDB (Data.Text.unpackCStringLen# "Person"# 6))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [Data.Text.unpackCStringLen# "json"# 4] []
             [UniqueDef
                (ConstraintNameHS
                   (Data.Text.unpackCStringLen# "PersonNameKey"# 13))
                (ConstraintNameDB
                   (Data.Text.unpackCStringLen# "PersonNameKey"# 13))
                ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
                  FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
                   NEL.:| [])
                []]
             []
             [Data.Text.unpackCStringLen# "Show"# 4,
              Data.Text.unpackCStringLen# "Eq"# 2]
             containers-0.6.7:Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
             (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3))
             [FieldAttrOther
                (Data.Text.unpackCStringLen# "some ignored -- \" attribute"# 27)]
             True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "color"# 5))
             (FieldNameDB (Data.Text.unpackCStringLen# "color"# 5))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "Person1"# 7))
             (EntityNameDB (Data.Text.unpackCStringLen# "Person1"# 7))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Person1Id"# 9))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] []
             [Data.Text.unpackCStringLen# "Show"# 4,
              Data.Text.unpackCStringLen# "Eq"# 2]
             containers-0.6.7:Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
             (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14))
             (EntityNameDB (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon
                      Nothing (Data.Text.unpackCStringLen# "PersonMaybeAgeId"# 16))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
             Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
             (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "PersonMay"# 9))
             (EntityNameDB (Data.Text.unpackCStringLen# "PersonMay"# 9))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonMayId"# 11))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [Data.Text.unpackCStringLen# "json"# 4] [] [] []
             [Data.Text.unpackCStringLen# "Show"# 4,
              Data.Text.unpackCStringLen# "Eq"# 2]
             containers-0.6.7:Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "color"# 5))
             (FieldNameDB (Data.Text.unpackCStringLen# "color"# 5))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "Pet"# 3))
             (EntityNameDB (Data.Text.unpackCStringLen# "Pet"# 3))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetId"# 5))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
             Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
             (FieldNameDB (Data.Text.unpackCStringLen# "ownerId"# 7)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "type"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetType"# 7))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13))
             (EntityNameDB (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon
                      Nothing (Data.Text.unpackCStringLen# "MaybeOwnedPetId"# 15))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
             Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
             (FieldNameDB (Data.Text.unpackCStringLen# "ownerId"# 7))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "type"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetType"# 7))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "NeedsPet"# 8))
             (EntityNameDB (Data.Text.unpackCStringLen# "NeedsPet"# 8))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NeedsPetId"# 10))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
             Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "petKey"# 6))
             (FieldNameDB (Data.Text.unpackCStringLen# "petKey"# 6)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetId"# 5))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "OutdoorPet"# 10))
             (EntityNameDB (Data.Text.unpackCStringLen# "OutdoorPet"# 10))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon
                      Nothing (Data.Text.unpackCStringLen# "OutdoorPetId"# 12))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
             Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
             (FieldNameDB (Data.Text.unpackCStringLen# "ownerId"# 7)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "collar"# 6))
             (FieldNameDB (Data.Text.unpackCStringLen# "collar"# 6)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetCollar"# 9))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "type"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetType"# 7))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "UserPT"# 6))
             (EntityNameDB (Data.Text.unpackCStringLen# "UserPT"# 6))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UserPTId"# 8))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] []
             [UniqueDef
                (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueUserPT"# 12))
                (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueUserPT"# 12))
                ((FieldNameHS (Data.Text.unpackCStringLen# "ident"# 5), 
                  FieldNameDB (Data.Text.unpackCStringLen# "ident"# 5))
                   NEL.:| [])
                []]
             [] [] containers-0.6.7:Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "ident"# 5))
             (FieldNameDB (Data.Text.unpackCStringLen# "ident"# 5)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "password"# 8))
             (FieldNameDB (Data.Text.unpackCStringLen# "password"# 8))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "EmailPT"# 7))
             (EntityNameDB (Data.Text.unpackCStringLen# "EmailPT"# 7))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "EmailPTId"# 9))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] []
             [UniqueDef
                (ConstraintNameHS
                   (Data.Text.unpackCStringLen# "UniqueEmailPT"# 13))
                (ConstraintNameDB
                   (Data.Text.unpackCStringLen# "UniqueEmailPT"# 13))
                ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
                  FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                   NEL.:| [])
                []]
             [] [] containers-0.6.7:Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
             (FieldNameDB (Data.Text.unpackCStringLen# "email"# 5)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "user"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "user"# 4))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UserPTId"# 8))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "verkey"# 6))
             (FieldNameDB (Data.Text.unpackCStringLen# "verkey"# 6))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "Upsert"# 6))
             (EntityNameDB (Data.Text.unpackCStringLen# "Upsert"# 6))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertId"# 8))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] []
             [UniqueDef
                (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueUpsert"# 12))
                (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueUpsert"# 12))
                ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
                  FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                   NEL.:| [])
                []]
             []
             [Data.Text.unpackCStringLen# "Eq"# 2,
              Data.Text.unpackCStringLen# "Show"# 4]
             containers-0.6.7:Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
             (FieldNameDB (Data.Text.unpackCStringLen# "email"# 5)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "attr"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "attr"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "extra"# 5))
             (FieldNameDB (Data.Text.unpackCStringLen# "extra"# 5)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
             (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "UpsertBy"# 8))
             (EntityNameDB (Data.Text.unpackCStringLen# "UpsertBy"# 8))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertById"# 10))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] []
             [UniqueDef
                (ConstraintNameHS
                   (Data.Text.unpackCStringLen# "UniqueUpsertBy"# 14))
                (ConstraintNameDB
                   (Data.Text.unpackCStringLen# "UniqueUpsertBy"# 14))
                ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
                  FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                   NEL.:| [])
                [],
              UniqueDef
                (ConstraintNameHS
                   (Data.Text.unpackCStringLen# "UniqueUpsertByCity"# 18))
                (ConstraintNameDB
                   (Data.Text.unpackCStringLen# "UniqueUpsertByCity"# 18))
                ((FieldNameHS (Data.Text.unpackCStringLen# "city"# 4), 
                  FieldNameDB (Data.Text.unpackCStringLen# "city"# 4))
                   NEL.:| [])
                []]
             []
             [Data.Text.unpackCStringLen# "Eq"# 2,
              Data.Text.unpackCStringLen# "Show"# 4]
             containers-0.6.7:Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
             (FieldNameDB (Data.Text.unpackCStringLen# "email"# 5)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "city"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "city"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "attr"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "attr"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "Strict"# 6))
             (EntityNameDB (Data.Text.unpackCStringLen# "Strict"# 6))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "StrictId"# 8))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
             Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "yes"# 3))
             (FieldNameDB (Data.Text.unpackCStringLen# "yes"# 3)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "no"# 2))
             (FieldNameDB (Data.Text.unpackCStringLen# "no"# 2)) [] False
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "def"# 3))
             (FieldNameDB (Data.Text.unpackCStringLen# "def"# 3)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing]])
  ======>
    instance PersistStore backend =>
             PersistField (PersonGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["name", "age", "color"]
    instance PersistStore backend =>
             PersistFieldSql (PersonGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (Person1Generic backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["name", "age"]
    instance PersistStore backend =>
             PersistFieldSql (Person1Generic backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (PersonMaybeAgeGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["name", "age"]
    instance PersistStore backend =>
             PersistFieldSql (PersonMaybeAgeGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (PersonMayGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["name", "color"]
    instance PersistStore backend =>
             PersistFieldSql (PersonMayGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (PetGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["ownerId", "name", "type"]
    instance PersistStore backend =>
             PersistFieldSql (PetGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (MaybeOwnedPetGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["ownerId", "name", "type"]
    instance PersistStore backend =>
             PersistFieldSql (MaybeOwnedPetGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (NeedsPetGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["petKey"]
    instance PersistStore backend =>
             PersistFieldSql (NeedsPetGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (OutdoorPetGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["ownerId", "collar", "type"]
    instance PersistStore backend =>
             PersistFieldSql (OutdoorPetGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (UserPTGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["ident", "password"]
    instance PersistStore backend =>
             PersistFieldSql (UserPTGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (EmailPTGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["email", "user", "verkey"]
    instance PersistStore backend =>
             PersistFieldSql (EmailPTGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (UpsertGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["email", "attr", "extra", "age"]
    instance PersistStore backend =>
             PersistFieldSql (UpsertGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (UpsertByGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["email", "city", "attr"]
    instance PersistStore backend =>
             PersistFieldSql (UpsertByGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (StrictGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["yes", "no", "def"]
    instance PersistStore backend =>
             PersistFieldSql (StrictGeneric backend) where
      sqlType _ = SqlString
    type Person = PersonGeneric SqlBackend
    data PersonGeneric backend
      = Person {personName :: !Text,
                personAge :: !Int,
                personColor :: !(Maybe Text)}
      deriving stock (Show, Eq)
    type PersonId = Key Person
    instance PersistStore backend =>
             PersistEntity (PersonGeneric backend) where
      type PersistEntityBackend (PersonGeneric backend) = backend
      data Unique (PersonGeneric backend) = PersonNameKey Text
      newtype Key (PersonGeneric backend)
        = PersonKey {unPersonKey :: (BackendKey backend)}
      data EntityField (PersonGeneric backend) typ
        = (typ ~ Key (PersonGeneric backend)) => PersonId |
          (typ ~ Text) => PersonName |
          (typ ~ Int) => PersonAge |
          (typ ~ Maybe Text) => PersonColor
      keyToValues
        = ((: [])
             . (toPersistValue . (\ PersonKey {unPersonKey = x} -> x)))
      keyFromValues
        = (fmap PersonKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_ahsq
        = ((Entity <$> fromField_ahsq PersonId)
             <*>
               (((pure Person <*> fromField_ahsq PersonName)
                   <*> fromField_ahsq PersonAge)
                  <*> fromField_ahsq PersonColor))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "Person"# 6))
            (EntityNameDB (Data.Text.unpackCStringLen# "Person"# 6))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [Data.Text.unpackCStringLen# "json"# 4] []
            [UniqueDef
               (ConstraintNameHS
                  (Data.Text.unpackCStringLen# "PersonNameKey"# 13))
               (ConstraintNameDB
                  (Data.Text.unpackCStringLen# "PersonNameKey"# 13))
               ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
                 FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
                  NEL.:| [])
               []]
            []
            [Data.Text.unpackCStringLen# "Show"# 4,
             Data.Text.unpackCStringLen# "Eq"# 2]
            containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "age"#
                                                                                                                                                                     3),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "age"#
                                                                                                                                                                3),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [FieldAttrOther
                                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                                    "some ignored -- \" attribute"#
                                                                                                                                                                    27)],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "color"#
                                                                                                                                                                     5),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "color"#
                                                                                                                                                                5),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "PersonId"#
                                                                                                                                                    8))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Person x_ahs0 x_ahs1 x_ahs2)
        = [toPersistValue x_ahs0, toPersistValue x_ahs1,
           toPersistValue x_ahs2]
      fromPersistValues [x1_ahs4, x2_ahs5, x3_ahs6]
        = Person
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Person"# 6)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x1_ahs4
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Person"# 6)
                    (Data.Text.unpackCStringLen# "age"# 3))
                 . fromPersistValue)
                x2_ahs5
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Person"# 6)
                    (Data.Text.unpackCStringLen# "color"# 5))
                 . fromPersistValue)
                x3_ahs6
      fromPersistValues x_ahs3
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "Person: fromPersistValues failed on: "# 37)
                 (Data.Text.Internal.pack $ show x_ahs3))
      persistUniqueToFieldNames PersonNameKey {}
        = ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
            FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
             NEL.:| [])
      persistUniqueToValues (PersonNameKey x_ahs7)
        = [toPersistValue x_ahs7]
      persistUniqueKeys (Person _name_ahs8 _age_ahs9 _color_ahsa)
        = [PersonNameKey _name_ahs8]
      persistFieldDef PersonId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef PersonName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Person)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistFieldDef PersonAge
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Person)
            (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
      persistFieldDef PersonColor
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Person)
            (FieldNameHS (Data.Text.unpackCStringLen# "color"# 5))
      persistIdField = PersonId
      fieldLens PersonId
        = lensPTH
            entityKey
            (\ (Entity _ value_ahsc) key_ahsd -> Entity key_ahsd value_ahsc)
      fieldLens PersonName
        = lensPTH
            ((\ Person {personName = x} -> x) . entityVal)
            (\ (Entity key_ahse value_ahsf) x_ahsg
               -> Entity
                    key_ahse
                    (case value_ahsf of
                       Person {personAge = personAge_ahsi, personColor = personColor_ahsj}
                         -> Person
                              {personName = x_ahsg, personAge = personAge,
                               personColor = personColor}))
      fieldLens PersonAge
        = lensPTH
            ((\ Person {personAge = x} -> x) . entityVal)
            (\ (Entity key_ahse value_ahsf) x_ahsg
               -> Entity
                    key_ahse
                    (case value_ahsf of
                       Person {personName = personName_ahsk,
                               personColor = personColor_ahsm}
                         -> Person
                              {personName = personName, personAge = x_ahsg,
                               personColor = personColor}))
      fieldLens PersonColor
        = lensPTH
            ((\ Person {personColor = x} -> x) . entityVal)
            (\ (Entity key_ahse value_ahsf) x_ahsg
               -> Entity
                    key_ahse
                    (case value_ahsf of
                       Person {personName = personName_ahsn, personAge = personAge_ahso}
                         -> Person
                              {personName = personName, personAge = personAge,
                               personColor = x_ahsg}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (PersonGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (PersonGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (PersonGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (PersonGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (PersonGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (PersonGeneric backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (PersonGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (PersonGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (PersonGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (PersonGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (PersonGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (PersonGeneric backend) where
      toBackendKey = \ PersonKey {unPersonKey = x} -> x
      fromBackendKey = PersonKey
    type Person1 = Person1Generic SqlBackend
    data Person1Generic backend
      = Person1 {person1Name :: !Text, person1Age :: !Int}
      deriving stock (Show, Eq)
    type Person1Id = Key Person1
    instance PersistStore backend =>
             PersistEntity (Person1Generic backend) where
      type PersistEntityBackend (Person1Generic backend) = backend
      data Unique (Person1Generic backend)
      newtype Key (Person1Generic backend)
        = Person1Key {unPerson1Key :: (BackendKey backend)}
      data EntityField (Person1Generic backend) typ
        = (typ ~ Key (Person1Generic backend)) => Person1Id |
          (typ ~ Text) => Person1Name |
          (typ ~ Int) => Person1Age
      keyToValues
        = ((: [])
             . (toPersistValue . (\ Person1Key {unPerson1Key = x} -> x)))
      keyFromValues
        = (fmap Person1Key
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_ahsI
        = ((Entity <$> fromField_ahsI Person1Id)
             <*>
               ((pure Person1 <*> fromField_ahsI Person1Name)
                  <*> fromField_ahsI Person1Age))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "Person1"# 7))
            (EntityNameDB (Data.Text.unpackCStringLen# "Person1"# 7))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Person1Id"# 9))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] []
            [Data.Text.unpackCStringLen# "Show"# 4,
             Data.Text.unpackCStringLen# "Eq"# 2]
            containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "age"#
                                                                                                                                                                     3),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "age"#
                                                                                                                                                                3),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Person1Id"#
                                                                                                                                                    9))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Person1 x_ahsr x_ahss)
        = [toPersistValue x_ahsr, toPersistValue x_ahss]
      fromPersistValues [x1_ahsu, x2_ahsv]
        = Person1
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Person1"# 7)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x1_ahsu
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Person1"# 7)
                    (Data.Text.unpackCStringLen# "age"# 3))
                 . fromPersistValue)
                x2_ahsv
      fromPersistValues x_ahst
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "Person1: fromPersistValues failed on: "# 38)
                 (Data.Text.Internal.pack $ show x_ahst))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Person1 _name_ahsw _age_ahsx) = []
      persistFieldDef Person1Id
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Person1Id"# 9))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef Person1Name
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Person1)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistFieldDef Person1Age
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Person1)
            (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
      persistIdField = Person1Id
      fieldLens Person1Id
        = lensPTH
            entityKey
            (\ (Entity _ value_ahsz) key_ahsA -> Entity key_ahsA value_ahsz)
      fieldLens Person1Name
        = lensPTH
            ((\ Person1 {person1Name = x} -> x) . entityVal)
            (\ (Entity key_ahsB value_ahsC) x_ahsD
               -> Entity
                    key_ahsB
                    (case value_ahsC of
                       Person1 {person1Age = person1Age_ahsF}
                         -> Person1 {person1Name = x_ahsD, person1Age = person1Age}))
      fieldLens Person1Age
        = lensPTH
            ((\ Person1 {person1Age = x} -> x) . entityVal)
            (\ (Entity key_ahsB value_ahsC) x_ahsD
               -> Entity
                    key_ahsB
                    (case value_ahsC of
                       Person1 {person1Name = person1Name_ahsG}
                         -> Person1 {person1Name = person1Name, person1Age = x_ahsD}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (Person1Generic backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (Person1Generic backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (Person1Generic backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (Person1Generic backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (Person1Generic backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (Person1Generic backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (Person1Generic backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (Person1Generic backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (Person1Generic backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (Person1Generic backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (Person1Generic backend))
    instance PersistStore backend =>
             ToBackendKey backend (Person1Generic backend) where
      toBackendKey = \ Person1Key {unPerson1Key = x} -> x
      fromBackendKey = Person1Key
    type PersonMaybeAge = PersonMaybeAgeGeneric SqlBackend
    data PersonMaybeAgeGeneric backend
      = PersonMaybeAge {personMaybeAgeName :: !Text,
                        personMaybeAgeAge :: !(Maybe Int)}
    type PersonMaybeAgeId = Key PersonMaybeAge
    instance PersistStore backend =>
             PersistEntity (PersonMaybeAgeGeneric backend) where
      type PersistEntityBackend (PersonMaybeAgeGeneric backend) = backend
      data Unique (PersonMaybeAgeGeneric backend)
      newtype Key (PersonMaybeAgeGeneric backend)
        = PersonMaybeAgeKey {unPersonMaybeAgeKey :: (BackendKey backend)}
      data EntityField (PersonMaybeAgeGeneric backend) typ
        = (typ ~ Key (PersonMaybeAgeGeneric backend)) => PersonMaybeAgeId |
          (typ ~ Text) => PersonMaybeAgeName |
          (typ ~ Maybe Int) => PersonMaybeAgeAge
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ PersonMaybeAgeKey {unPersonMaybeAgeKey = x} -> x)))
      keyFromValues
        = (fmap PersonMaybeAgeKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_aht0
        = ((Entity <$> fromField_aht0 PersonMaybeAgeId)
             <*>
               ((pure PersonMaybeAge <*> fromField_aht0 PersonMaybeAgeName)
                  <*> fromField_aht0 PersonMaybeAgeAge))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14))
            (EntityNameDB (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "PersonMaybeAgeId"# 16))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "age"#
                                                                                                                                                                     3),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "age"#
                                                                                                                                                                3),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "PersonMaybeAgeId"#
                                                                                                                                                    16))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (PersonMaybeAge x_ahsJ x_ahsK)
        = [toPersistValue x_ahsJ, toPersistValue x_ahsK]
      fromPersistValues [x1_ahsM, x2_ahsN]
        = PersonMaybeAge
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x1_ahsM
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14)
                    (Data.Text.unpackCStringLen# "age"# 3))
                 . fromPersistValue)
                x2_ahsN
      fromPersistValues x_ahsL
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "PersonMaybeAge: fromPersistValues failed on: "# 45)
                 (Data.Text.Internal.pack $ show x_ahsL))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (PersonMaybeAge _name_ahsO _age_ahsP) = []
      persistFieldDef PersonMaybeAgeId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "PersonMaybeAgeId"# 16))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef PersonMaybeAgeName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy PersonMaybeAge)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistFieldDef PersonMaybeAgeAge
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy PersonMaybeAge)
            (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
      persistIdField = PersonMaybeAgeId
      fieldLens PersonMaybeAgeId
        = lensPTH
            entityKey
            (\ (Entity _ value_ahsR) key_ahsS -> Entity key_ahsS value_ahsR)
      fieldLens PersonMaybeAgeName
        = lensPTH
            ((\ PersonMaybeAge {personMaybeAgeName = x} -> x) . entityVal)
            (\ (Entity key_ahsT value_ahsU) x_ahsV
               -> Entity
                    key_ahsT
                    (case value_ahsU of
                       PersonMaybeAge {personMaybeAgeAge = personMaybeAgeAge_ahsX}
                         -> PersonMaybeAge
                              {personMaybeAgeName = x_ahsV,
                               personMaybeAgeAge = personMaybeAgeAge}))
      fieldLens PersonMaybeAgeAge
        = lensPTH
            ((\ PersonMaybeAge {personMaybeAgeAge = x} -> x) . entityVal)
            (\ (Entity key_ahsT value_ahsU) x_ahsV
               -> Entity
                    key_ahsT
                    (case value_ahsU of
                       PersonMaybeAge {personMaybeAgeName = personMaybeAgeName_ahsY}
                         -> PersonMaybeAge
                              {personMaybeAgeName = personMaybeAgeName,
                               personMaybeAgeAge = x_ahsV}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (PersonMaybeAgeGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (PersonMaybeAgeGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (PersonMaybeAgeGeneric backend) where
      toBackendKey = \ PersonMaybeAgeKey {unPersonMaybeAgeKey = x} -> x
      fromBackendKey = PersonMaybeAgeKey
    type PersonMay = PersonMayGeneric SqlBackend
    data PersonMayGeneric backend
      = PersonMay {personMayName :: !(Maybe Text),
                   personMayColor :: !(Maybe Text)}
      deriving stock (Show, Eq)
    type PersonMayId = Key PersonMay
    instance PersistStore backend =>
             PersistEntity (PersonMayGeneric backend) where
      type PersistEntityBackend (PersonMayGeneric backend) = backend
      data Unique (PersonMayGeneric backend)
      newtype Key (PersonMayGeneric backend)
        = PersonMayKey {unPersonMayKey :: (BackendKey backend)}
      data EntityField (PersonMayGeneric backend) typ
        = (typ ~ Key (PersonMayGeneric backend)) => PersonMayId |
          (typ ~ Maybe Text) => PersonMayName |
          (typ ~ Maybe Text) => PersonMayColor
      keyToValues
        = ((: [])
             . (toPersistValue . (\ PersonMayKey {unPersonMayKey = x} -> x)))
      keyFromValues
        = (fmap PersonMayKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_ahti
        = ((Entity <$> fromField_ahti PersonMayId)
             <*>
               ((pure PersonMay <*> fromField_ahti PersonMayName)
                  <*> fromField_ahti PersonMayColor))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "PersonMay"# 9))
            (EntityNameDB (Data.Text.unpackCStringLen# "PersonMay"# 9))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonMayId"# 11))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [Data.Text.unpackCStringLen# "json"# 4] [] [] []
            [Data.Text.unpackCStringLen# "Show"# 4,
             Data.Text.unpackCStringLen# "Eq"# 2]
            containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "color"#
                                                                                                                                                                     5),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "color"#
                                                                                                                                                                5),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "PersonMayId"#
                                                                                                                                                    11))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (PersonMay x_aht1 x_aht2)
        = [toPersistValue x_aht1, toPersistValue x_aht2]
      fromPersistValues [x1_aht4, x2_aht5]
        = PersonMay
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "PersonMay"# 9)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x1_aht4
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "PersonMay"# 9)
                    (Data.Text.unpackCStringLen# "color"# 5))
                 . fromPersistValue)
                x2_aht5
      fromPersistValues x_aht3
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "PersonMay: fromPersistValues failed on: "# 40)
                 (Data.Text.Internal.pack $ show x_aht3))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (PersonMay _name_aht6 _color_aht7) = []
      persistFieldDef PersonMayId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonMayId"# 11))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef PersonMayName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy PersonMay)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistFieldDef PersonMayColor
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy PersonMay)
            (FieldNameHS (Data.Text.unpackCStringLen# "color"# 5))
      persistIdField = PersonMayId
      fieldLens PersonMayId
        = lensPTH
            entityKey
            (\ (Entity _ value_aht9) key_ahta -> Entity key_ahta value_aht9)
      fieldLens PersonMayName
        = lensPTH
            ((\ PersonMay {personMayName = x} -> x) . entityVal)
            (\ (Entity key_ahtb value_ahtc) x_ahtd
               -> Entity
                    key_ahtb
                    (case value_ahtc of
                       PersonMay {personMayColor = personMayColor_ahtf}
                         -> PersonMay
                              {personMayName = x_ahtd, personMayColor = personMayColor}))
      fieldLens PersonMayColor
        = lensPTH
            ((\ PersonMay {personMayColor = x} -> x) . entityVal)
            (\ (Entity key_ahtb value_ahtc) x_ahtd
               -> Entity
                    key_ahtb
                    (case value_ahtc of
                       PersonMay {personMayName = personMayName_ahtg}
                         -> PersonMay
                              {personMayName = personMayName, personMayColor = x_ahtd}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (PersonMayGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (PersonMayGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (PersonMayGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (PersonMayGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (PersonMayGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (PersonMayGeneric backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (PersonMayGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (PersonMayGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (PersonMayGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (PersonMayGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (PersonMayGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (PersonMayGeneric backend) where
      toBackendKey = \ PersonMayKey {unPersonMayKey = x} -> x
      fromBackendKey = PersonMayKey
    type Pet = PetGeneric SqlBackend
    data PetGeneric backend
      = Pet {petOwnerId :: !(Key (PersonGeneric backend)),
             petName :: !Text,
             petType :: !PetType}
    type PetId = Key Pet
    instance PersistStore backend =>
             PersistEntity (PetGeneric backend) where
      type PersistEntityBackend (PetGeneric backend) = backend
      data Unique (PetGeneric backend)
      newtype Key (PetGeneric backend)
        = PetKey {unPetKey :: (BackendKey backend)}
      data EntityField (PetGeneric backend) typ
        = (typ ~ Key (PetGeneric backend)) => PetId |
          (typ ~ Key (PersonGeneric backend)) => PetOwnerId |
          (typ ~ Text) => PetName |
          (typ ~ PetType) => PetType
      keyToValues
        = ((: []) . (toPersistValue . (\ PetKey {unPetKey = x} -> x)))
      keyFromValues
        = (fmap PetKey . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_ahtI
        = ((Entity <$> fromField_ahtI PetId)
             <*>
               (((pure Pet <*> fromField_ahtI PetOwnerId)
                   <*> fromField_ahtI PetName)
                  <*> fromField_ahtI PetType))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "Pet"# 3))
            (EntityNameDB (Data.Text.unpackCStringLen# "Pet"# 3))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetId"# 5))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "ownerId"#
                                                                                                                                                                     7),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "ownerId"#
                                                                                                                                                                7),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PersonId"#
                                                                                                                                                                  8),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PersonId),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "Person"#
                                                                                                                                                                          6)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "type"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "type"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PetType"#
                                                                                                                                                                  7),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PetType),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "PetId"#
                                                                                                                                                    5))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Pet x_ahtj x_ahtk x_ahtl)
        = [toPersistValue x_ahtj, toPersistValue x_ahtk,
           toPersistValue x_ahtl]
      fromPersistValues [x1_ahtn, x2_ahto, x3_ahtp]
        = Pet
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Pet"# 3)
                    (Data.Text.unpackCStringLen# "ownerId"# 7))
                 . fromPersistValue)
                x1_ahtn
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Pet"# 3)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x2_ahto
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Pet"# 3)
                    (Data.Text.unpackCStringLen# "type"# 4))
                 . fromPersistValue)
                x3_ahtp
      fromPersistValues x_ahtm
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "Pet: fromPersistValues failed on: "# 34)
                 (Data.Text.Internal.pack $ show x_ahtm))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Pet _ownerId_ahtq _name_ahtr _type_ahts) = []
      persistFieldDef PetId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetId"# 5))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef PetOwnerId
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Pet)
            (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
      persistFieldDef PetName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Pet)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistFieldDef PetType
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Pet)
            (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
      persistIdField = PetId
      fieldLens PetId
        = lensPTH
            entityKey
            (\ (Entity _ value_ahtu) key_ahtv -> Entity key_ahtv value_ahtu)
      fieldLens PetOwnerId
        = lensPTH
            ((\ Pet {petOwnerId = x} -> x) . entityVal)
            (\ (Entity key_ahtw value_ahtx) x_ahty
               -> Entity
                    key_ahtw
                    (case value_ahtx of
                       Pet {petName = petName_ahtA, petType = petType_ahtB}
                         -> Pet
                              {petOwnerId = x_ahty, petName = petName, petType = petType}))
      fieldLens PetName
        = lensPTH
            ((\ Pet {petName = x} -> x) . entityVal)
            (\ (Entity key_ahtw value_ahtx) x_ahty
               -> Entity
                    key_ahtw
                    (case value_ahtx of
                       Pet {petOwnerId = petOwnerId_ahtC, petType = petType_ahtE}
                         -> Pet
                              {petOwnerId = petOwnerId, petName = x_ahty, petType = petType}))
      fieldLens PetType
        = lensPTH
            ((\ Pet {petType = x} -> x) . entityVal)
            (\ (Entity key_ahtw value_ahtx) x_ahty
               -> Entity
                    key_ahtw
                    (case value_ahtx of
                       Pet {petOwnerId = petOwnerId_ahtF, petName = petName_ahtG}
                         -> Pet
                              {petOwnerId = petOwnerId, petName = petName, petType = x_ahty}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (PetGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (PetGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (PetGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (PetGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (PetGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (PetGeneric backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (PetGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (PetGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (PetGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (PetGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (PetGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (PetGeneric backend) where
      toBackendKey = \ PetKey {unPetKey = x} -> x
      fromBackendKey = PetKey
    type MaybeOwnedPet = MaybeOwnedPetGeneric SqlBackend
    data MaybeOwnedPetGeneric backend
      = MaybeOwnedPet {maybeOwnedPetOwnerId :: !(Maybe (Key (PersonGeneric backend))),
                       maybeOwnedPetName :: !Text,
                       maybeOwnedPetType :: !PetType}
    type MaybeOwnedPetId = Key MaybeOwnedPet
    instance PersistStore backend =>
             PersistEntity (MaybeOwnedPetGeneric backend) where
      type PersistEntityBackend (MaybeOwnedPetGeneric backend) = backend
      data Unique (MaybeOwnedPetGeneric backend)
      newtype Key (MaybeOwnedPetGeneric backend)
        = MaybeOwnedPetKey {unMaybeOwnedPetKey :: (BackendKey backend)}
      data EntityField (MaybeOwnedPetGeneric backend) typ
        = (typ ~ Key (MaybeOwnedPetGeneric backend)) => MaybeOwnedPetId |
          (typ ~ Maybe (Key (PersonGeneric backend))) =>
          MaybeOwnedPetOwnerId |
          (typ ~ Text) => MaybeOwnedPetName |
          (typ ~ PetType) => MaybeOwnedPetType
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ MaybeOwnedPetKey {unMaybeOwnedPetKey = x} -> x)))
      keyFromValues
        = (fmap MaybeOwnedPetKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_ahu8
        = ((Entity <$> fromField_ahu8 MaybeOwnedPetId)
             <*>
               (((pure MaybeOwnedPet <*> fromField_ahu8 MaybeOwnedPetOwnerId)
                   <*> fromField_ahu8 MaybeOwnedPetName)
                  <*> fromField_ahu8 MaybeOwnedPetType))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13))
            (EntityNameDB (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "MaybeOwnedPetId"# 15))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "ownerId"#
                                                                                                                                                                     7),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "ownerId"#
                                                                                                                                                                7),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PersonId"#
                                                                                                                                                                  8),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PersonId),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "Person"#
                                                                                                                                                                          6)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "type"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "type"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PetType"#
                                                                                                                                                                  7),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PetType),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "MaybeOwnedPetId"#
                                                                                                                                                    15))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (MaybeOwnedPet x_ahtJ x_ahtK x_ahtL)
        = [toPersistValue x_ahtJ, toPersistValue x_ahtK,
           toPersistValue x_ahtL]
      fromPersistValues [x1_ahtN, x2_ahtO, x3_ahtP]
        = MaybeOwnedPet
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13)
                    (Data.Text.unpackCStringLen# "ownerId"# 7))
                 . fromPersistValue)
                x1_ahtN
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x2_ahtO
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13)
                    (Data.Text.unpackCStringLen# "type"# 4))
                 . fromPersistValue)
                x3_ahtP
      fromPersistValues x_ahtM
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "MaybeOwnedPet: fromPersistValues failed on: "# 44)
                 (Data.Text.Internal.pack $ show x_ahtM))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (MaybeOwnedPet _ownerId_ahtQ _name_ahtR _type_ahtS)
        = []
      persistFieldDef MaybeOwnedPetId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "MaybeOwnedPetId"# 15))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef MaybeOwnedPetOwnerId
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy MaybeOwnedPet)
            (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
      persistFieldDef MaybeOwnedPetName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy MaybeOwnedPet)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistFieldDef MaybeOwnedPetType
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy MaybeOwnedPet)
            (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
      persistIdField = MaybeOwnedPetId
      fieldLens MaybeOwnedPetId
        = lensPTH
            entityKey
            (\ (Entity _ value_ahtU) key_ahtV -> Entity key_ahtV value_ahtU)
      fieldLens MaybeOwnedPetOwnerId
        = lensPTH
            ((\ MaybeOwnedPet {maybeOwnedPetOwnerId = x} -> x) . entityVal)
            (\ (Entity key_ahtW value_ahtX) x_ahtY
               -> Entity
                    key_ahtW
                    (case value_ahtX of
                       MaybeOwnedPet {maybeOwnedPetName = maybeOwnedPetName_ahu0,
                                      maybeOwnedPetType = maybeOwnedPetType_ahu1}
                         -> MaybeOwnedPet
                              {maybeOwnedPetOwnerId = x_ahtY,
                               maybeOwnedPetName = maybeOwnedPetName,
                               maybeOwnedPetType = maybeOwnedPetType}))
      fieldLens MaybeOwnedPetName
        = lensPTH
            ((\ MaybeOwnedPet {maybeOwnedPetName = x} -> x) . entityVal)
            (\ (Entity key_ahtW value_ahtX) x_ahtY
               -> Entity
                    key_ahtW
                    (case value_ahtX of
                       MaybeOwnedPet {maybeOwnedPetOwnerId = maybeOwnedPetOwnerId_ahu2,
                                      maybeOwnedPetType = maybeOwnedPetType_ahu4}
                         -> MaybeOwnedPet
                              {maybeOwnedPetOwnerId = maybeOwnedPetOwnerId,
                               maybeOwnedPetName = x_ahtY,
                               maybeOwnedPetType = maybeOwnedPetType}))
      fieldLens MaybeOwnedPetType
        = lensPTH
            ((\ MaybeOwnedPet {maybeOwnedPetType = x} -> x) . entityVal)
            (\ (Entity key_ahtW value_ahtX) x_ahtY
               -> Entity
                    key_ahtW
                    (case value_ahtX of
                       MaybeOwnedPet {maybeOwnedPetOwnerId = maybeOwnedPetOwnerId_ahu5,
                                      maybeOwnedPetName = maybeOwnedPetName_ahu6}
                         -> MaybeOwnedPet
                              {maybeOwnedPetOwnerId = maybeOwnedPetOwnerId,
                               maybeOwnedPetName = maybeOwnedPetName,
                               maybeOwnedPetType = x_ahtY}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (MaybeOwnedPetGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (MaybeOwnedPetGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (MaybeOwnedPetGeneric backend) where
      toBackendKey = \ MaybeOwnedPetKey {unMaybeOwnedPetKey = x} -> x
      fromBackendKey = MaybeOwnedPetKey
    type NeedsPet = NeedsPetGeneric SqlBackend
    data NeedsPetGeneric backend
      = NeedsPet {needsPetPetKey :: !(Key (PetGeneric backend))}
    type NeedsPetId = Key NeedsPet
    instance PersistStore backend =>
             PersistEntity (NeedsPetGeneric backend) where
      type PersistEntityBackend (NeedsPetGeneric backend) = backend
      data Unique (NeedsPetGeneric backend)
      newtype Key (NeedsPetGeneric backend)
        = NeedsPetKey {unNeedsPetKey :: (BackendKey backend)}
      data EntityField (NeedsPetGeneric backend) typ
        = (typ ~ Key (NeedsPetGeneric backend)) => NeedsPetId |
          (typ ~ Key (PetGeneric backend)) => NeedsPetPetKey
      keyToValues
        = ((: [])
             . (toPersistValue . (\ NeedsPetKey {unNeedsPetKey = x} -> x)))
      keyFromValues
        = (fmap NeedsPetKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_ahuk
        = ((Entity <$> fromField_ahuk NeedsPetId)
             <*> (pure NeedsPet <*> fromField_ahuk NeedsPetPetKey))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "NeedsPet"# 8))
            (EntityNameDB (Data.Text.unpackCStringLen# "NeedsPet"# 8))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NeedsPetId"# 10))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "petKey"#
                                                                                                                                                                     6),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "petKey"#
                                                                                                                                                                6),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PetId"#
                                                                                                                                                                  5),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PetId),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "Pet"#
                                                                                                                                                                          3)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "NeedsPetId"#
                                                                                                                                                    10))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (NeedsPet x_ahu9) = [toPersistValue x_ahu9]
      fromPersistValues [x1_ahub]
        = NeedsPet
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "NeedsPet"# 8)
                    (Data.Text.unpackCStringLen# "petKey"# 6))
                 . fromPersistValue)
                x1_ahub
      fromPersistValues x_ahua
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "NeedsPet: fromPersistValues failed on: "# 39)
                 (Data.Text.Internal.pack $ show x_ahua))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (NeedsPet _petKey_ahuc) = []
      persistFieldDef NeedsPetId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NeedsPetId"# 10))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef NeedsPetPetKey
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy NeedsPet)
            (FieldNameHS (Data.Text.unpackCStringLen# "petKey"# 6))
      persistIdField = NeedsPetId
      fieldLens NeedsPetId
        = lensPTH
            entityKey
            (\ (Entity _ value_ahue) key_ahuf -> Entity key_ahuf value_ahue)
      fieldLens NeedsPetPetKey
        = lensPTH
            ((\ NeedsPet {needsPetPetKey = x} -> x) . entityVal)
            (\ (Entity key_ahug value_ahuh) x_ahui
               -> Entity
                    key_ahug
                    (case value_ahuh of
                       NeedsPet {} -> NeedsPet {needsPetPetKey = x_ahui}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (NeedsPetGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (NeedsPetGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (NeedsPetGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (NeedsPetGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (NeedsPetGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (NeedsPetGeneric backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (NeedsPetGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (NeedsPetGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (NeedsPetGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (NeedsPetGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (NeedsPetGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (NeedsPetGeneric backend) where
      toBackendKey = \ NeedsPetKey {unNeedsPetKey = x} -> x
      fromBackendKey = NeedsPetKey
    type OutdoorPet = OutdoorPetGeneric SqlBackend
    data OutdoorPetGeneric backend
      = OutdoorPet {outdoorPetOwnerId :: !(Key (PersonGeneric backend)),
                    outdoorPetCollar :: !PetCollar,
                    outdoorPetType :: !PetType}
    type OutdoorPetId = Key OutdoorPet
    instance PersistStore backend =>
             PersistEntity (OutdoorPetGeneric backend) where
      type PersistEntityBackend (OutdoorPetGeneric backend) = backend
      data Unique (OutdoorPetGeneric backend)
      newtype Key (OutdoorPetGeneric backend)
        = OutdoorPetKey {unOutdoorPetKey :: (BackendKey backend)}
      data EntityField (OutdoorPetGeneric backend) typ
        = (typ ~ Key (OutdoorPetGeneric backend)) => OutdoorPetId |
          (typ ~ Key (PersonGeneric backend)) => OutdoorPetOwnerId |
          (typ ~ PetCollar) => OutdoorPetCollar |
          (typ ~ PetType) => OutdoorPetType
      keyToValues
        = ((: [])
             . (toPersistValue . (\ OutdoorPetKey {unOutdoorPetKey = x} -> x)))
      keyFromValues
        = (fmap OutdoorPetKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_ahuK
        = ((Entity <$> fromField_ahuK OutdoorPetId)
             <*>
               (((pure OutdoorPet <*> fromField_ahuK OutdoorPetOwnerId)
                   <*> fromField_ahuK OutdoorPetCollar)
                  <*> fromField_ahuK OutdoorPetType))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "OutdoorPet"# 10))
            (EntityNameDB (Data.Text.unpackCStringLen# "OutdoorPet"# 10))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "OutdoorPetId"# 12))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "ownerId"#
                                                                                                                                                                     7),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "ownerId"#
                                                                                                                                                                7),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PersonId"#
                                                                                                                                                                  8),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PersonId),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "Person"#
                                                                                                                                                                          6)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "collar"#
                                                                                                                                                                     6),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "collar"#
                                                                                                                                                                6),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PetCollar"#
                                                                                                                                                                  9),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PetCollar),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "type"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "type"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PetType"#
                                                                                                                                                                  7),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PetType),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "OutdoorPetId"#
                                                                                                                                                    12))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (OutdoorPet x_ahul x_ahum x_ahun)
        = [toPersistValue x_ahul, toPersistValue x_ahum,
           toPersistValue x_ahun]
      fromPersistValues [x1_ahup, x2_ahuq, x3_ahur]
        = OutdoorPet
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "OutdoorPet"# 10)
                    (Data.Text.unpackCStringLen# "ownerId"# 7))
                 . fromPersistValue)
                x1_ahup
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "OutdoorPet"# 10)
                    (Data.Text.unpackCStringLen# "collar"# 6))
                 . fromPersistValue)
                x2_ahuq
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "OutdoorPet"# 10)
                    (Data.Text.unpackCStringLen# "type"# 4))
                 . fromPersistValue)
                x3_ahur
      fromPersistValues x_ahuo
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "OutdoorPet: fromPersistValues failed on: "# 41)
                 (Data.Text.Internal.pack $ show x_ahuo))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (OutdoorPet _ownerId_ahus _collar_ahut _type_ahuu)
        = []
      persistFieldDef OutdoorPetId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "OutdoorPetId"# 12))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef OutdoorPetOwnerId
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy OutdoorPet)
            (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
      persistFieldDef OutdoorPetCollar
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy OutdoorPet)
            (FieldNameHS (Data.Text.unpackCStringLen# "collar"# 6))
      persistFieldDef OutdoorPetType
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy OutdoorPet)
            (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
      persistIdField = OutdoorPetId
      fieldLens OutdoorPetId
        = lensPTH
            entityKey
            (\ (Entity _ value_ahuw) key_ahux -> Entity key_ahux value_ahuw)
      fieldLens OutdoorPetOwnerId
        = lensPTH
            ((\ OutdoorPet {outdoorPetOwnerId = x} -> x) . entityVal)
            (\ (Entity key_ahuy value_ahuz) x_ahuA
               -> Entity
                    key_ahuy
                    (case value_ahuz of
                       OutdoorPet {outdoorPetCollar = outdoorPetCollar_ahuC,
                                   outdoorPetType = outdoorPetType_ahuD}
                         -> OutdoorPet
                              {outdoorPetOwnerId = x_ahuA, outdoorPetCollar = outdoorPetCollar,
                               outdoorPetType = outdoorPetType}))
      fieldLens OutdoorPetCollar
        = lensPTH
            ((\ OutdoorPet {outdoorPetCollar = x} -> x) . entityVal)
            (\ (Entity key_ahuy value_ahuz) x_ahuA
               -> Entity
                    key_ahuy
                    (case value_ahuz of
                       OutdoorPet {outdoorPetOwnerId = outdoorPetOwnerId_ahuE,
                                   outdoorPetType = outdoorPetType_ahuG}
                         -> OutdoorPet
                              {outdoorPetOwnerId = outdoorPetOwnerId, outdoorPetCollar = x_ahuA,
                               outdoorPetType = outdoorPetType}))
      fieldLens OutdoorPetType
        = lensPTH
            ((\ OutdoorPet {outdoorPetType = x} -> x) . entityVal)
            (\ (Entity key_ahuy value_ahuz) x_ahuA
               -> Entity
                    key_ahuy
                    (case value_ahuz of
                       OutdoorPet {outdoorPetOwnerId = outdoorPetOwnerId_ahuH,
                                   outdoorPetCollar = outdoorPetCollar_ahuI}
                         -> OutdoorPet
                              {outdoorPetOwnerId = outdoorPetOwnerId,
                               outdoorPetCollar = outdoorPetCollar, outdoorPetType = x_ahuA}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (OutdoorPetGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (OutdoorPetGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (OutdoorPetGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (OutdoorPetGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (OutdoorPetGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (OutdoorPetGeneric backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (OutdoorPetGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (OutdoorPetGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (OutdoorPetGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (OutdoorPetGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (OutdoorPetGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (OutdoorPetGeneric backend) where
      toBackendKey = \ OutdoorPetKey {unOutdoorPetKey = x} -> x
      fromBackendKey = OutdoorPetKey
    type UserPT = UserPTGeneric SqlBackend
    data UserPTGeneric backend
      = UserPT {userPTIdent :: !Text, userPTPassword :: !(Maybe Text)}
    type UserPTId = Key UserPT
    instance PersistStore backend =>
             PersistEntity (UserPTGeneric backend) where
      type PersistEntityBackend (UserPTGeneric backend) = backend
      data Unique (UserPTGeneric backend) = UniqueUserPT Text
      newtype Key (UserPTGeneric backend)
        = UserPTKey {unUserPTKey :: (BackendKey backend)}
      data EntityField (UserPTGeneric backend) typ
        = (typ ~ Key (UserPTGeneric backend)) => UserPTId |
          (typ ~ Text) => UserPTIdent |
          (typ ~ Maybe Text) => UserPTPassword
      keyToValues
        = ((: [])
             . (toPersistValue . (\ UserPTKey {unUserPTKey = x} -> x)))
      keyFromValues
        = (fmap UserPTKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_ahv3
        = ((Entity <$> fromField_ahv3 UserPTId)
             <*>
               ((pure UserPT <*> fromField_ahv3 UserPTIdent)
                  <*> fromField_ahv3 UserPTPassword))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "UserPT"# 6))
            (EntityNameDB (Data.Text.unpackCStringLen# "UserPT"# 6))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UserPTId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] []
            [UniqueDef
               (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueUserPT"# 12))
               (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueUserPT"# 12))
               ((FieldNameHS (Data.Text.unpackCStringLen# "ident"# 5), 
                 FieldNameDB (Data.Text.unpackCStringLen# "ident"# 5))
                  NEL.:| [])
               []]
            [] [] containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "ident"#
                                                                                                                                                                     5),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "ident"#
                                                                                                                                                                5),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "password"#
                                                                                                                                                                     8),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "password"#
                                                                                                                                                                8),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "UserPTId"#
                                                                                                                                                    8))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (UserPT x_ahuL x_ahuM)
        = [toPersistValue x_ahuL, toPersistValue x_ahuM]
      fromPersistValues [x1_ahuO, x2_ahuP]
        = UserPT
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "UserPT"# 6)
                    (Data.Text.unpackCStringLen# "ident"# 5))
                 . fromPersistValue)
                x1_ahuO
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "UserPT"# 6)
                    (Data.Text.unpackCStringLen# "password"# 8))
                 . fromPersistValue)
                x2_ahuP
      fromPersistValues x_ahuN
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "UserPT: fromPersistValues failed on: "# 37)
                 (Data.Text.Internal.pack $ show x_ahuN))
      persistUniqueToFieldNames UniqueUserPT {}
        = ((FieldNameHS (Data.Text.unpackCStringLen# "ident"# 5), 
            FieldNameDB (Data.Text.unpackCStringLen# "ident"# 5))
             NEL.:| [])
      persistUniqueToValues (UniqueUserPT x_ahuQ)
        = [toPersistValue x_ahuQ]
      persistUniqueKeys (UserPT _ident_ahuR _password_ahuS)
        = [UniqueUserPT _ident_ahuR]
      persistFieldDef UserPTId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UserPTId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef UserPTIdent
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy UserPT)
            (FieldNameHS (Data.Text.unpackCStringLen# "ident"# 5))
      persistFieldDef UserPTPassword
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy UserPT)
            (FieldNameHS (Data.Text.unpackCStringLen# "password"# 8))
      persistIdField = UserPTId
      fieldLens UserPTId
        = lensPTH
            entityKey
            (\ (Entity _ value_ahuU) key_ahuV -> Entity key_ahuV value_ahuU)
      fieldLens UserPTIdent
        = lensPTH
            ((\ UserPT {userPTIdent = x} -> x) . entityVal)
            (\ (Entity key_ahuW value_ahuX) x_ahuY
               -> Entity
                    key_ahuW
                    (case value_ahuX of
                       UserPT {userPTPassword = userPTPassword_ahv0}
                         -> UserPT {userPTIdent = x_ahuY, userPTPassword = userPTPassword}))
      fieldLens UserPTPassword
        = lensPTH
            ((\ UserPT {userPTPassword = x} -> x) . entityVal)
            (\ (Entity key_ahuW value_ahuX) x_ahuY
               -> Entity
                    key_ahuW
                    (case value_ahuX of
                       UserPT {userPTIdent = userPTIdent_ahv1}
                         -> UserPT {userPTIdent = userPTIdent, userPTPassword = x_ahuY}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (UserPTGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (UserPTGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (UserPTGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (UserPTGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (UserPTGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (UserPTGeneric backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (UserPTGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (UserPTGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (UserPTGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (UserPTGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (UserPTGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (UserPTGeneric backend) where
      toBackendKey = \ UserPTKey {unUserPTKey = x} -> x
      fromBackendKey = UserPTKey
    type EmailPT = EmailPTGeneric SqlBackend
    data EmailPTGeneric backend
      = EmailPT {emailPTEmail :: !Text,
                 emailPTUser :: !(Maybe (Key (UserPTGeneric backend))),
                 emailPTVerkey :: !(Maybe Text)}
    type EmailPTId = Key EmailPT
    instance PersistStore backend =>
             PersistEntity (EmailPTGeneric backend) where
      type PersistEntityBackend (EmailPTGeneric backend) = backend
      data Unique (EmailPTGeneric backend) = UniqueEmailPT Text
      newtype Key (EmailPTGeneric backend)
        = EmailPTKey {unEmailPTKey :: (BackendKey backend)}
      data EntityField (EmailPTGeneric backend) typ
        = (typ ~ Key (EmailPTGeneric backend)) => EmailPTId |
          (typ ~ Text) => EmailPTEmail |
          (typ ~ Maybe (Key (UserPTGeneric backend))) => EmailPTUser |
          (typ ~ Maybe Text) => EmailPTVerkey
      keyToValues
        = ((: [])
             . (toPersistValue . (\ EmailPTKey {unEmailPTKey = x} -> x)))
      keyFromValues
        = (fmap EmailPTKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_ahvu
        = ((Entity <$> fromField_ahvu EmailPTId)
             <*>
               (((pure EmailPT <*> fromField_ahvu EmailPTEmail)
                   <*> fromField_ahvu EmailPTUser)
                  <*> fromField_ahvu EmailPTVerkey))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "EmailPT"# 7))
            (EntityNameDB (Data.Text.unpackCStringLen# "EmailPT"# 7))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "EmailPTId"# 9))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] []
            [UniqueDef
               (ConstraintNameHS
                  (Data.Text.unpackCStringLen# "UniqueEmailPT"# 13))
               (ConstraintNameDB
                  (Data.Text.unpackCStringLen# "UniqueEmailPT"# 13))
               ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
                 FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                  NEL.:| [])
               []]
            [] [] containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "email"#
                                                                                                                                                                     5),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "email"#
                                                                                                                                                                5),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "user"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "user"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "UserPTId"#
                                                                                                                                                                  8),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy UserPTId),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "UserPT"#
                                                                                                                                                                          6)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "verkey"#
                                                                                                                                                                     6),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "verkey"#
                                                                                                                                                                6),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "EmailPTId"#
                                                                                                                                                    9))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (EmailPT x_ahv4 x_ahv5 x_ahv6)
        = [toPersistValue x_ahv4, toPersistValue x_ahv5,
           toPersistValue x_ahv6]
      fromPersistValues [x1_ahv8, x2_ahv9, x3_ahva]
        = EmailPT
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "EmailPT"# 7)
                    (Data.Text.unpackCStringLen# "email"# 5))
                 . fromPersistValue)
                x1_ahv8
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "EmailPT"# 7)
                    (Data.Text.unpackCStringLen# "user"# 4))
                 . fromPersistValue)
                x2_ahv9
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "EmailPT"# 7)
                    (Data.Text.unpackCStringLen# "verkey"# 6))
                 . fromPersistValue)
                x3_ahva
      fromPersistValues x_ahv7
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "EmailPT: fromPersistValues failed on: "# 38)
                 (Data.Text.Internal.pack $ show x_ahv7))
      persistUniqueToFieldNames UniqueEmailPT {}
        = ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
            FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
             NEL.:| [])
      persistUniqueToValues (UniqueEmailPT x_ahvb)
        = [toPersistValue x_ahvb]
      persistUniqueKeys (EmailPT _email_ahvc _user_ahvd _verkey_ahve)
        = [UniqueEmailPT _email_ahvc]
      persistFieldDef EmailPTId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "EmailPTId"# 9))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef EmailPTEmail
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy EmailPT)
            (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
      persistFieldDef EmailPTUser
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy EmailPT)
            (FieldNameHS (Data.Text.unpackCStringLen# "user"# 4))
      persistFieldDef EmailPTVerkey
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy EmailPT)
            (FieldNameHS (Data.Text.unpackCStringLen# "verkey"# 6))
      persistIdField = EmailPTId
      fieldLens EmailPTId
        = lensPTH
            entityKey
            (\ (Entity _ value_ahvg) key_ahvh -> Entity key_ahvh value_ahvg)
      fieldLens EmailPTEmail
        = lensPTH
            ((\ EmailPT {emailPTEmail = x} -> x) . entityVal)
            (\ (Entity key_ahvi value_ahvj) x_ahvk
               -> Entity
                    key_ahvi
                    (case value_ahvj of
                       EmailPT {emailPTUser = emailPTUser_ahvm,
                                emailPTVerkey = emailPTVerkey_ahvn}
                         -> EmailPT
                              {emailPTEmail = x_ahvk, emailPTUser = emailPTUser,
                               emailPTVerkey = emailPTVerkey}))
      fieldLens EmailPTUser
        = lensPTH
            ((\ EmailPT {emailPTUser = x} -> x) . entityVal)
            (\ (Entity key_ahvi value_ahvj) x_ahvk
               -> Entity
                    key_ahvi
                    (case value_ahvj of
                       EmailPT {emailPTEmail = emailPTEmail_ahvo,
                                emailPTVerkey = emailPTVerkey_ahvq}
                         -> EmailPT
                              {emailPTEmail = emailPTEmail, emailPTUser = x_ahvk,
                               emailPTVerkey = emailPTVerkey}))
      fieldLens EmailPTVerkey
        = lensPTH
            ((\ EmailPT {emailPTVerkey = x} -> x) . entityVal)
            (\ (Entity key_ahvi value_ahvj) x_ahvk
               -> Entity
                    key_ahvi
                    (case value_ahvj of
                       EmailPT {emailPTEmail = emailPTEmail_ahvr,
                                emailPTUser = emailPTUser_ahvs}
                         -> EmailPT
                              {emailPTEmail = emailPTEmail, emailPTUser = emailPTUser,
                               emailPTVerkey = x_ahvk}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (EmailPTGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (EmailPTGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (EmailPTGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (EmailPTGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (EmailPTGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (EmailPTGeneric backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (EmailPTGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (EmailPTGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (EmailPTGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (EmailPTGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (EmailPTGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (EmailPTGeneric backend) where
      toBackendKey = \ EmailPTKey {unEmailPTKey = x} -> x
      fromBackendKey = EmailPTKey
    type Upsert = UpsertGeneric SqlBackend
    data UpsertGeneric backend
      = Upsert {upsertEmail :: !Text,
                upsertAttr :: !Text,
                upsertExtra :: !Text,
                upsertAge :: !Int}
      deriving stock (Eq, Show)
    type UpsertId = Key Upsert
    instance PersistStore backend =>
             PersistEntity (UpsertGeneric backend) where
      type PersistEntityBackend (UpsertGeneric backend) = backend
      data Unique (UpsertGeneric backend) = UniqueUpsert Text
      newtype Key (UpsertGeneric backend)
        = UpsertKey {unUpsertKey :: (BackendKey backend)}
      data EntityField (UpsertGeneric backend) typ
        = (typ ~ Key (UpsertGeneric backend)) => UpsertId |
          (typ ~ Text) => UpsertEmail |
          (typ ~ Text) => UpsertAttr |
          (typ ~ Text) => UpsertExtra |
          (typ ~ Int) => UpsertAge
      keyToValues
        = ((: [])
             . (toPersistValue . (\ UpsertKey {unUpsertKey = x} -> x)))
      keyFromValues
        = (fmap UpsertKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_ahw5
        = ((Entity <$> fromField_ahw5 UpsertId)
             <*>
               ((((pure Upsert <*> fromField_ahw5 UpsertEmail)
                    <*> fromField_ahw5 UpsertAttr)
                   <*> fromField_ahw5 UpsertExtra)
                  <*> fromField_ahw5 UpsertAge))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "Upsert"# 6))
            (EntityNameDB (Data.Text.unpackCStringLen# "Upsert"# 6))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] []
            [UniqueDef
               (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueUpsert"# 12))
               (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueUpsert"# 12))
               ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
                 FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                  NEL.:| [])
               []]
            []
            [Data.Text.unpackCStringLen# "Eq"# 2,
             Data.Text.unpackCStringLen# "Show"# 4]
            containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "email"#
                                                                                                                                                                     5),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "email"#
                                                                                                                                                                5),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "attr"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "attr"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "extra"#
                                                                                                                                                                     5),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "extra"#
                                                                                                                                                                5),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "age"#
                                                                                                                                                                     3),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "age"#
                                                                                                                                                                3),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "UpsertId"#
                                                                                                                                                    8))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Upsert x_ahvv x_ahvw x_ahvx x_ahvy)
        = [toPersistValue x_ahvv, toPersistValue x_ahvw,
           toPersistValue x_ahvx, toPersistValue x_ahvy]
      fromPersistValues [x1_ahvA, x2_ahvB, x3_ahvC, x4_ahvD]
        = Upsert
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Upsert"# 6)
                    (Data.Text.unpackCStringLen# "email"# 5))
                 . fromPersistValue)
                x1_ahvA
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Upsert"# 6)
                    (Data.Text.unpackCStringLen# "attr"# 4))
                 . fromPersistValue)
                x2_ahvB
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Upsert"# 6)
                    (Data.Text.unpackCStringLen# "extra"# 5))
                 . fromPersistValue)
                x3_ahvC
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Upsert"# 6)
                    (Data.Text.unpackCStringLen# "age"# 3))
                 . fromPersistValue)
                x4_ahvD
      fromPersistValues x_ahvz
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "Upsert: fromPersistValues failed on: "# 37)
                 (Data.Text.Internal.pack $ show x_ahvz))
      persistUniqueToFieldNames UniqueUpsert {}
        = ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
            FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
             NEL.:| [])
      persistUniqueToValues (UniqueUpsert x_ahvE)
        = [toPersistValue x_ahvE]
      persistUniqueKeys
        (Upsert _email_ahvF _attr_ahvG _extra_ahvH _age_ahvI)
        = [UniqueUpsert _email_ahvF]
      persistFieldDef UpsertId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef UpsertEmail
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Upsert)
            (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
      persistFieldDef UpsertAttr
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Upsert)
            (FieldNameHS (Data.Text.unpackCStringLen# "attr"# 4))
      persistFieldDef UpsertExtra
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Upsert)
            (FieldNameHS (Data.Text.unpackCStringLen# "extra"# 5))
      persistFieldDef UpsertAge
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Upsert)
            (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
      persistIdField = UpsertId
      fieldLens UpsertId
        = lensPTH
            entityKey
            (\ (Entity _ value_ahvK) key_ahvL -> Entity key_ahvL value_ahvK)
      fieldLens UpsertEmail
        = lensPTH
            ((\ Upsert {upsertEmail = x} -> x) . entityVal)
            (\ (Entity key_ahvM value_ahvN) x_ahvO
               -> Entity
                    key_ahvM
                    (case value_ahvN of
                       Upsert {upsertAttr = upsertAttr_ahvQ,
                               upsertExtra = upsertExtra_ahvR, upsertAge = upsertAge_ahvS}
                         -> Upsert
                              {upsertEmail = x_ahvO, upsertAttr = upsertAttr,
                               upsertExtra = upsertExtra, upsertAge = upsertAge}))
      fieldLens UpsertAttr
        = lensPTH
            ((\ Upsert {upsertAttr = x} -> x) . entityVal)
            (\ (Entity key_ahvM value_ahvN) x_ahvO
               -> Entity
                    key_ahvM
                    (case value_ahvN of
                       Upsert {upsertEmail = upsertEmail_ahvT,
                               upsertExtra = upsertExtra_ahvV, upsertAge = upsertAge_ahvW}
                         -> Upsert
                              {upsertEmail = upsertEmail, upsertAttr = x_ahvO,
                               upsertExtra = upsertExtra, upsertAge = upsertAge}))
      fieldLens UpsertExtra
        = lensPTH
            ((\ Upsert {upsertExtra = x} -> x) . entityVal)
            (\ (Entity key_ahvM value_ahvN) x_ahvO
               -> Entity
                    key_ahvM
                    (case value_ahvN of
                       Upsert {upsertEmail = upsertEmail_ahvX,
                               upsertAttr = upsertAttr_ahvY, upsertAge = upsertAge_ahw0}
                         -> Upsert
                              {upsertEmail = upsertEmail, upsertAttr = upsertAttr,
                               upsertExtra = x_ahvO, upsertAge = upsertAge}))
      fieldLens UpsertAge
        = lensPTH
            ((\ Upsert {upsertAge = x} -> x) . entityVal)
            (\ (Entity key_ahvM value_ahvN) x_ahvO
               -> Entity
                    key_ahvM
                    (case value_ahvN of
                       Upsert {upsertEmail = upsertEmail_ahw1,
                               upsertAttr = upsertAttr_ahw2, upsertExtra = upsertExtra_ahw3}
                         -> Upsert
                              {upsertEmail = upsertEmail, upsertAttr = upsertAttr,
                               upsertExtra = upsertExtra, upsertAge = x_ahvO}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (UpsertGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (UpsertGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (UpsertGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (UpsertGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (UpsertGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (UpsertGeneric backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (UpsertGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (UpsertGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (UpsertGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (UpsertGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (UpsertGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (UpsertGeneric backend) where
      toBackendKey = \ UpsertKey {unUpsertKey = x} -> x
      fromBackendKey = UpsertKey
    type UpsertBy = UpsertByGeneric SqlBackend
    data UpsertByGeneric backend
      = UpsertBy {upsertByEmail :: !Text,
                  upsertByCity :: !Text,
                  upsertByAttr :: !Text}
      deriving stock (Eq, Show)
    type UpsertById = Key UpsertBy
    instance PersistStore backend =>
             PersistEntity (UpsertByGeneric backend) where
      type PersistEntityBackend (UpsertByGeneric backend) = backend
      data Unique (UpsertByGeneric backend)
        = UniqueUpsertBy Text | UniqueUpsertByCity Text
      newtype Key (UpsertByGeneric backend)
        = UpsertByKey {unUpsertByKey :: (BackendKey backend)}
      data EntityField (UpsertByGeneric backend) typ
        = (typ ~ Key (UpsertByGeneric backend)) => UpsertById |
          (typ ~ Text) => UpsertByEmail |
          (typ ~ Text) => UpsertByCity |
          (typ ~ Text) => UpsertByAttr
      keyToValues
        = ((: [])
             . (toPersistValue . (\ UpsertByKey {unUpsertByKey = x} -> x)))
      keyFromValues
        = (fmap UpsertByKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_ahwx
        = ((Entity <$> fromField_ahwx UpsertById)
             <*>
               (((pure UpsertBy <*> fromField_ahwx UpsertByEmail)
                   <*> fromField_ahwx UpsertByCity)
                  <*> fromField_ahwx UpsertByAttr))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "UpsertBy"# 8))
            (EntityNameDB (Data.Text.unpackCStringLen# "UpsertBy"# 8))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertById"# 10))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] []
            [UniqueDef
               (ConstraintNameHS
                  (Data.Text.unpackCStringLen# "UniqueUpsertBy"# 14))
               (ConstraintNameDB
                  (Data.Text.unpackCStringLen# "UniqueUpsertBy"# 14))
               ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
                 FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                  NEL.:| [])
               [],
             UniqueDef
               (ConstraintNameHS
                  (Data.Text.unpackCStringLen# "UniqueUpsertByCity"# 18))
               (ConstraintNameDB
                  (Data.Text.unpackCStringLen# "UniqueUpsertByCity"# 18))
               ((FieldNameHS (Data.Text.unpackCStringLen# "city"# 4), 
                 FieldNameDB (Data.Text.unpackCStringLen# "city"# 4))
                  NEL.:| [])
               []]
            []
            [Data.Text.unpackCStringLen# "Eq"# 2,
             Data.Text.unpackCStringLen# "Show"# 4]
            containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "email"#
                                                                                                                                                                     5),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "email"#
                                                                                                                                                                5),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "city"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "city"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "attr"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "attr"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "UpsertById"#
                                                                                                                                                    10))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (UpsertBy x_ahw6 x_ahw7 x_ahw8)
        = [toPersistValue x_ahw6, toPersistValue x_ahw7,
           toPersistValue x_ahw8]
      fromPersistValues [x1_ahwa, x2_ahwb, x3_ahwc]
        = UpsertBy
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "UpsertBy"# 8)
                    (Data.Text.unpackCStringLen# "email"# 5))
                 . fromPersistValue)
                x1_ahwa
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "UpsertBy"# 8)
                    (Data.Text.unpackCStringLen# "city"# 4))
                 . fromPersistValue)
                x2_ahwb
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "UpsertBy"# 8)
                    (Data.Text.unpackCStringLen# "attr"# 4))
                 . fromPersistValue)
                x3_ahwc
      fromPersistValues x_ahw9
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "UpsertBy: fromPersistValues failed on: "# 39)
                 (Data.Text.Internal.pack $ show x_ahw9))
      persistUniqueToFieldNames UniqueUpsertBy {}
        = ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
            FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
             NEL.:| [])
      persistUniqueToFieldNames UniqueUpsertByCity {}
        = ((FieldNameHS (Data.Text.unpackCStringLen# "city"# 4), 
            FieldNameDB (Data.Text.unpackCStringLen# "city"# 4))
             NEL.:| [])
      persistUniqueToValues (UniqueUpsertBy x_ahwd)
        = [toPersistValue x_ahwd]
      persistUniqueToValues (UniqueUpsertByCity x_ahwe)
        = [toPersistValue x_ahwe]
      persistUniqueKeys (UpsertBy _email_ahwf _city_ahwg _attr_ahwh)
        = [UniqueUpsertBy _email_ahwf, UniqueUpsertByCity _city_ahwg]
      persistFieldDef UpsertById
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertById"# 10))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef UpsertByEmail
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy UpsertBy)
            (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
      persistFieldDef UpsertByCity
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy UpsertBy)
            (FieldNameHS (Data.Text.unpackCStringLen# "city"# 4))
      persistFieldDef UpsertByAttr
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy UpsertBy)
            (FieldNameHS (Data.Text.unpackCStringLen# "attr"# 4))
      persistIdField = UpsertById
      fieldLens UpsertById
        = lensPTH
            entityKey
            (\ (Entity _ value_ahwj) key_ahwk -> Entity key_ahwk value_ahwj)
      fieldLens UpsertByEmail
        = lensPTH
            ((\ UpsertBy {upsertByEmail = x} -> x) . entityVal)
            (\ (Entity key_ahwl value_ahwm) x_ahwn
               -> Entity
                    key_ahwl
                    (case value_ahwm of
                       UpsertBy {upsertByCity = upsertByCity_ahwp,
                                 upsertByAttr = upsertByAttr_ahwq}
                         -> UpsertBy
                              {upsertByEmail = x_ahwn, upsertByCity = upsertByCity,
                               upsertByAttr = upsertByAttr}))
      fieldLens UpsertByCity
        = lensPTH
            ((\ UpsertBy {upsertByCity = x} -> x) . entityVal)
            (\ (Entity key_ahwl value_ahwm) x_ahwn
               -> Entity
                    key_ahwl
                    (case value_ahwm of
                       UpsertBy {upsertByEmail = upsertByEmail_ahwr,
                                 upsertByAttr = upsertByAttr_ahwt}
                         -> UpsertBy
                              {upsertByEmail = upsertByEmail, upsertByCity = x_ahwn,
                               upsertByAttr = upsertByAttr}))
      fieldLens UpsertByAttr
        = lensPTH
            ((\ UpsertBy {upsertByAttr = x} -> x) . entityVal)
            (\ (Entity key_ahwl value_ahwm) x_ahwn
               -> Entity
                    key_ahwl
                    (case value_ahwm of
                       UpsertBy {upsertByEmail = upsertByEmail_ahwu,
                                 upsertByCity = upsertByCity_ahwv}
                         -> UpsertBy
                              {upsertByEmail = upsertByEmail, upsertByCity = upsertByCity,
                               upsertByAttr = x_ahwn}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (UpsertByGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (UpsertByGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (UpsertByGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (UpsertByGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (UpsertByGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (UpsertByGeneric backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (UpsertByGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (UpsertByGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (UpsertByGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (UpsertByGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (UpsertByGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (UpsertByGeneric backend) where
      toBackendKey = \ UpsertByKey {unUpsertByKey = x} -> x
      fromBackendKey = UpsertByKey
    type Strict = StrictGeneric SqlBackend
    data StrictGeneric backend
      = Strict {strictYes :: !Int, strictNo :: Int, strictDef :: !Int}
    type StrictId = Key Strict
    instance PersistStore backend =>
             PersistEntity (StrictGeneric backend) where
      type PersistEntityBackend (StrictGeneric backend) = backend
      data Unique (StrictGeneric backend)
      newtype Key (StrictGeneric backend)
        = StrictKey {unStrictKey :: (BackendKey backend)}
      data EntityField (StrictGeneric backend) typ
        = (typ ~ Key (StrictGeneric backend)) => StrictId |
          (typ ~ Int) => StrictYes |
          (typ ~ Int) => StrictNo |
          (typ ~ Int) => StrictDef
      keyToValues
        = ((: [])
             . (toPersistValue . (\ StrictKey {unStrictKey = x} -> x)))
      keyFromValues
        = (fmap StrictKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_ahwX
        = ((Entity <$> fromField_ahwX StrictId)
             <*>
               (((pure Strict <*> fromField_ahwX StrictYes)
                   <*> fromField_ahwX StrictNo)
                  <*> fromField_ahwX StrictDef))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "Strict"# 6))
            (EntityNameDB (Data.Text.unpackCStringLen# "Strict"# 6))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "StrictId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "yes"#
                                                                                                                                                                     3),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "yes"#
                                                                                                                                                                3),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "no"#
                                                                                                                                                                     2),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "no"#
                                                                                                                                                                2),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = False,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "def"#
                                                                                                                                                                     3),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "def"#
                                                                                                                                                                3),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "StrictId"#
                                                                                                                                                    8))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Strict x_ahwy x_ahwz x_ahwA)
        = [toPersistValue x_ahwy, toPersistValue x_ahwz,
           toPersistValue x_ahwA]
      fromPersistValues [x1_ahwC, x2_ahwD, x3_ahwE]
        = Strict
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Strict"# 6)
                    (Data.Text.unpackCStringLen# "yes"# 3))
                 . fromPersistValue)
                x1_ahwC
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Strict"# 6)
                    (Data.Text.unpackCStringLen# "no"# 2))
                 . fromPersistValue)
                x2_ahwD
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Strict"# 6)
                    (Data.Text.unpackCStringLen# "def"# 3))
                 . fromPersistValue)
                x3_ahwE
      fromPersistValues x_ahwB
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "Strict: fromPersistValues failed on: "# 37)
                 (Data.Text.Internal.pack $ show x_ahwB))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Strict _yes_ahwF _no_ahwG _def_ahwH) = []
      persistFieldDef StrictId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "StrictId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef StrictYes
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Strict)
            (FieldNameHS (Data.Text.unpackCStringLen# "yes"# 3))
      persistFieldDef StrictNo
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Strict)
            (FieldNameHS (Data.Text.unpackCStringLen# "no"# 2))
      persistFieldDef StrictDef
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Strict)
            (FieldNameHS (Data.Text.unpackCStringLen# "def"# 3))
      persistIdField = StrictId
      fieldLens StrictId
        = lensPTH
            entityKey
            (\ (Entity _ value_ahwJ) key_ahwK -> Entity key_ahwK value_ahwJ)
      fieldLens StrictYes
        = lensPTH
            ((\ Strict {strictYes = x} -> x) . entityVal)
            (\ (Entity key_ahwL value_ahwM) x_ahwN
               -> Entity
                    key_ahwL
                    (case value_ahwM of
                       Strict {strictNo = strictNo_ahwP, strictDef = strictDef_ahwQ}
                         -> Strict
                              {strictYes = x_ahwN, strictNo = strictNo, strictDef = strictDef}))
      fieldLens StrictNo
        = lensPTH
            ((\ Strict {strictNo = x} -> x) . entityVal)
            (\ (Entity key_ahwL value_ahwM) x_ahwN
               -> Entity
                    key_ahwL
                    (case value_ahwM of
                       Strict {strictYes = strictYes_ahwR, strictDef = strictDef_ahwT}
                         -> Strict
                              {strictYes = strictYes, strictNo = x_ahwN, strictDef = strictDef}))
      fieldLens StrictDef
        = lensPTH
            ((\ Strict {strictDef = x} -> x) . entityVal)
            (\ (Entity key_ahwL value_ahwM) x_ahwN
               -> Entity
                    key_ahwL
                    (case value_ahwM of
                       Strict {strictYes = strictYes_ahwU, strictNo = strictNo_ahwV}
                         -> Strict
                              {strictYes = strictYes, strictNo = strictNo, strictDef = x_ahwN}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (StrictGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (StrictGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (StrictGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (StrictGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (StrictGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (StrictGeneric backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (StrictGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (StrictGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (StrictGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (StrictGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (StrictGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (StrictGeneric backend) where
      toBackendKey = \ StrictKey {unStrictKey = x} -> x
      fromBackendKey = StrictKey
    instance PersistStore backend =>
             ToJSON (PersonGeneric backend) where
      toJSON (Person name_ahwZ age_ahx0 color_ahx1)
        = object
            [(Data.Aeson.Key.fromString "name" .= name_ahwZ),
             (Data.Aeson.Key.fromString "age" .= age_ahx0),
             (Data.Aeson.Key.fromString "color" .= color_ahx1)]
    instance PersistStore backend =>
             FromJSON (PersonGeneric backend) where
      parseJSON
        = withObject
            "Person"
            (\ obj_ahwY
               -> (((pure Person
                       <*> (obj_ahwY .: Data.Aeson.Key.fromString "name"))
                      <*> (obj_ahwY .: Data.Aeson.Key.fromString "age"))
                     <*> (obj_ahwY .:? Data.Aeson.Key.fromString "color")))
    instance PersistStore backend =>
             ToJSON (Entity (PersonGeneric backend)) where
      toJSON = entityIdToJSON
    instance PersistStore backend =>
             FromJSON (Entity (PersonGeneric backend)) where
      parseJSON = entityIdFromJSON
    instance PersistStore backend =>
             ToJSON (PersonMayGeneric backend) where
      toJSON (PersonMay name_ahx3 color_ahx4)
        = object
            [(Data.Aeson.Key.fromString "name" .= name_ahx3),
             (Data.Aeson.Key.fromString "color" .= color_ahx4)]
    instance PersistStore backend =>
             FromJSON (PersonMayGeneric backend) where
      parseJSON
        = withObject
            "PersonMay"
            (\ obj_ahx2
               -> ((pure PersonMay
                      <*> (obj_ahx2 .:? Data.Aeson.Key.fromString "name"))
                     <*> (obj_ahx2 .:? Data.Aeson.Key.fromString "color")))
    instance PersistStore backend =>
             ToJSON (Entity (PersonMayGeneric backend)) where
      toJSON = entityIdToJSON
    instance PersistStore backend =>
             FromJSON (Entity (PersonMayGeneric backend)) where
      parseJSON = entityIdFromJSON
    instance PersistStoreWrite backend =>
             OnlyOneUniqueKey (PersonGeneric backend) where
      onlyUniqueP = (head . persistUniqueKeys)
    instance PersistStoreWrite backend =>
             AtLeastOneUniqueKey (PersonGeneric backend) where
      requireUniquesP = (NEL.fromList . persistUniqueKeys)
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (Person1Generic backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (Person1Generic backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (Person1Generic backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (Person1Generic backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (PersonMaybeAgeGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (PersonMaybeAgeGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (PersonMaybeAgeGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (PersonMaybeAgeGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (PersonMayGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (PersonMayGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (PersonMayGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (PersonMayGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (PetGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (PetGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (PetGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (PetGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (MaybeOwnedPetGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (MaybeOwnedPetGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (MaybeOwnedPetGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (MaybeOwnedPetGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NeedsPetGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (NeedsPetGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NeedsPetGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (NeedsPetGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (OutdoorPetGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (OutdoorPetGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (OutdoorPetGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (OutdoorPetGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance PersistStoreWrite backend =>
             OnlyOneUniqueKey (UserPTGeneric backend) where
      onlyUniqueP = (head . persistUniqueKeys)
    instance PersistStoreWrite backend =>
             AtLeastOneUniqueKey (UserPTGeneric backend) where
      requireUniquesP = (NEL.fromList . persistUniqueKeys)
    instance PersistStoreWrite backend =>
             OnlyOneUniqueKey (EmailPTGeneric backend) where
      onlyUniqueP = (head . persistUniqueKeys)
    instance PersistStoreWrite backend =>
             AtLeastOneUniqueKey (EmailPTGeneric backend) where
      requireUniquesP = (NEL.fromList . persistUniqueKeys)
    instance PersistStoreWrite backend =>
             OnlyOneUniqueKey (UpsertGeneric backend) where
      onlyUniqueP = (head . persistUniqueKeys)
    instance PersistStoreWrite backend =>
             AtLeastOneUniqueKey (UpsertGeneric backend) where
      requireUniquesP = (NEL.fromList . persistUniqueKeys)
    instance (GHC.TypeError.TypeError (MultipleUniqueKeysError (UpsertByGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (UpsertByGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance PersistStoreWrite backend =>
             AtLeastOneUniqueKey (UpsertByGeneric backend) where
      requireUniquesP = (NEL.fromList . persistUniqueKeys)
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (StrictGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (StrictGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (StrictGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (StrictGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance SymbolToField "id" (PersonGeneric backend) (Key (PersonGeneric backend)) where
      symbolToField = PersonId
    instance SymbolToField "name" (PersonGeneric backend) Text where
      symbolToField = PersonName
    instance SymbolToField "age" (PersonGeneric backend) Int where
      symbolToField = PersonAge
    instance SymbolToField "color" (PersonGeneric backend) (Maybe Text) where
      symbolToField = PersonColor
    instance SymbolToField "id" (Person1Generic backend) (Key (Person1Generic backend)) where
      symbolToField = Person1Id
    instance SymbolToField "name" (Person1Generic backend) Text where
      symbolToField = Person1Name
    instance SymbolToField "age" (Person1Generic backend) Int where
      symbolToField = Person1Age
    instance SymbolToField "id" (PersonMaybeAgeGeneric backend) (Key (PersonMaybeAgeGeneric backend)) where
      symbolToField = PersonMaybeAgeId
    instance SymbolToField "name" (PersonMaybeAgeGeneric backend) Text where
      symbolToField = PersonMaybeAgeName
    instance SymbolToField "age" (PersonMaybeAgeGeneric backend) (Maybe Int) where
      symbolToField = PersonMaybeAgeAge
    instance SymbolToField "id" (PersonMayGeneric backend) (Key (PersonMayGeneric backend)) where
      symbolToField = PersonMayId
    instance SymbolToField "name" (PersonMayGeneric backend) (Maybe Text) where
      symbolToField = PersonMayName
    instance SymbolToField "color" (PersonMayGeneric backend) (Maybe Text) where
      symbolToField = PersonMayColor
    instance SymbolToField "id" (PetGeneric backend) (Key (PetGeneric backend)) where
      symbolToField = PetId
    instance SymbolToField "ownerId" (PetGeneric backend) (Key (PersonGeneric backend)) where
      symbolToField = PetOwnerId
    instance SymbolToField "name" (PetGeneric backend) Text where
      symbolToField = PetName
    instance SymbolToField "type" (PetGeneric backend) PetType where
      symbolToField = PetType
    instance SymbolToField "id" (MaybeOwnedPetGeneric backend) (Key (MaybeOwnedPetGeneric backend)) where
      symbolToField = MaybeOwnedPetId
    instance SymbolToField "ownerId" (MaybeOwnedPetGeneric backend) (Maybe (Key (PersonGeneric backend))) where
      symbolToField = MaybeOwnedPetOwnerId
    instance SymbolToField "name" (MaybeOwnedPetGeneric backend) Text where
      symbolToField = MaybeOwnedPetName
    instance SymbolToField "type" (MaybeOwnedPetGeneric backend) PetType where
      symbolToField = MaybeOwnedPetType
    instance SymbolToField "id" (NeedsPetGeneric backend) (Key (NeedsPetGeneric backend)) where
      symbolToField = NeedsPetId
    instance SymbolToField "petKey" (NeedsPetGeneric backend) (Key (PetGeneric backend)) where
      symbolToField = NeedsPetPetKey
    instance SymbolToField "id" (OutdoorPetGeneric backend) (Key (OutdoorPetGeneric backend)) where
      symbolToField = OutdoorPetId
    instance SymbolToField "ownerId" (OutdoorPetGeneric backend) (Key (PersonGeneric backend)) where
      symbolToField = OutdoorPetOwnerId
    instance SymbolToField "collar" (OutdoorPetGeneric backend) PetCollar where
      symbolToField = OutdoorPetCollar
    instance SymbolToField "type" (OutdoorPetGeneric backend) PetType where
      symbolToField = OutdoorPetType
    instance SymbolToField "id" (UserPTGeneric backend) (Key (UserPTGeneric backend)) where
      symbolToField = UserPTId
    instance SymbolToField "ident" (UserPTGeneric backend) Text where
      symbolToField = UserPTIdent
    instance SymbolToField "password" (UserPTGeneric backend) (Maybe Text) where
      symbolToField = UserPTPassword
    instance SymbolToField "id" (EmailPTGeneric backend) (Key (EmailPTGeneric backend)) where
      symbolToField = EmailPTId
    instance SymbolToField "email" (EmailPTGeneric backend) Text where
      symbolToField = EmailPTEmail
    instance SymbolToField "user" (EmailPTGeneric backend) (Maybe (Key (UserPTGeneric backend))) where
      symbolToField = EmailPTUser
    instance SymbolToField "verkey" (EmailPTGeneric backend) (Maybe Text) where
      symbolToField = EmailPTVerkey
    instance SymbolToField "id" (UpsertGeneric backend) (Key (UpsertGeneric backend)) where
      symbolToField = UpsertId
    instance SymbolToField "email" (UpsertGeneric backend) Text where
      symbolToField = UpsertEmail
    instance SymbolToField "attr" (UpsertGeneric backend) Text where
      symbolToField = UpsertAttr
    instance SymbolToField "extra" (UpsertGeneric backend) Text where
      symbolToField = UpsertExtra
    instance SymbolToField "age" (UpsertGeneric backend) Int where
      symbolToField = UpsertAge
    instance SymbolToField "id" (UpsertByGeneric backend) (Key (UpsertByGeneric backend)) where
      symbolToField = UpsertById
    instance SymbolToField "email" (UpsertByGeneric backend) Text where
      symbolToField = UpsertByEmail
    instance SymbolToField "city" (UpsertByGeneric backend) Text where
      symbolToField = UpsertByCity
    instance SymbolToField "attr" (UpsertByGeneric backend) Text where
      symbolToField = UpsertByAttr
    instance SymbolToField "id" (StrictGeneric backend) (Key (StrictGeneric backend)) where
      symbolToField = StrictId
    instance SymbolToField "yes" (StrictGeneric backend) Int where
      symbolToField = StrictYes
    instance SymbolToField "no" (StrictGeneric backend) Int where
      symbolToField = StrictNo
    instance SymbolToField "def" (StrictGeneric backend) Int where
      symbolToField = StrictDef
    instance PersistStoreWrite backend =>
             SafeToInsert (PersonGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (Person1Generic backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (PersonMaybeAgeGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (PersonMayGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (PetGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (MaybeOwnedPetGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (NeedsPetGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (OutdoorPetGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (UserPTGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (EmailPTGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (UpsertGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (UpsertByGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (StrictGeneric backend)
    entityDefListFortestMigrate :: [EntityDef]
    entityDefListFortestMigrate
      = [entityDef (Proxy :: Proxy Person),
         entityDef (Proxy :: Proxy Person1),
         entityDef (Proxy :: Proxy PersonMaybeAge),
         entityDef (Proxy :: Proxy PersonMay),
         entityDef (Proxy :: Proxy Pet),
         entityDef (Proxy :: Proxy MaybeOwnedPet),
         entityDef (Proxy :: Proxy NeedsPet),
         entityDef (Proxy :: Proxy OutdoorPet),
         entityDef (Proxy :: Proxy UserPT),
         entityDef (Proxy :: Proxy EmailPT),
         entityDef (Proxy :: Proxy Upsert),
         entityDef (Proxy :: Proxy UpsertBy),
         entityDef (Proxy :: Proxy Strict)]
    testMigrate :: Migration
    testMigrate = migrateModels entityDefListFortestMigrate
test/PersistentTestModels.hs:(120,27)-(130,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \NoPrefix1\n\
      \    someFieldName Int\n\
      \NoPrefix2\n\
      \    someOtherFieldName Int\n\
      \    unprefixedRef NoPrefix1Id\n\
      \+NoPrefixSum\n\
      \    unprefixedLeft Int\n\
      \    unprefixedRight String\n\
      \    deriving Show Eq\n"
  ======>
    [Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefix1"# 9))
          (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix1"# 10))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix1Id"# 11))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
          Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "someFieldName"# 13))
          (FieldNameDB (Data.Text.unpackCStringLen# "some_field_name"# 15))
          [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefix2"# 9))
          (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix2"# 10))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix2Id"# 11))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
          Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS
             (Data.Text.unpackCStringLen# "someOtherFieldName"# 18))
          (FieldNameDB
             (Data.Text.unpackCStringLen# "some_other_field_name"# 21))
          [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedRef"# 13))
          (FieldNameDB (Data.Text.unpackCStringLen# "unprefixed_ref"# 14)) []
          True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix1Id"# 11))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefixSum"# 11))
          (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix_sum"# 13))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon
                   Nothing (Data.Text.unpackCStringLen# "NoPrefixSumId"# 13))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] []
          [Data.Text.unpackCStringLen# "Show"# 4,
           Data.Text.unpackCStringLen# "Eq"# 2]
          containers-0.6.7:Data.Map.Internal.Tip True Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedLeft"# 14))
          (FieldNameDB (Data.Text.unpackCStringLen# "unprefixed_left"# 15))
          [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedRight"# 15))
          (FieldNameDB (Data.Text.unpackCStringLen# "unprefixed_right"# 16))
          [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "String"# 6))
          (FieldCascade Nothing Nothing) Nothing Nothing]]
test/PersistentTestModels.hs:(118,1)-(130,2): Splicing declarations
    share
      [mkPersist
         sqlSettings {mpsPrefixFields = False, mpsGeneric = True},
       mkMigrate "noPrefixMigrate"]
      ([Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefix1"# 9))
             (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix1"# 10))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix1Id"# 11))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
             Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "someFieldName"# 13))
             (FieldNameDB (Data.Text.unpackCStringLen# "some_field_name"# 15))
             [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefix2"# 9))
             (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix2"# 10))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix2Id"# 11))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False
             Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS
                (Data.Text.unpackCStringLen# "someOtherFieldName"# 18))
             (FieldNameDB
                (Data.Text.unpackCStringLen# "some_other_field_name"# 21))
             [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedRef"# 13))
             (FieldNameDB (Data.Text.unpackCStringLen# "unprefixed_ref"# 14)) []
             True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix1Id"# 11))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefixSum"# 11))
             (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix_sum"# 13))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon
                      Nothing (Data.Text.unpackCStringLen# "NoPrefixSumId"# 13))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] []
             [Data.Text.unpackCStringLen# "Show"# 4,
              Data.Text.unpackCStringLen# "Eq"# 2]
             containers-0.6.7:Data.Map.Internal.Tip True Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedLeft"# 14))
             (FieldNameDB (Data.Text.unpackCStringLen# "unprefixed_left"# 15))
             [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedRight"# 15))
             (FieldNameDB (Data.Text.unpackCStringLen# "unprefixed_right"# 16))
             [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "String"# 6))
             (FieldCascade Nothing Nothing) Nothing Nothing]])
  ======>
    instance PersistStore backend =>
             PersistField (NoPrefix1Generic backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["someFieldName"]
    instance PersistStore backend =>
             PersistFieldSql (NoPrefix1Generic backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (NoPrefix2Generic backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["someOtherFieldName", "unprefixedRef"]
    instance PersistStore backend =>
             PersistFieldSql (NoPrefix2Generic backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (NoPrefixSumGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["unprefixedLeft", "unprefixedRight"]
    instance PersistStore backend =>
             PersistFieldSql (NoPrefixSumGeneric backend) where
      sqlType _ = SqlString
    type NoPrefix1 = NoPrefix1Generic SqlBackend
    data NoPrefix1Generic backend = NoPrefix1 {someFieldName :: !Int}
    type NoPrefix1Id = Key NoPrefix1
    instance PersistStore backend =>
             PersistEntity (NoPrefix1Generic backend) where
      type PersistEntityBackend (NoPrefix1Generic backend) = backend
      data Unique (NoPrefix1Generic backend)
      newtype Key (NoPrefix1Generic backend)
        = NoPrefix1Key {unNoPrefix1Key :: (BackendKey backend)}
      data EntityField (NoPrefix1Generic backend) typ
        = (typ ~ Key (NoPrefix1Generic backend)) => NoPrefix1Id |
          (typ ~ Int) => SomeFieldName
      keyToValues
        = ((: [])
             . (toPersistValue . (\ NoPrefix1Key {unNoPrefix1Key = x} -> x)))
      keyFromValues
        = (fmap NoPrefix1Key
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_aqGz
        = ((Entity <$> fromField_aqGz NoPrefix1Id)
             <*> (pure NoPrefix1 <*> fromField_aqGz SomeFieldName))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefix1"# 9))
            (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix1"# 10))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix1Id"# 11))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "someFieldName"#
                                                                                                                                                                     13),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "some_field_name"#
                                                                                                                                                                15),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "NoPrefix1Id"#
                                                                                                                                                    11))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (NoPrefix1 x_aqGo) = [toPersistValue x_aqGo]
      fromPersistValues [x1_aqGq]
        = NoPrefix1
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "no_prefix1"# 10)
                    (Data.Text.unpackCStringLen# "someFieldName"# 13))
                 . fromPersistValue)
                x1_aqGq
      fromPersistValues x_aqGp
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "NoPrefix1: fromPersistValues failed on: "# 40)
                 (Data.Text.Internal.pack $ show x_aqGp))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (NoPrefix1 _someFieldName_aqGr) = []
      persistFieldDef NoPrefix1Id
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix1Id"# 11))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef SomeFieldName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy NoPrefix1)
            (FieldNameHS (Data.Text.unpackCStringLen# "someFieldName"# 13))
      persistIdField = NoPrefix1Id
      fieldLens NoPrefix1Id
        = lensPTH
            entityKey
            (\ (Entity _ value_aqGt) key_aqGu -> Entity key_aqGu value_aqGt)
      fieldLens SomeFieldName
        = lensPTH
            ((\ NoPrefix1 {someFieldName = x} -> x) . entityVal)
            (\ (Entity key_aqGv value_aqGw) x_aqGx
               -> Entity
                    key_aqGv
                    (case value_aqGw of
                       NoPrefix1 {} -> NoPrefix1 {someFieldName = x_aqGx}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (NoPrefix1Generic backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (NoPrefix1Generic backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (NoPrefix1Generic backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (NoPrefix1Generic backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (NoPrefix1Generic backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (NoPrefix1Generic backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (NoPrefix1Generic backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (NoPrefix1Generic backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (NoPrefix1Generic backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (NoPrefix1Generic backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (NoPrefix1Generic backend))
    instance PersistStore backend =>
             ToBackendKey backend (NoPrefix1Generic backend) where
      toBackendKey = \ NoPrefix1Key {unNoPrefix1Key = x} -> x
      fromBackendKey = NoPrefix1Key
    type NoPrefix2 = NoPrefix2Generic SqlBackend
    data NoPrefix2Generic backend
      = NoPrefix2 {someOtherFieldName :: !Int,
                   unprefixedRef :: !(Key (NoPrefix1Generic backend))}
    type NoPrefix2Id = Key NoPrefix2
    instance PersistStore backend =>
             PersistEntity (NoPrefix2Generic backend) where
      type PersistEntityBackend (NoPrefix2Generic backend) = backend
      data Unique (NoPrefix2Generic backend)
      newtype Key (NoPrefix2Generic backend)
        = NoPrefix2Key {unNoPrefix2Key :: (BackendKey backend)}
      data EntityField (NoPrefix2Generic backend) typ
        = (typ ~ Key (NoPrefix2Generic backend)) => NoPrefix2Id |
          (typ ~ Int) => SomeOtherFieldName |
          (typ ~ Key (NoPrefix1Generic backend)) => UnprefixedRef
      keyToValues
        = ((: [])
             . (toPersistValue . (\ NoPrefix2Key {unNoPrefix2Key = x} -> x)))
      keyFromValues
        = (fmap NoPrefix2Key
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_aqGR
        = ((Entity <$> fromField_aqGR NoPrefix2Id)
             <*>
               ((pure NoPrefix2 <*> fromField_aqGR SomeOtherFieldName)
                  <*> fromField_aqGR UnprefixedRef))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefix2"# 9))
            (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix2"# 10))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix2Id"# 11))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] containers-0.6.7:Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "someOtherFieldName"#
                                                                                                                                                                     18),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "some_other_field_name"#
                                                                                                                                                                21),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "unprefixedRef"#
                                                                                                                                                                     13),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "unprefixed_ref"#
                                                                                                                                                                14),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "NoPrefix1Id"#
                                                                                                                                                                  11),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy NoPrefix1Id),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "NoPrefix1"#
                                                                                                                                                                          9)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "NoPrefix2Id"#
                                                                                                                                                    11))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (NoPrefix2 x_aqGA x_aqGB)
        = [toPersistValue x_aqGA, toPersistValue x_aqGB]
      fromPersistValues [x1_aqGD, x2_aqGE]
        = NoPrefix2
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "no_prefix2"# 10)
                    (Data.Text.unpackCStringLen# "someOtherFieldName"# 18))
                 . fromPersistValue)
                x1_aqGD
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "no_prefix2"# 10)
                    (Data.Text.unpackCStringLen# "unprefixedRef"# 13))
                 . fromPersistValue)
                x2_aqGE
      fromPersistValues x_aqGC
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "NoPrefix2: fromPersistValues failed on: "# 40)
                 (Data.Text.Internal.pack $ show x_aqGC))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (NoPrefix2 _someOtherFieldName_aqGF _unprefixedRef_aqGG)
        = []
      persistFieldDef NoPrefix2Id
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix2Id"# 11))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef SomeOtherFieldName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy NoPrefix2)
            (FieldNameHS
               (Data.Text.unpackCStringLen# "someOtherFieldName"# 18))
      persistFieldDef UnprefixedRef
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy NoPrefix2)
            (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedRef"# 13))
      persistIdField = NoPrefix2Id
      fieldLens NoPrefix2Id
        = lensPTH
            entityKey
            (\ (Entity _ value_aqGI) key_aqGJ -> Entity key_aqGJ value_aqGI)
      fieldLens SomeOtherFieldName
        = lensPTH
            ((\ NoPrefix2 {someOtherFieldName = x} -> x) . entityVal)
            (\ (Entity key_aqGK value_aqGL) x_aqGM
               -> Entity
                    key_aqGK
                    (case value_aqGL of
                       NoPrefix2 {unprefixedRef = unprefixedRef_aqGO}
                         -> NoPrefix2
                              {someOtherFieldName = x_aqGM, unprefixedRef = unprefixedRef}))
      fieldLens UnprefixedRef
        = lensPTH
            ((\ NoPrefix2 {unprefixedRef = x} -> x) . entityVal)
            (\ (Entity key_aqGK value_aqGL) x_aqGM
               -> Entity
                    key_aqGK
                    (case value_aqGL of
                       NoPrefix2 {someOtherFieldName = someOtherFieldName_aqGP}
                         -> NoPrefix2
                              {someOtherFieldName = someOtherFieldName, unprefixedRef = x_aqGM}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (NoPrefix2Generic backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (NoPrefix2Generic backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (NoPrefix2Generic backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (NoPrefix2Generic backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (NoPrefix2Generic backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (NoPrefix2Generic backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (NoPrefix2Generic backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (NoPrefix2Generic backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (NoPrefix2Generic backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (NoPrefix2Generic backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (NoPrefix2Generic backend))
    instance PersistStore backend =>
             ToBackendKey backend (NoPrefix2Generic backend) where
      toBackendKey = \ NoPrefix2Key {unNoPrefix2Key = x} -> x
      fromBackendKey = NoPrefix2Key
    type NoPrefixSum = NoPrefixSumGeneric SqlBackend
    data NoPrefixSumGeneric backend
      = UnprefixedLeftSum Int | UnprefixedRightSum String
      deriving stock (Show, Eq)
    type NoPrefixSumId = Key NoPrefixSum
    instance PersistStore backend =>
             PersistEntity (NoPrefixSumGeneric backend) where
      type PersistEntityBackend (NoPrefixSumGeneric backend) = backend
      data Unique (NoPrefixSumGeneric backend)
      newtype Key (NoPrefixSumGeneric backend)
        = NoPrefixSumKey {unNoPrefixSumKey :: (BackendKey backend)}
      data EntityField (NoPrefixSumGeneric backend) typ
        = (typ ~ Key (NoPrefixSumGeneric backend)) => NoPrefixSumId |
          (typ ~ Int) => UnprefixedLeft |
          (typ ~ String) => UnprefixedRight
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ NoPrefixSumKey {unNoPrefixSumKey = x} -> x)))
      keyFromValues
        = (fmap NoPrefixSumKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_aqH2
        = error "tabulateEntityA does not make sense for sum type"
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefixSum"# 11))
            (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix_sum"# 13))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "NoPrefixSumId"# 13))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] []
            [Data.Text.unpackCStringLen# "Show"# 4,
             Data.Text.unpackCStringLen# "Eq"# 2]
            containers-0.6.7:Data.Map.Internal.Tip True Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "unprefixedLeft"#
                                                                                                                                                                     14),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "unprefixed_left"#
                                                                                                                                                                15),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "unprefixedRight"#
                                                                                                                                                                     15),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "unprefixed_right"#
                                                                                                                                                                16),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "String"#
                                                                                                                                                                  6),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy String),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "NoPrefixSumId"#
                                                                                                                                                    13))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (UnprefixedLeftSum x_aqGS)
        = [toPersistValue x_aqGS, PersistNull]
      toPersistFields (UnprefixedRightSum x_aqGT)
        = [PersistNull, toPersistValue x_aqGT]
      fromPersistValues [x_aqGU, PersistNull]
        | Database.Persist.TH.isNotNull x_aqGU
        = (UnprefixedLeftSum `fmap` fromPersistValue x_aqGU)
      fromPersistValues [PersistNull, x_aqGV]
        | Database.Persist.TH.isNotNull x_aqGV
        = (UnprefixedRightSum `fmap` fromPersistValue x_aqGV)
      fromPersistValues _
        = Left
            ("Invalid fromPersistValues input: sum type with all nulls. Entity: "
               `mappend` Data.Text.unpackCStringLen# "NoPrefixSum"# 11)
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys _ = []
      persistFieldDef NoPrefixSumId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "NoPrefixSumId"# 13))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef UnprefixedLeft
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy NoPrefixSum)
            (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedLeft"# 14))
      persistFieldDef UnprefixedRight
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy NoPrefixSum)
            (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedRight"# 15))
      persistIdField = NoPrefixSumId
      fieldLens NoPrefixSumId
        = lensPTH
            entityKey
            (\ (Entity _ value_aqGX) key_aqGY -> Entity key_aqGY value_aqGX)
      fieldLens UnprefixedLeft
        = lensPTH
            (\ (Entity _ value_aqH0)
               -> case value_aqH0 of
                    UnprefixedLeftSum x_aqH1 -> x_aqH1
                    _ -> error "Tried to use fieldLens on a Sum type")
            (\ (Entity key_aqGZ _) x_aqH1
               -> Entity key_aqGZ (UnprefixedLeftSum x_aqH1))
      fieldLens UnprefixedRight
        = lensPTH
            (\ (Entity _ value_aqH0)
               -> case value_aqH0 of
                    UnprefixedRightSum x_aqH1 -> x_aqH1
                    _ -> error "Tried to use fieldLens on a Sum type")
            (\ (Entity key_aqGZ _) x_aqH1
               -> Entity key_aqGZ (UnprefixedRightSum x_aqH1))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (NoPrefixSumGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (NoPrefixSumGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (NoPrefixSumGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (NoPrefixSumGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.ToHttpApiData (Key (NoPrefixSumGeneric backend))
    deriving newtype instance http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              http-api-data-0.5.1-6f00b847a83d580f9bb02ddedbfba750030bfab64eb616e42d51a392568f25eb:Web.Internal.HttpApiData.FromHttpApiData (Key (NoPrefixSumGeneric backend))
    deriving newtype instance path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (BackendKey backend) =>
                              path-pieces-0.2.1-85109ced5f52e8e97073aaebea4c14a4b6406846585b2bda8abee522607fe9f0:Web.PathPieces.PathPiece (Key (NoPrefixSumGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (NoPrefixSumGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (NoPrefixSumGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (NoPrefixSumGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (NoPrefixSumGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (NoPrefixSumGeneric backend) where
      toBackendKey = \ NoPrefixSumKey {unNoPrefixSumKey = x} -> x
      fromBackendKey = NoPrefixSumKey
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NoPrefix1Generic backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (NoPrefix1Generic backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NoPrefix1Generic backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (NoPrefix1Generic backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NoPrefix2Generic backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (NoPrefix2Generic backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NoPrefix2Generic backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (NoPrefix2Generic backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NoPrefixSumGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (NoPrefixSumGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NoPrefixSumGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (NoPrefixSumGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance SymbolToField "id" (NoPrefix1Generic backend) (Key (NoPrefix1Generic backend)) where
      symbolToField = NoPrefix1Id
    instance SymbolToField "someFieldName" (NoPrefix1Generic backend) Int where
      symbolToField = SomeFieldName
    instance SymbolToField "id" (NoPrefix2Generic backend) (Key (NoPrefix2Generic backend)) where
      symbolToField = NoPrefix2Id
    instance SymbolToField "someOtherFieldName" (NoPrefix2Generic backend) Int where
      symbolToField = SomeOtherFieldName
    instance SymbolToField "unprefixedRef" (NoPrefix2Generic backend) (Key (NoPrefix1Generic backend)) where
      symbolToField = UnprefixedRef
    instance SymbolToField "id" (NoPrefixSumGeneric backend) (Key (NoPrefixSumGeneric backend)) where
      symbolToField = NoPrefixSumId
    instance SymbolToField "unprefixedLeft" (NoPrefixSumGeneric backend) Int where
      symbolToField = UnprefixedLeft
    instance SymbolToField "unprefixedRight" (NoPrefixSumGeneric backend) String where
      symbolToField = UnprefixedRight
    instance PersistStoreWrite backend =>
             SafeToInsert (NoPrefix1Generic backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (NoPrefix2Generic backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (NoPrefixSumGeneric backend)
    entityDefListFornoPrefixMigrate :: [EntityDef]
    entityDefListFornoPrefixMigrate
      = [entityDef (Proxy :: Proxy NoPrefix1),
         entityDef (Proxy :: Proxy NoPrefix2),
         entityDef (Proxy :: Proxy NoPrefixSum)]
    noPrefixMigrate :: Migration
    noPrefixMigrate = migrateModels entityDefListFornoPrefixMigrate

test/PersistentTestModels.hs:24:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
   |
24 | import Data.Foldable (toList)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share
   | ^^^^^...

test/PersistentTestModels.hs:32:31: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’ (imported from Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
32 |     [ mkPersist sqlSettings { mpsGeneric = True }
   |                               ^^^^^^^^^^

test/PersistentTestModels.hs:118:1: warning: [GHC-39584]
    persistent has deprecated sum type entities as of 2.14.0.0.
We will delete support for these entities in 2.15.0.0.
If you need these, please add a comment on this GitHub issue:

    https://github.com/yesodweb/persistent/issues/987

    |
118 | share [ mkPersist sqlSettings { mpsPrefixFields = False, mpsGeneric = True }
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

test/PersistentTestModels.hs:118:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
118 | share [ mkPersist sqlSettings { mpsPrefixFields = False, mpsGeneric = True }
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

test/PersistentTestModels.hs:118:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
118 | share [ mkPersist sqlSettings { mpsPrefixFields = False, mpsGeneric = True }
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

test/PersistentTestModels.hs:118:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
118 | share [ mkPersist sqlSettings { mpsPrefixFields = False, mpsGeneric = True }
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

test/PersistentTestModels.hs:118:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
118 | share [ mkPersist sqlSettings { mpsPrefixFields = False, mpsGeneric = True }
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

test/PersistentTestModels.hs:118:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
118 | share [ mkPersist sqlSettings { mpsPrefixFields = False, mpsGeneric = True }
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

test/PersistentTestModels.hs:118:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
118 | share [ mkPersist sqlSettings { mpsPrefixFields = False, mpsGeneric = True }
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

test/PersistentTestModels.hs:118:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
118 | share [ mkPersist sqlSettings { mpsPrefixFields = False, mpsGeneric = True }
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

test/PersistentTestModels.hs:118:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
118 | share [ mkPersist sqlSettings { mpsPrefixFields = False, mpsGeneric = True }
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

test/PersistentTestModels.hs:118:1: warning: [-Wunused-matches]
    Defined but not used: ‘fromField’
    |
118 | share [ mkPersist sqlSettings { mpsPrefixFields = False, mpsGeneric = True }
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

test/PersistentTestModels.hs:118:58: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’ (imported from Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
    |
118 | share [ mkPersist sqlSettings { mpsPrefixFields = False, mpsGeneric = True }
    |                                                          ^^^^^^^^^^

test/PersistentTestModels.hs:143:10: warning: [GHC-06201] [-Wmissing-methods]
    • No explicit implementation for
        ‘tabulateEntityA’
    • In the instance declaration for
        ‘PersistEntity (ReverseFieldOrder a)’
    |
143 | instance (PersistEntity a) => PersistEntity (ReverseFieldOrder a) where
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

test/PersistentTestModels.hs:167:15: warning: [-Wunused-matches]
    Defined but not used: ‘x’
    |
167 |     fieldLens x = error "ReverseFieldOrder.fieldLens"
    |               ^
[4 of 5] Compiling CodeGenTest
[5 of 5] Compiling Main

test/Spec.hs:62:43: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
62 |               => PersistEntityBackend val ~ BaseBackend backend
   |                                           ^

test/Spec.hs:119:91: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
119 |         let insert' :: (PersistStore backend, PersistEntity val, PersistEntityBackend val ~ BaseBackend backend, MonadIO m, SafeToInsert val)
    |                                                                                           ^

test/Spec.hs:138:91: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
138 |         let insert' :: (PersistStore backend, PersistEntity val, PersistEntityBackend val ~ BaseBackend backend, MonadIO m, SafeToInsert val)
    |                                                                                           ^
[6 of 6] Linking /tmp/workdir-persistent-qq/persistent-qq-2.12.0.6/dist-newstyle/build/x86_64-linux/ghc-9.6.6/persistent-qq-2.12.0.6/t/specs/build/specs/specs
