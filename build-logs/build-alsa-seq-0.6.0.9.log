Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - alsa-seq-0.6.0.9 (lib) (first run)
Configuring library for alsa-seq-0.6.0.9...
Preprocessing library for alsa-seq-0.6.0.9...
Building library for alsa-seq-0.6.0.9...
[ 1 of 40] Compiling Sound.ALSA.Sequencer.Area
[ 2 of 40] Compiling Sound.ALSA.Sequencer.Marshal.Sequencer
[ 3 of 40] Compiling Sound.ALSA.Sequencer.Poll
[ 4 of 40] Compiling Sound.ALSA.Sequencer.Query
[ 5 of 40] Compiling Sound.ALSA.Sequencer.Sequencer

src/Sound/ALSA/Sequencer/Sequencer.hs:19:1: warning: [-Wunused-imports]
    The import of ‘Data.Word’ is redundant
      except perhaps to import instances from ‘Data.Word’
    To import instances alone, use: import Data.Word()
   |
19 | import Data.Word (Word, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
[ 6 of 40] Compiling Sound.ALSA.Sequencer
[ 7 of 40] Compiling Sound.ALSA.Sequencer.Utility
[ 8 of 40] Compiling Sound.ALSA.Sequencer.Marshal.RealTime
[ 9 of 40] Compiling Sound.ALSA.Sequencer.RealTime
[10 of 40] Compiling Sound.ALSA.Sequencer.Marshal.Time

src/Sound/ALSA/Sequencer/Marshal/Time.hsc:14:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
14 | import Data.Monoid (mappend, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[11 of 40] Compiling Sound.ALSA.Sequencer.Time
[12 of 40] Compiling Sound.ALSA.Sequencer.Marshal.Queue
[13 of 40] Compiling Sound.ALSA.Sequencer.Queue.Timer

src/Sound/ALSA/Sequencer/Queue/Timer.hsc:42:1: warning: [-Wunused-imports]
    The import of ‘Data.Word’ is redundant
      except perhaps to import instances from ‘Data.Word’
    To import instances alone, use: import Data.Word()
   |
42 | import Data.Word (Word, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
[14 of 40] Compiling Sound.ALSA.Sequencer.Queue.Tempo

src/Sound/ALSA/Sequencer/Queue/Tempo.hsc:43:1: warning: [-Wunused-imports]
    The import of ‘Data.Word’ is redundant
      except perhaps to import instances from ‘Data.Word’
    To import instances alone, use: import Data.Word()
   |
43 | import Data.Word (Word, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
[15 of 40] Compiling Sound.ALSA.Sequencer.Queue.Status
[16 of 40] Compiling Sound.ALSA.Sequencer.Marshal.Port
[17 of 40] Compiling Sound.ALSA.Sequencer.Marshal.Client
[18 of 40] Compiling Sound.ALSA.Sequencer.Queue.Info

src/Sound/ALSA/Sequencer/Queue/Info.hsc:44:1: warning: [-Wunused-imports]
    The import of ‘Data.Word’ is redundant
      except perhaps to import instances from ‘Data.Word’
    To import instances alone, use: import Data.Word()
   |
44 | import Data.Word (Word, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
[19 of 40] Compiling Sound.ALSA.Sequencer.Marshal.ClientInfo

src/Sound/ALSA/Sequencer/Marshal/ClientInfo.hsc:30:1: warning: [-Wunused-imports]
    The import of ‘Data.Word’ is redundant
      except perhaps to import instances from ‘Data.Word’
    To import instances alone, use: import Data.Word()
   |
30 | import Data.Word (Word, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
[20 of 40] Compiling Sound.ALSA.Sequencer.Client.InfoMonad

src/Sound/ALSA/Sequencer/Client/InfoMonad.hs:28:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
28 | import Control.Applicative (Applicative, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Sound/ALSA/Sequencer/Client/InfoMonad.hs:30:1: warning: [-Wunused-imports]
    The import of ‘Data.Word’ is redundant
      except perhaps to import instances from ‘Data.Word’
    To import instances alone, use: import Data.Word()
   |
30 | import Data.Word (Word, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
[21 of 40] Compiling Sound.ALSA.Sequencer.Client
[22 of 40] Compiling Sound.ALSA.Sequencer.Marshal.Address
[23 of 40] Compiling Sound.ALSA.Sequencer.Subscribe.Query

src/Sound/ALSA/Sequencer/Subscribe/Query.hsc:59:1: warning: [-Wunused-imports]
    The import of ‘Data.Word’ is redundant
      except perhaps to import instances from ‘Data.Word’
    To import instances alone, use: import Data.Word()
   |
59 | import Data.Word (Word, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
[24 of 40] Compiling Sound.ALSA.Sequencer.Subscribe
[25 of 40] Compiling Sound.ALSA.Sequencer.Marshal.PortInfo

src/Sound/ALSA/Sequencer/Marshal/PortInfo.hsc:35:1: warning: [-Wunused-imports]
    The import of ‘Data.Word’ is redundant
      except perhaps to import instances from ‘Data.Word’
    To import instances alone, use: import Data.Word()
   |
35 | import Data.Word (Word, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
[26 of 40] Compiling Sound.ALSA.Sequencer.Port.InfoMonad

src/Sound/ALSA/Sequencer/Port/InfoMonad.hs:62:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
62 | import Control.Applicative (Applicative, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Sound/ALSA/Sequencer/Port/InfoMonad.hs:64:1: warning: [-Wunused-imports]
    The import of ‘Data.Word’ is redundant
      except perhaps to import instances from ‘Data.Word’
    To import instances alone, use: import Data.Word()
   |
64 | import Data.Word (Word, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
[27 of 40] Compiling Sound.ALSA.Sequencer.Port.Info
[28 of 40] Compiling Sound.ALSA.Sequencer.Port
[29 of 40] Compiling Sound.ALSA.Sequencer.Marshal.Connect
[30 of 40] Compiling Sound.ALSA.Sequencer.Marshal.Event

src/Sound/ALSA/Sequencer/Marshal/Event.hsc:46:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
46 | import Data.Monoid (mappend, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[31 of 40] Compiling Sound.ALSA.Sequencer.Queue
[32 of 40] Compiling Sound.ALSA.Sequencer.Client.Info.EventFilter
[33 of 40] Compiling Sound.ALSA.Sequencer.Client.Info
[34 of 40] Compiling Sound.ALSA.Sequencer.Event.Remove
[35 of 40] Compiling Sound.ALSA.Sequencer.Event.RemoveMonad

src/Sound/ALSA/Sequencer/Event/RemoveMonad.hs:45:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
45 | import Control.Applicative (Applicative, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Sound/ALSA/Sequencer/Event/RemoveMonad.hs:51:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
51 | import Data.Monoid (mempty, mappend, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36 of 40] Compiling Sound.ALSA.Sequencer.Connect
[37 of 40] Compiling Sound.ALSA.Sequencer.Address
[38 of 40] Compiling Sound.ALSA.Sequencer.Event.Accessor
[39 of 40] Compiling Sound.ALSA.Sequencer.Event

src/Sound/ALSA/Sequencer/Event.hs:95:1: warning: [-Wunused-imports]
    The import of ‘Data.Word’ is redundant
      except perhaps to import instances from ‘Data.Word’
    To import instances alone, use: import Data.Word()
   |
95 | import Data.Word (Word, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
[40 of 40] Compiling Sound.ALSA.Sequencer.Concurrent

src/Sound/ALSA/Sequencer/Concurrent.hs:24:1: warning: [-Wunused-imports]
    The import of ‘Data.Word’ is redundant
      except perhaps to import instances from ‘Data.Word’
    To import instances alone, use: import Data.Word()
   |
24 | import Data.Word (Word, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^

src/Sound/ALSA/Sequencer/Concurrent.hs:97:52: warning: [GHC-97441] [-Woverflowed-literals]
    Literal -1 is out of the Word range 0..18446744073709551615
   |
97 |     _ <- Event.drainOutput sh `catchFull` return (-1)
   |                                                    ^

src/Sound/ALSA/Sequencer/Concurrent.hs:106:50: warning: [GHC-97441] [-Woverflowed-literals]
    Literal -1 is out of the Word range 0..18446744073709551615
    |
106 |   n <- Event.drainOutput sh `catchFull` return (-1)
    |                                                  ^
