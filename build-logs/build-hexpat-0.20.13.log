Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - hexpat-0.20.13 (lib) (first run)
Configuring library for hexpat-0.20.13...
Preprocessing library for hexpat-0.20.13...
Building library for hexpat-0.20.13...
[ 1 of 12] Compiling Text.XML.Expat.Internal.IO

Text/XML/Expat/Internal/IO.hs:17:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
17 | import Control.Applicative
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^

Text/XML/Expat/Internal/IO.hs:199:9: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘memcpy’
    (imported from Data.ByteString.Internal, but defined in Data.ByteString.Internal.Type):
    Deprecated: "Use Foreign.Marshal.Utils.copyBytes instead"
    |
199 |         I.memcpy ptr (castPtr cstr) (fromIntegral len)
    |         ^^^^^^^^

Text/XML/Expat/Internal/IO.hs:212:21: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘memcpy’
    (imported from Data.ByteString.Internal, but defined in Data.ByteString.Internal.Type):
    Deprecated: "Use Foreign.Marshal.Utils.copyBytes instead"
    |
212 |                     I.memcpy (castPtr ctext) (ctextBS `plusPtr` offset) (fromIntegral len)
    |                     ^^^^^^^^
[ 2 of 12] Compiling Text.XML.Expat.SAX

Text/XML/Expat/SAX.hs:52:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
52 | import Control.Applicative
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 3 of 12] Compiling Text.XML.Expat.Internal.NodeClass

Text/XML/Expat/Internal/NodeClass.hs:11:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
11 | import Data.Monoid (Monoid)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^

Text/XML/Expat/Internal/NodeClass.hs:32:47: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
32 | class (Functor c, List c) => NodeClass (n :: (* -> *) -> * -> * -> *) c where
   |                                               ^

Text/XML/Expat/Internal/NodeClass.hs:32:52: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
32 | class (Functor c, List c) => NodeClass (n :: (* -> *) -> * -> * -> *) c where
   |                                                    ^

Text/XML/Expat/Internal/NodeClass.hs:32:58: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
32 | class (Functor c, List c) => NodeClass (n :: (* -> *) -> * -> * -> *) c where
   |                                                          ^

Text/XML/Expat/Internal/NodeClass.hs:32:63: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
32 | class (Functor c, List c) => NodeClass (n :: (* -> *) -> * -> * -> *) c where
   |                                                               ^

Text/XML/Expat/Internal/NodeClass.hs:32:68: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
32 | class (Functor c, List c) => NodeClass (n :: (* -> *) -> * -> * -> *) c where
   |                                                                    ^
[ 4 of 12] Compiling Text.XML.Expat.Proc
[ 5 of 12] Compiling Text.XML.Expat.Internal.Qualified

Text/XML/Expat/Internal/Qualified.hs:24:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
24 | import Data.Monoid
   | ^^^^^^^^^^^^^^^^^^
[ 6 of 12] Compiling Text.XML.Expat.Internal.DocumentClass

Text/XML/Expat/Internal/DocumentClass.hs:22:36: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
22 | data DocumentTypeDeclaration (c :: * -> *) tag text = DocumentTypeDeclaration deriving (Eq, Show)
   |                                    ^

Text/XML/Expat/Internal/DocumentClass.hs:22:41: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
22 | data DocumentTypeDeclaration (c :: * -> *) tag text = DocumentTypeDeclaration deriving (Eq, Show)
   |                                         ^

Text/XML/Expat/Internal/DocumentClass.hs:44:29: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
44 | type family NodeType (d :: (* -> *) -> * -> * -> *) :: (* -> *) -> * -> * -> *
   |                             ^

Text/XML/Expat/Internal/DocumentClass.hs:44:34: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
44 | type family NodeType (d :: (* -> *) -> * -> * -> *) :: (* -> *) -> * -> * -> *
   |                                  ^

Text/XML/Expat/Internal/DocumentClass.hs:44:40: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
44 | type family NodeType (d :: (* -> *) -> * -> * -> *) :: (* -> *) -> * -> * -> *
   |                                        ^

Text/XML/Expat/Internal/DocumentClass.hs:44:45: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
44 | type family NodeType (d :: (* -> *) -> * -> * -> *) :: (* -> *) -> * -> * -> *
   |                                             ^

Text/XML/Expat/Internal/DocumentClass.hs:44:50: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
44 | type family NodeType (d :: (* -> *) -> * -> * -> *) :: (* -> *) -> * -> * -> *
   |                                                  ^

Text/XML/Expat/Internal/DocumentClass.hs:44:57: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
44 | type family NodeType (d :: (* -> *) -> * -> * -> *) :: (* -> *) -> * -> * -> *
   |                                                         ^

Text/XML/Expat/Internal/DocumentClass.hs:44:62: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
44 | type family NodeType (d :: (* -> *) -> * -> * -> *) :: (* -> *) -> * -> * -> *
   |                                                              ^

Text/XML/Expat/Internal/DocumentClass.hs:44:68: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
44 | type family NodeType (d :: (* -> *) -> * -> * -> *) :: (* -> *) -> * -> * -> *
   |                                                                    ^

Text/XML/Expat/Internal/DocumentClass.hs:44:73: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
44 | type family NodeType (d :: (* -> *) -> * -> * -> *) :: (* -> *) -> * -> * -> *
   |                                                                         ^

Text/XML/Expat/Internal/DocumentClass.hs:44:78: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
44 | type family NodeType (d :: (* -> *) -> * -> * -> *) :: (* -> *) -> * -> * -> *
   |                                                                              ^

Text/XML/Expat/Internal/DocumentClass.hs:46:78: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
46 | class (Functor c, List c, NodeClass (NodeType d) c) => DocumentClass d (c :: * -> *) where
   |                                                                              ^

Text/XML/Expat/Internal/DocumentClass.hs:46:83: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
46 | class (Functor c, List c, NodeClass (NodeType d) c) => DocumentClass d (c :: * -> *) where
   |                                                                                   ^
[ 7 of 12] Compiling Text.XML.Expat.Internal.Namespaced
[ 8 of 12] Compiling Text.XML.Expat.Extended

Text/XML/Expat/Extended.hs:85:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
85 | import Data.Monoid
   | ^^^^^^^^^^^^^^^^^^
[ 9 of 12] Compiling Text.XML.Expat.Annotated

Text/XML/Expat/Annotated.hs:75:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
75 | import Data.Monoid
   | ^^^^^^^^^^^^^^^^^^
[10 of 12] Compiling Text.XML.Expat.Tree

Text/XML/Expat/Tree.hs:152:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
    |
152 | import Data.Monoid (Monoid,mempty,mappend)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[11 of 12] Compiling Text.XML.Expat.Format

Text/XML/Expat/Format.hs:53:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
53 | import Data.Monoid
   | ^^^^^^^^^^^^^^^^^^
[12 of 12] Compiling Text.XML.Expat.Cursor

Text/XML/Expat/Cursor.hs:98:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
98 | import Data.Monoid
   | ^^^^^^^^^^^^^^^^^^
