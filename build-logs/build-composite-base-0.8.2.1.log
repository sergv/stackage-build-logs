Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - composite-base-0.8.2.1 (lib) (first run)
 - composite-base-0.8.2.1 (test:composite-base-test) (first run)
Configuring library for composite-base-0.8.2.1...
Preprocessing library for composite-base-0.8.2.1...
Building library for composite-base-0.8.2.1...
[1 of 6] Compiling Composite.Record
[2 of 6] Compiling Composite.CoRecord

src/Composite/CoRecord.hs:23:21: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
23 | data CoRec :: (u -> *) -> [u] -> * where
   |                     ^

src/Composite/CoRecord.hs:23:34: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
23 | data CoRec :: (u -> *) -> [u] -> * where
   |                                  ^

src/Composite/CoRecord.hs:163:21: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
163 |   :: forall (cs :: [* -> Constraint]) (f :: * -> *) (rs :: [*]) (b :: *) (proxy :: [* -> Constraint] -> *).
    |                     ^

src/Composite/CoRecord.hs:163:45: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
163 |   :: forall (cs :: [* -> Constraint]) (f :: * -> *) (rs :: [*]) (b :: *) (proxy :: [* -> Constraint] -> *).
    |                                             ^

src/Composite/CoRecord.hs:163:50: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
163 |   :: forall (cs :: [* -> Constraint]) (f :: * -> *) (rs :: [*]) (b :: *) (proxy :: [* -> Constraint] -> *).
    |                                                  ^

src/Composite/CoRecord.hs:163:61: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
163 |   :: forall (cs :: [* -> Constraint]) (f :: * -> *) (rs :: [*]) (b :: *) (proxy :: [* -> Constraint] -> *).
    |                                                             ^

src/Composite/CoRecord.hs:163:71: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
163 |   :: forall (cs :: [* -> Constraint]) (f :: * -> *) (rs :: [*]) (b :: *) (proxy :: [* -> Constraint] -> *).
    |                                                                       ^

src/Composite/CoRecord.hs:163:85: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
163 |   :: forall (cs :: [* -> Constraint]) (f :: * -> *) (rs :: [*]) (b :: *) (proxy :: [* -> Constraint] -> *).
    |                                                                                     ^

src/Composite/CoRecord.hs:163:105: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
163 |   :: forall (cs :: [* -> Constraint]) (f :: * -> *) (rs :: [*]) (b :: *) (proxy :: [* -> Constraint] -> *).
    |                                                                                                         ^

src/Composite/CoRecord.hs:166:20: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
166 |   -> (forall (a :: *). HasInstances a cs => a -> b)
    |                    ^

src/Composite/CoRecord.hs:176:21: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
176 |   :: forall (cs :: [* -> Constraint]) (rs :: [*]) (b :: *) (proxy :: [* -> Constraint] -> *).
    |                     ^

src/Composite/CoRecord.hs:176:47: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
176 |   :: forall (cs :: [* -> Constraint]) (rs :: [*]) (b :: *) (proxy :: [* -> Constraint] -> *).
    |                                               ^

src/Composite/CoRecord.hs:176:57: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
176 |   :: forall (cs :: [* -> Constraint]) (rs :: [*]) (b :: *) (proxy :: [* -> Constraint] -> *).
    |                                                         ^

src/Composite/CoRecord.hs:176:71: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
176 |   :: forall (cs :: [* -> Constraint]) (rs :: [*]) (b :: *) (proxy :: [* -> Constraint] -> *).
    |                                                                       ^

src/Composite/CoRecord.hs:176:91: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
176 |   :: forall (cs :: [* -> Constraint]) (rs :: [*]) (b :: *) (proxy :: [* -> Constraint] -> *).
    |                                                                                           ^

src/Composite/CoRecord.hs:179:20: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
179 |   -> (forall (a :: *). HasInstances a cs => a -> b)
    |                    ^
[3 of 6] Compiling Composite
[4 of 6] Compiling Composite.TH
[5 of 6] Compiling Control.Monad.Composite.Context

src/Control/Monad/Composite/Context.hs:62:38: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
62 | class Monad m => MonadContext (c :: [*]) m | m -> c where
   |                                      ^

src/Control/Monad/Composite/Context.hs:126:25: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
126 | newtype ContextT (c :: [*]) (m :: (* -> *)) a = ContextT { runContextT :: Record c -> m a }
    |                         ^

src/Control/Monad/Composite/Context.hs:126:36: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
126 | newtype ContextT (c :: [*]) (m :: (* -> *)) a = ContextT { runContextT :: Record c -> m a }
    |                                    ^

src/Control/Monad/Composite/Context.hs:126:41: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
126 | newtype ContextT (c :: [*]) (m :: (* -> *)) a = ContextT { runContextT :: Record c -> m a }
    |                                         ^
[6 of 6] Compiling Paths_composite_base
Configuring test suite 'composite-base-test' for composite-base-0.8.2.1...
Preprocessing test suite 'composite-base-test' for composite-base-0.8.2.1...
Building test suite 'composite-base-test' for composite-base-0.8.2.1...
[1 of 4] Compiling Paths_composite_base
[2 of 4] Compiling RecordSpec

test/RecordSpec.hs:21:11: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘Record TestRec’ not matched:
            _ :& p where p is not one of {RNil}
            :*: _ (_ :& _)
   |
21 |           foo :*: bar :*: RNil = rec
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^

test/RecordSpec.hs:27:11: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘Rec Maybe TestRec’ not matched:
            _
            :^: Nothing _
            :^: (Just _) _
            :^: (Just _) (:^: (Just _) _)
   |
27 |           Just foo :^: Nothing :^: RNil = rec
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

test/RecordSpec.hs:32:11: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘Rec Predicate TestRec’ not matched:
            _
            :!: _ _
   |
32 |           foo :!: bar :!: RNil = rec
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^
[3 of 4] Compiling THSpec
[4 of 4] Compiling Main
[5 of 5] Linking /tmp/workdir-composite-base/composite-base-0.8.2.1/dist-newstyle/build/x86_64-linux/ghc-9.6.6/composite-base-0.8.2.1/t/composite-base-test/build/composite-base-test/composite-base-test
