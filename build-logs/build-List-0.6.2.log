Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - List-0.6.2 (lib:List) (first run)
Warning: List.cabal:22:38: version operators used. To use version operators
the package needs to specify at least 'cabal-version: >= 1.8'.
Configuring List-0.6.2...
Preprocessing library for List-0.6.2...
Building library for List-0.6.2...
[1 of 3] Compiling Data.List.Class

src/Data/List/Class.hs:53:21: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
53 |     type ItemM l :: * -> *
   |                     ^

src/Data/List/Class.hs:53:26: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
53 |     type ItemM l :: * -> *
   |                          ^

src/Data/List/Class.hs:343:43: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
343 | listStateJoin :: (List l, List k, ItemM l ~ StateT s (ItemM k))
    |                                           ^
[2 of 3] Compiling Control.Monad.ListT

src/Control/Monad/ListT.hs:28:46: warning: [-Wunused-imports]
    The import of ‘Applicative’
    from module ‘Control.Applicative’ is redundant
   |
28 | import Control.Applicative (Alternative(..), Applicative(..))
   |                                              ^^^^^^^^^^^^^^^

src/Control/Monad/ListT.hs:33:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
   |
33 | import Data.Semigroup (Semigroup(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Control/Monad/ListT.hs:35:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
35 | import Data.Monoid (Monoid(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Control/Monad/ListT.hs:71:5: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad (ListT m)’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
71 |     return = ListT . return . (`Cons` mempty)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Control/Monad/ListT.hs:75:5: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative (ListT m)’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
75 |     pure = return
   |     ^^^^^^^^^^^^^
[3 of 3] Compiling Control.Monad.ListT.Funcs
