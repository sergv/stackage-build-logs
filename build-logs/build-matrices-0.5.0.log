Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - matrices-0.5.0 (lib) (first run)
 - matrices-0.5.0 (test:test) (first run)
Configuring library for matrices-0.5.0...
Preprocessing library for matrices-0.5.0...
Building library for matrices-0.5.0...
[ 1 of 13] Compiling Data.Matrix.Class.Mutable
[ 2 of 13] Compiling Data.Matrix.Class

src/Data/Matrix/Class.hs:35:28: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
35 | type family Mutable (m :: (* -> *) -> * -> *) :: (* -> * -> *) -> * -> * -> *
   |                            ^

src/Data/Matrix/Class.hs:35:33: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
35 | type family Mutable (m :: (* -> *) -> * -> *) :: (* -> * -> *) -> * -> * -> *
   |                                 ^

src/Data/Matrix/Class.hs:35:39: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
35 | type family Mutable (m :: (* -> *) -> * -> *) :: (* -> * -> *) -> * -> * -> *
   |                                       ^

src/Data/Matrix/Class.hs:35:44: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
35 | type family Mutable (m :: (* -> *) -> * -> *) :: (* -> * -> *) -> * -> * -> *
   |                                            ^

src/Data/Matrix/Class.hs:35:51: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
35 | type family Mutable (m :: (* -> *) -> * -> *) :: (* -> * -> *) -> * -> * -> *
   |                                                   ^

src/Data/Matrix/Class.hs:35:56: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
35 | type family Mutable (m :: (* -> *) -> * -> *) :: (* -> * -> *) -> * -> * -> *
   |                                                        ^

src/Data/Matrix/Class.hs:35:61: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
35 | type family Mutable (m :: (* -> *) -> * -> *) :: (* -> * -> *) -> * -> * -> *
   |                                                             ^

src/Data/Matrix/Class.hs:35:67: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
35 | type family Mutable (m :: (* -> *) -> * -> *) :: (* -> * -> *) -> * -> * -> *
   |                                                                   ^

src/Data/Matrix/Class.hs:35:72: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
35 | type family Mutable (m :: (* -> *) -> * -> *) :: (* -> * -> *) -> * -> * -> *
   |                                                                        ^

src/Data/Matrix/Class.hs:35:77: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
35 | type family Mutable (m :: (* -> *) -> * -> *) :: (* -> * -> *) -> * -> * -> *
   |                                                                             ^
[ 3 of 13] Compiling Data.Matrix.Generic.Mutable
[ 4 of 13] Compiling Data.Matrix.Generic
[ 5 of 13] Compiling Data.Matrix.Mutable
[ 6 of 13] Compiling Data.Matrix

src/Data/Matrix.hs:107:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
    |
107 | import Data.Foldable (Foldable)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 7 of 13] Compiling Data.Matrix.Sparse.Generic
[ 8 of 13] Compiling Data.Matrix.Storable.Mutable
[ 9 of 13] Compiling Data.Matrix.Storable

src/Data/Matrix/Storable.hs:104:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
    |
104 | import Data.Foldable (Foldable)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[10 of 13] Compiling Data.Matrix.Symmetric.Generic.Mutable
[11 of 13] Compiling Data.Matrix.Symmetric.Generic
[12 of 13] Compiling Data.Matrix.Unboxed.Mutable
[13 of 13] Compiling Data.Matrix.Unboxed

src/Data/Matrix/Unboxed.hs:104:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
    |
104 | import Data.Foldable (Foldable)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Matrix/Unboxed.hs:307:8: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Unbox (a, b)’ matches
        instance (Unbox a, Unbox b) => Unbox (a, b)
          -- Defined in ‘Data.Vector.Unboxed.Base’
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the type signature:
        zip :: (Context a, Context b, Context (a, b)) =>
               Matrix a -> Matrix b -> Matrix (a, b)
    |
307 | zip :: ( Context a, Context b
    |        ^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Matrix/Unboxed.hs:312:9: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Unbox (a, b, c)’ matches
        instance (Unbox a, Unbox b, Unbox c) => Unbox (a, b, c)
          -- Defined in ‘Data.Vector.Unboxed.Base’
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the type signature:
        zip3 :: (Context a, Context b, Context c, Context (a, b, c)) =>
                Matrix a -> Matrix b -> Matrix c -> Matrix (a, b, c)
    |
312 | zip3 :: ( Context a, Context b, Context c
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Matrix/Unboxed.hs:317:9: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Unbox (a, b, c, d)’ matches
        instance (Unbox a, Unbox b, Unbox c, Unbox d) => Unbox (a, b, c, d)
          -- Defined in ‘Data.Vector.Unboxed.Base’
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the type signature:
        zip4 :: (Context a,
                 Context b,
                 Context c,
                 Context d,
                 Context (a, b, c, d)) =>
                Matrix a -> Matrix b -> Matrix c -> Matrix d -> Matrix (a, b, c, d)
    |
317 | zip4 :: ( Context a, Context b, Context c, Context d
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Matrix/Unboxed.hs:322:9: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Unbox (a, b, c, d, e)’ matches
        instance (Unbox a, Unbox b, Unbox c, Unbox d, Unbox e) =>
                 Unbox (a, b, c, d, e)
          -- Defined in ‘Data.Vector.Unboxed.Base’
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the type signature:
        zip5 :: (Context a,
                 Context b,
                 Context c,
                 Context d,
                 Context e,
                 Context (a, b, c, d, e)) =>
                Matrix a
                -> Matrix b
                   -> Matrix c -> Matrix d -> Matrix e -> Matrix (a, b, c, d, e)
    |
322 | zip5 :: ( Context a, Context b, Context c, Context d, Context e
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Matrix/Unboxed.hs:328:9: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Unbox (a, b, c, d, e, f)’ matches
        instance (Unbox a, Unbox b, Unbox c, Unbox d, Unbox e, Unbox f) =>
                 Unbox (a, b, c, d, e, f)
          -- Defined in ‘Data.Vector.Unboxed.Base’
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the type signature:
        zip6 :: (Context a,
                 Context b,
                 Context c,
                 Context d,
                 Context e,
                 Context f,
                 Context (a, b, c, d, e, f)) =>
                Matrix a
                -> Matrix b
                   -> Matrix c
                      -> Matrix d -> Matrix e -> Matrix f -> Matrix (a, b, c, d, e, f)
    |
328 | zip6 :: ( Context a, Context b, Context c, Context d, Context e, Context f
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Matrix/Unboxed.hs:342:10: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Unbox (a, b)’ matches
        instance (Unbox a, Unbox b) => Unbox (a, b)
          -- Defined in ‘Data.Vector.Unboxed.Base’
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the type signature:
        unzip :: (Context a, Context b, Context (a, b)) =>
                 Matrix (a, b) -> (Matrix a, Matrix b)
    |
342 | unzip :: (Context a, Context b, Context (a,b))
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Matrix/Unboxed.hs:346:11: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Unbox (a, b, c)’ matches
        instance (Unbox a, Unbox b, Unbox c) => Unbox (a, b, c)
          -- Defined in ‘Data.Vector.Unboxed.Base’
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the type signature:
        unzip3 :: (Context a, Context b, Context c, Context (a, b, c)) =>
                  Matrix (a, b, c) -> (Matrix a, Matrix b, Matrix c)
    |
346 | unzip3 :: ( Context a, Context b, Context c
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Matrix/Unboxed.hs:351:11: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Unbox (a, b, c, d)’ matches
        instance (Unbox a, Unbox b, Unbox c, Unbox d) => Unbox (a, b, c, d)
          -- Defined in ‘Data.Vector.Unboxed.Base’
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the type signature:
        unzip4 :: (Context a,
                   Context b,
                   Context c,
                   Context d,
                   Context (a, b, c, d)) =>
                  Matrix (a, b, c, d) -> (Matrix a, Matrix b, Matrix c, Matrix d)
    |
351 | unzip4 :: ( Context a, Context b, Context c, Context d
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Matrix/Unboxed.hs:356:11: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Unbox (a, b, c, d, e)’ matches
        instance (Unbox a, Unbox b, Unbox c, Unbox d, Unbox e) =>
                 Unbox (a, b, c, d, e)
          -- Defined in ‘Data.Vector.Unboxed.Base’
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the type signature:
        unzip5 :: (Context a,
                   Context b,
                   Context c,
                   Context d,
                   Context e,
                   Context (a, b, c, d, e)) =>
                  Matrix (a, b, c, d, e)
                  -> (Matrix a, Matrix b, Matrix c, Matrix d, Matrix e)
    |
356 | unzip5 :: ( Context a, Context b, Context c, Context d, Context e
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Data/Matrix/Unboxed.hs:362:11: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Unbox (a, b, c, d, e, f)’ matches
        instance (Unbox a, Unbox b, Unbox c, Unbox d, Unbox e, Unbox f) =>
                 Unbox (a, b, c, d, e, f)
          -- Defined in ‘Data.Vector.Unboxed.Base’
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the type signature:
        unzip6 :: (Context a,
                   Context b,
                   Context c,
                   Context d,
                   Context e,
                   Context f,
                   Context (a, b, c, d, e, f)) =>
                  Matrix (a, b, c, d, e, f)
                  -> (Matrix a, Matrix b, Matrix c, Matrix d, Matrix e, Matrix f)
    |
362 | unzip6 :: ( Context a, Context b, Context c, Context d, Context e, Context f
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
Configuring test suite 'test' for matrices-0.5.0...
Preprocessing test suite 'test' for matrices-0.5.0...
Building test suite 'test' for matrices-0.5.0...
[1 of 1] Compiling Main
[2 of 2] Linking /tmp/workdir-matrices/matrices-0.5.0/dist-newstyle/build/x86_64-linux/ghc-9.6.6/matrices-0.5.0/t/test/build/test/test
