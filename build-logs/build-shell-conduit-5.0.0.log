Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - shell-conduit-5.0.0 (lib) (first run)
 - shell-conduit-5.0.0 (test:test) (first run)
Configuring library for shell-conduit-5.0.0...
Preprocessing library for shell-conduit-5.0.0...
Building library for shell-conduit-5.0.0...
[1 of 7] Compiling Data.Conduit.Shell.Process

src/Data/Conduit/Shell/Process.hs:56:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad (Segment m)’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
56 |   return = SegmentConduit . return
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/Shell/Process.hs:73:15: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative (Segment m)’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
73 |   (<*>) = ap; pure = return
   |               ^^^^^^^^^^^^^

src/Data/Conduit/Shell/Process.hs:127:3: warning: [-Wunused-top-binds]
    Defined but not used: ‘toSegment’
    |
127 |   toSegment :: a -> Segment m (SegmentResult m a)
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/Shell/Process.hs:133:13: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
133 | instance (a ~ ByteString, ToChunk b, Monad m) =>
    |             ^

src/Data/Conduit/Shell/Process.hs:173:9: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
173 |   :: (r ~ (), MonadThrow m)
    |         ^

src/Data/Conduit/Shell/Process.hs:179:9: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
179 |   :: (a ~ ByteString, Monad m)
    |         ^

src/Data/Conduit/Shell/Process.hs:185:9: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
185 |   :: (a ~ ByteString, Monad m)
    |         ^

src/Data/Conduit/Shell/Process.hs:191:9: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
191 |   :: (a ~ ByteString, Monad m)
    |         ^
[2 of 7] Compiling Data.Conduit.Shell.Segments
[3 of 7] Compiling Data.Conduit.Shell.Types

src/Data/Conduit/Shell/Types.hs:18:1: warning: [-Wunused-imports]
    The import of ‘Control.Monad’ is redundant
      except perhaps to import instances from ‘Control.Monad’
    To import instances alone, use: import Control.Monad()
   |
18 | import Control.Monad
   | ^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/Shell/Types.hs:23:1: warning: [-Wunused-imports]
    The import of ‘Data.Typeable’ is redundant
      except perhaps to import instances from ‘Data.Typeable’
    To import instances alone, use: import Data.Typeable()
   |
23 | import Data.Typeable
   | ^^^^^^^^^^^^^^^^^^^^
[4 of 7] Compiling Data.Conduit.Shell.Variadic

src/Data/Conduit/Shell/Variadic.hs:18:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
18 | import Control.Applicative (pure)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Conduit/Shell/Variadic.hs:35:13: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
35 | instance (r ~ (), MonadIO m) =>
   |             ^
[5 of 7] Compiling Data.Conduit.Shell.TH
[6 of 7] Compiling Data.Conduit.Shell.PATH
[7 of 7] Compiling Data.Conduit.Shell
Configuring test suite 'test' for shell-conduit-5.0.0...
Preprocessing test suite 'test' for shell-conduit-5.0.0...
Building test suite 'test' for shell-conduit-5.0.0...
[1 of 1] Compiling Main

test/Spec.hs:6:1: warning: [-Wdodgy-imports]
    Module ‘Data.Conduit.Shell’ does not export ‘ignore’
  |
6 | import Data.Conduit.Shell hiding (ignore) -- https://github.com/fpco/stackage/issues/2355#issue-212177275
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

test/Spec.hs:7:1: warning: [-Wunused-imports]
    The import of ‘Data.Conduit.Shell.PATH’ is redundant
      except perhaps to import instances from ‘Data.Conduit.Shell.PATH’
    To import instances alone, use: import Data.Conduit.Shell.PATH()
  |
7 | import Data.Conduit.Shell.PATH (true, false)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

test/Spec.hs:10:1: warning: [-Wunused-imports]
    The qualified import of ‘Data.Conduit.Binary’ is redundant
      except perhaps to import instances from ‘Data.Conduit.Binary’
    To import instances alone, use: import Data.Conduit.Binary()
   |
10 | import qualified Data.Conduit.Binary as CB
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

test/Spec.hs:13:1: warning: [-Wunused-imports]
    The import of ‘Data.ByteString’ is redundant
      except perhaps to import instances from ‘Data.ByteString’
    To import instances alone, use: import Data.ByteString()
   |
13 | import Data.ByteString
   | ^^^^^^^^^^^^^^^^^^^^^^
[2 of 2] Linking /tmp/workdir-shell-conduit/shell-conduit-5.0.0/dist-newstyle/build/x86_64-linux/ghc-9.6.6/shell-conduit-5.0.0/t/test/build/test/test
