Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - lazyio-0.1.0.4 (lib:lazyio) (first run)
Warning: lazyio.cabal:62:32: version operators used. To use version operators
the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: lazyio.cabal:63:20: version operators used. To use version operators
the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: lazyio.cabal:59:31: version operators used. To use version operators
the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: lazyio.cabal:56:20: version operators used. To use version operators
the package needs to specify at least 'cabal-version: >= 1.8'.
Warning: lazyio.cabal:57:26: version operators used. To use version operators
the package needs to specify at least 'cabal-version: >= 1.8'.
Configuring lazyio-0.1.0.4...
Preprocessing library for lazyio-0.1.0.4...
Building library for lazyio-0.1.0.4...
[1 of 3] Compiling Data.ApplicativeChain

src/Data/ApplicativeChain.hs:3:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
  |
3 | import Control.Applicative (Applicative(pure, (<*>)), )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[2 of 3] Compiling System.IO.Lazy

src/System/IO/Lazy.hs:54:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
54 | import Control.Applicative (Applicative(pure, (<*>)), )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/System/IO/Lazy.hs:64:4: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad T’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
64 |    return x = Cons $ return x
   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^

src/System/IO/Lazy.hs:73:4: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative T’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
73 |    pure = return
   |    ^^^^^^^^^^^^^
[3 of 3] Compiling System.IO.Lazy.Applicative

src/System/IO/Lazy/Applicative.hs:5:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
  |
5 | import Control.Applicative (Applicative(pure, (<*>)), )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
