Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - explicit-exception-0.2 (lib) (first run)
Configuring library for explicit-exception-0.2...
Preprocessing library for explicit-exception-0.2...
Building library for explicit-exception-0.2...
[ 1 of 11] Compiling Control.Monad.Exception.Synchronous

src/Control/Monad/Exception/Synchronous.hs:163:1: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘Exceptional e a’ not matched: Exception _
    |
163 | force ~(Success a) = Success a
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Control/Monad/Exception/Synchronous.hs:279:12: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘Exceptional e a’ not matched: Exception _
    |
279 |        let unSuccess ~(Success x) = x
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Control/Monad/Exception/Synchronous.hs:474:4: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad (ExceptionalT e m)’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
    |
474 |    return = ExceptionalT . return . return
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Control/Monad/Exception/Synchronous.hs:486:35: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘Exceptional e a’ not matched: Exception _
    |
486 |    mfix f = ExceptionalT $ mfix $ \ ~(Success r) -> runExceptionalT $ f r
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 2 of 11] Compiling Control.Monad.Exception.Asynchronous.Strict
[ 3 of 11] Compiling Control.Monad.Exception.Asynchronous.Lazy
[ 4 of 11] Compiling Control.Monad.Exception.Asynchronous
[ 5 of 11] Compiling Control.Monad.Exception.Warning

src/Control/Monad/Exception/Warning.hs:14:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
14 | import Control.Applicative (Applicative(pure, (<*>)))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Control/Monad/Exception/Warning.hs:114:4: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad (WarnableT e m)’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
    |
114 |    return = WarnableT . return . return
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 6 of 11] Compiling Control.Monad.Label

src/Control/Monad/Label.hs:17:1: warning: [-Wunused-imports]
    The import of ‘<*>, Applicative, pure’
    from module ‘Control.Applicative’ is redundant
   |
17 | import Control.Applicative (Applicative(pure, (<*>)), Alternative, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 7 of 11] Compiling Control.Monad.Exception.Label

src/Control/Monad/Exception/Label.hs:15:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
15 | import Control.Applicative (Applicative, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 8 of 11] Compiling System.IO.Straight

src/System/IO/Straight.hs:20:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
20 | import Control.Applicative (Applicative, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/System/IO/Straight.hs:68:1: warning: [GHC-90177] [-Worphans]
    Orphan instance: instance (MonadSIO m, ContainsIOException e) =>
                              MonadIO (ExceptionalT e m)
    Suggested fix:
      Move the instance declaration to the module of the class or of the type, or
      wrap the type with a newtype and declare the instance on the new type.
   |
68 | instance (MonadSIO m, ContainsIOException e) =>
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
[ 9 of 11] Compiling System.IO.Exception.File
[10 of 11] Compiling System.IO.Exception.TextFile

src/System/IO/Exception/TextFile.hs:47:4: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘manySynchronousT’
    (imported from Control.Monad.Exception.Asynchronous, but defined in Control.Monad.Exception.Asynchronous.Lazy):
    Deprecated: "use manyMonoidT with appropriate Monad like LazyIO and result Monoid like Endo instead"
   |
47 |    Async.manySynchronousT unsafeInterleaveSIO (:) [] (getChar h)
   |    ^^^^^^^^^^^^^^^^^^^^^^
[11 of 11] Compiling System.IO.Exception.BinaryFile
