Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - logging-effect-1.4.0 (lib) (first run)
Configuring library for logging-effect-1.4.0...
Preprocessing library for logging-effect-1.4.0...
Building library for logging-effect-1.4.0...

src/Control/Monad/Log.hs:2:14: warning: [-Wdeprecated-flags]
    -XAutoDeriveTypeable is deprecated: Typeable instances are created automatically for all types since GHC 8.2.
  |
2 | {-# LANGUAGE AutoDeriveTypeable #-}
  |              ^^^^^^^^^^^^^^^^^^
[1 of 1] Compiling Control.Monad.Log

src/Control/Monad/Log.hs:86:1: warning: [-Wunused-imports]
    The import of ‘UnliftIO, withUnliftIO’
    from module ‘Control.Monad.IO.Unlift’ is redundant
   |
86 | import Control.Monad.IO.Unlift (MonadUnliftIO(..), UnliftIO(..), withUnliftIO)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Control/Monad/Log.hs:95:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
   |
95 | import Data.Semigroup ((<>))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Control/Monad/Log.hs:108:1: warning: [-Wdeprecations]
    Module ‘Data.Text.Prettyprint.Doc’ is deprecated:
      "Use \"Prettyprinter\" instead."
    |
108 | import qualified Data.Text.Prettyprint.Doc as PP
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Control/Monad/Log.hs:109:1: warning: [-Wdeprecations]
    Module ‘Data.Text.Prettyprint.Doc.Render.Text’ is deprecated:
      "Use \"Prettyprinter.Render.Text\" instead."
    |
109 | import qualified Data.Text.Prettyprint.Doc.Render.Text as PP
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Control/Monad/Log.hs:149:32: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
149 |   default logMessageFree :: (m ~ t n, MonadTrans t, MonadLog message n) => (forall mon. Monoid mon => (message -> mon) -> mon) -> m ()
    |                                ^
