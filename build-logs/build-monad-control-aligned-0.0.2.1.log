Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - monad-control-aligned-0.0.2.1 (lib) (first run)
Configuring library for monad-control-aligned-0.0.2.1...
Preprocessing library for monad-control-aligned-0.0.2.1...
Building library for monad-control-aligned-0.0.2.1...
[1 of 1] Compiling Control.Monad.Trans.Control.Aligned

src/Control/Monad/Trans/Control/Aligned.hs:97:34: warning: [-Wunused-imports]
    The import of ‘const’ from module ‘Data.Function’ is redundant
   |
97 | import Data.Function ( (.), ($), const )
   |                                  ^^^^^

src/Control/Monad/Trans/Control/Aligned.hs:138:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Identity’ is redundant
      except perhaps to import instances from ‘Data.Functor.Identity’
    To import instances alone, use: import Data.Functor.Identity()
    |
138 | import Data.Functor.Identity ( Identity )
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Control/Monad/Trans/Control/Aligned.hs:153:17: warning: [-Wunused-imports]
    The import of ‘id’ from module ‘Prelude’ is redundant
    |
153 | import Prelude (id, (<$>), pure)
    |                 ^^

src/Control/Monad/Trans/Control/Aligned.hs:307:65: warning: [GHC-63397] [-Wname-shadowing]
    This binding for ‘s’ shadows the existing binding
      bound at src/Control/Monad/Trans/Control/Aligned.hs:307:28
    |
307 |     liftWith f = RWST $ \r s -> (,s,mempty) <$> (f $ \t -> (\(a,s,w) -> (w,s,a)) <$> runRWST t r s)
    |                                                                 ^

src/Control/Monad/Trans/Control/Aligned.hs:313:72: warning: [GHC-63397] [-Wname-shadowing]
    This binding for ‘s’ shadows the existing binding
      bound at src/Control/Monad/Trans/Control/Aligned.hs:313:35
    |
313 |     liftWith f = Strict.RWST $ \r s -> (,s,mempty) <$> (f $ \t -> (\(a,s,w) -> (w,s,a)) <$> Strict.runRWST t r s)
    |                                                                        ^

src/Control/Monad/Trans/Control/Aligned.hs:452:30: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
452 | type RunInBaseDefault (t :: (* -> *) -> * -> *) (m :: * -> *) (b :: * -> *) (stM :: * -> *) (stT :: * -> *) = forall a. t m a -> b (Compose stM stT a)
    |                              ^

src/Control/Monad/Trans/Control/Aligned.hs:452:35: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
452 | type RunInBaseDefault (t :: (* -> *) -> * -> *) (m :: * -> *) (b :: * -> *) (stM :: * -> *) (stT :: * -> *) = forall a. t m a -> b (Compose stM stT a)
    |                                   ^

src/Control/Monad/Trans/Control/Aligned.hs:452:41: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
452 | type RunInBaseDefault (t :: (* -> *) -> * -> *) (m :: * -> *) (b :: * -> *) (stM :: * -> *) (stT :: * -> *) = forall a. t m a -> b (Compose stM stT a)
    |                                         ^

src/Control/Monad/Trans/Control/Aligned.hs:452:46: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
452 | type RunInBaseDefault (t :: (* -> *) -> * -> *) (m :: * -> *) (b :: * -> *) (stM :: * -> *) (stT :: * -> *) = forall a. t m a -> b (Compose stM stT a)
    |                                              ^

src/Control/Monad/Trans/Control/Aligned.hs:452:55: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
452 | type RunInBaseDefault (t :: (* -> *) -> * -> *) (m :: * -> *) (b :: * -> *) (stM :: * -> *) (stT :: * -> *) = forall a. t m a -> b (Compose stM stT a)
    |                                                       ^

src/Control/Monad/Trans/Control/Aligned.hs:452:60: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
452 | type RunInBaseDefault (t :: (* -> *) -> * -> *) (m :: * -> *) (b :: * -> *) (stM :: * -> *) (stT :: * -> *) = forall a. t m a -> b (Compose stM stT a)
    |                                                            ^

src/Control/Monad/Trans/Control/Aligned.hs:452:69: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
452 | type RunInBaseDefault (t :: (* -> *) -> * -> *) (m :: * -> *) (b :: * -> *) (stM :: * -> *) (stT :: * -> *) = forall a. t m a -> b (Compose stM stT a)
    |                                                                     ^

src/Control/Monad/Trans/Control/Aligned.hs:452:74: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
452 | type RunInBaseDefault (t :: (* -> *) -> * -> *) (m :: * -> *) (b :: * -> *) (stM :: * -> *) (stT :: * -> *) = forall a. t m a -> b (Compose stM stT a)
    |                                                                          ^

src/Control/Monad/Trans/Control/Aligned.hs:452:85: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
452 | type RunInBaseDefault (t :: (* -> *) -> * -> *) (m :: * -> *) (b :: * -> *) (stM :: * -> *) (stT :: * -> *) = forall a. t m a -> b (Compose stM stT a)
    |                                                                                     ^

src/Control/Monad/Trans/Control/Aligned.hs:452:90: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
452 | type RunInBaseDefault (t :: (* -> *) -> * -> *) (m :: * -> *) (b :: * -> *) (stM :: * -> *) (stT :: * -> *) = forall a. t m a -> b (Compose stM stT a)
    |                                                                                          ^

src/Control/Monad/Trans/Control/Aligned.hs:452:101: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
452 | type RunInBaseDefault (t :: (* -> *) -> * -> *) (m :: * -> *) (b :: * -> *) (stM :: * -> *) (stT :: * -> *) = forall a. t m a -> b (Compose stM stT a)
    |                                                                                                     ^

src/Control/Monad/Trans/Control/Aligned.hs:452:106: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
452 | type RunInBaseDefault (t :: (* -> *) -> * -> *) (m :: * -> *) (b :: * -> *) (stM :: * -> *) (stT :: * -> *) = forall a. t m a -> b (Compose stM stT a)
    |                                                                                                          ^
