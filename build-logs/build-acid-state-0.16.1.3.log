Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - acid-state-0.16.1.3 (lib) (first run)
 - acid-state-0.16.1.3 (test:state-machine) (first run)
 - acid-state-0.16.1.3 (test:specs) (first run)
 - acid-state-0.16.1.3 (test:examples) (first run)
 - acid-state-0.16.1.3 (exe:acid-state-repair) (first run)
Configuring library for acid-state-0.16.1.3...
Preprocessing library for acid-state-0.16.1.3...
Building library for acid-state-0.16.1.3...
[ 1 of 16] Compiling Data.Acid.CRC
[ 2 of 16] Compiling Data.Acid.Archive

src/Data/Acid/Archive.hs:24:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
24 | import           Data.Monoid
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 3 of 16] Compiling Data.Acid.Core
[ 4 of 16] Compiling Data.Acid.Common

src/Data/Acid/Common.hs:37:5: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative (Update st)’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
37 |     pure = return
   |     ^^^^^^^^^^^^^

src/Data/Acid/Common.hs:45:5: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative (Query st)’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
45 |     pure = return
   |     ^^^^^^^^^^^^^
[ 5 of 16] Compiling Data.Acid.Abstract

src/Data/Acid/Abstract.hs:49:87: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
49 |                 _scheduleUpdate :: forall event. (UpdateEvent event, EventState event ~ st) => event -> IO (MVar (EventResult event))
   |                                                                                       ^

src/Data/Acid/Abstract.hs:51:77: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
51 |               , _query :: forall event. (QueryEvent event, EventState event ~ st) => event -> IO (EventResult event)
   |                                                                             ^
[ 6 of 16] Compiling Data.Acid.Advanced
[ 7 of 16] Compiling Data.Acid.Memory
[ 8 of 16] Compiling Data.Acid.Memory.Pure
[ 9 of 16] Compiling Data.Acid.Remote

src/Data/Acid/Remote.hs:127:56: warning: [-Wunused-imports]
    The import of ‘PortNumber’ from module ‘Network.BSD’ is redundant
    |
127 | import Network.BSD                                   ( PortNumber, getProtocolNumber, getHostByName, hostAddress )
    |                                                        ^^^^^^^^^^
[10 of 16] Compiling Data.Acid.TemplateHaskell

src/Data/Acid/TemplateHaskell.hs:335:46: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘strictType’
    (imported from Language.Haskell.TH, but defined in Language.Haskell.TH.Lib.Internal):
    Deprecated: "As of @template-haskell-2.11.0.0@, 'StrictType' has been replaced by 'BangType'. Please use 'bangType' instead."
    |
335 |     = do let con = normalC eventStructName [ strictType notStrict (return arg) | arg <- args ]
    |                                              ^^^^^^^^^^

src/Data/Acid/TemplateHaskell.hs:335:57: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘notStrict’
    (imported from Language.Haskell.TH, but defined in Language.Haskell.TH.Lib.Internal):
    Deprecated: "Use 'bang'. See https://gitlab.haskell.org/ghc/ghc/wikis/migration/8.0. 
                 Example usage: 'bang noSourceUnpackedness noSourceStrictness'"
    |
335 |     = do let con = normalC eventStructName [ strictType notStrict (return arg) | arg <- args ]
    |                                                         ^^^^^^^^^

src/Data/Acid/TemplateHaskell.hs:384:15: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘classP’
    (imported from Language.Haskell.TH, but defined in Language.Haskell.TH.Lib.Internal):
    Deprecated: "As of template-haskell-2.10, constraint predicates (Pred) are just types (Type), in keeping with ConstraintKinds. Please use 'conT' and 'appT'."
    |
384 |     = cxt $ [ classP classPred [varT tyvar] | tyvar <- allTyVarBndrNames tyvars, classPred <- preds ] ++
    |               ^^^^^^

src/Data/Acid/TemplateHaskell.hs:402:19: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘classP’
    (imported from Language.Haskell.TH, but defined in Language.Haskell.TH.Lib.Internal):
    Deprecated: "As of template-haskell-2.10, constraint predicates (Pred) are just types (Type), in keeping with ConstraintKinds. Please use 'conT' and 'appT'."
    |
402 |                 [ classP classPred [varT tyvar]
    |                   ^^^^^^

src/Data/Acid/TemplateHaskell.hs:430:29: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘classP’
    (imported from Language.Haskell.TH, but defined in Language.Haskell.TH.Lib.Internal):
    Deprecated: "As of template-haskell-2.10, constraint predicates (Pred) are just types (Type), in keeping with ConstraintKinds. Please use 'conT' and 'appT'."
    |
430 |          instanceD (cxt $ [ classP classPred [varT tyvar] | tyvar <- allTyVarBndrNames tyvars, classPred <- preds ] ++ map return context)
    |                             ^^^^^^
[11 of 16] Compiling FileIO
[12 of 16] Compiling Paths_acid_state
[13 of 16] Compiling Data.Acid.Log
[14 of 16] Compiling Data.Acid.Local
[15 of 16] Compiling Data.Acid.Repair
[16 of 16] Compiling Data.Acid
Configuring test suite 'state-machine' for acid-state-0.16.1.3...
Preprocessing test suite 'state-machine' for acid-state-0.16.1.3...
Building test suite 'state-machine' for acid-state-0.16.1.3...
[1 of 3] Compiling Data.Acid.StateMachineTest

test/Data/Acid/StateMachineTest.hs:122:20: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
122 | data Model s (v :: * -> *)
    |                    ^

test/Data/Acid/StateMachineTest.hs:122:25: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
122 | data Model s (v :: * -> *)
    |                         ^

test/Data/Acid/StateMachineTest.hs:178:19: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
178 | data Open s (v :: * -> *) = Open s
    |                   ^

test/Data/Acid/StateMachineTest.hs:178:24: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
178 | data Open s (v :: * -> *) = Open s
    |                        ^

test/Data/Acid/StateMachineTest.hs:210:24: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
210 | data WithState s (v :: * -> *) = WithState String (Var (Opaque (Acid.AcidState s)) v)
    |                        ^

test/Data/Acid/StateMachineTest.hs:210:29: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
210 | data WithState s (v :: * -> *) = WithState String (Var (Opaque (Acid.AcidState s)) v)
    |                             ^

test/Data/Acid/StateMachineTest.hs:271:28: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
271 | data AcidCommand s e (v :: * -> *) = AcidCommand e (Var (Opaque (Acid.AcidState s)) v)
    |                            ^

test/Data/Acid/StateMachineTest.hs:271:33: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
271 | data AcidCommand s e (v :: * -> *) = AcidCommand e (Var (Opaque (Acid.AcidState s)) v)
    |                                 ^
[2 of 3] Compiling Data.Acid.KeyValueStateMachine
[3 of 3] Compiling Main
[4 of 4] Linking /tmp/workdir-acid-state/acid-state-0.16.1.3/dist-newstyle/build/x86_64-linux/ghc-9.6.6/acid-state-0.16.1.3/t/state-machine/build/state-machine/state-machine
Configuring test suite 'specs' for acid-state-0.16.1.3...
Preprocessing test suite 'specs' for acid-state-0.16.1.3...
Building test suite 'specs' for acid-state-0.16.1.3...
[1 of 2] Compiling Data.Acid.TemplateHaskellSpec
[2 of 2] Compiling Main
[3 of 3] Linking /tmp/workdir-acid-state/acid-state-0.16.1.3/dist-newstyle/build/x86_64-linux/ghc-9.6.6/acid-state-0.16.1.3/t/specs/build/specs/specs
Configuring test suite 'examples' for acid-state-0.16.1.3...
Preprocessing test suite 'examples' for acid-state-0.16.1.3...
Building test suite 'examples' for acid-state-0.16.1.3...
[ 1 of 20] Compiling ChangeState
[ 2 of 20] Compiling ChangeVersion
[ 3 of 20] Compiling CheckpointCutsEvent
[ 4 of 20] Compiling Exceptions
[ 5 of 20] Compiling HelloDatabase
[ 6 of 20] Compiling HelloWorld
[ 7 of 20] Compiling HelloWorldNoTH
[ 8 of 20] Compiling KeyValue
[ 9 of 20] Compiling KeyValueNoTH
[10 of 20] Compiling MonadStateConstraint
[11 of 20] Compiling ParameterisedState
[12 of 20] Compiling Proxy
[13 of 20] Compiling RemoteCommon
[14 of 20] Compiling RemoteClient
[15 of 20] Compiling RemoteServer
[16 of 20] Compiling RemoveEvent
[17 of 20] Compiling SlowCheckpoint
[18 of 20] Compiling Main
[19 of 20] Compiling StressTest
[20 of 20] Compiling StressTestNoTH
[21 of 21] Linking /tmp/workdir-acid-state/acid-state-0.16.1.3/dist-newstyle/build/x86_64-linux/ghc-9.6.6/acid-state-0.16.1.3/t/examples/build/examples/examples
Configuring executable 'acid-state-repair' for acid-state-0.16.1.3...
Preprocessing executable 'acid-state-repair' for acid-state-0.16.1.3...
Building executable 'acid-state-repair' for acid-state-0.16.1.3...
[1 of 1] Compiling Main
[2 of 2] Linking /tmp/workdir-acid-state/acid-state-0.16.1.3/dist-newstyle/build/x86_64-linux/ghc-9.6.6/acid-state-0.16.1.3/x/acid-state-repair/build/acid-state-repair/acid-state-repair
