Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - shake-plus-0.3.4.0 (lib) (first run)
Configuring library for shake-plus-0.3.4.0...
Preprocessing library for shake-plus-0.3.4.0...
Building library for shake-plus-0.3.4.0...
[ 1 of 14] Compiling Development.Shake.Plus.Core
[ 2 of 14] Compiling Development.Shake.Plus.Config
[ 3 of 14] Compiling Development.Shake.Plus.Command
[ 4 of 14] Compiling Development.Shake.Plus.Cache

src/Development/Shake/Plus/Cache.hs:18:13: warning: [GHC-30606] [-Wredundant-constraints]
    Redundant constraint: Eq k
    In the type signature for:
         newCache :: forall (m :: * -> *) r k v.
                     (MonadRules m, MonadReader r m, Eq k, Hashable k) =>
                     (k -> RAction r v) -> m (k -> RAction r v)
   |
18 | newCache :: (MonadRules m, MonadReader r m, Eq k, Hashable k)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Development/Shake/Plus/Cache.hs:24:15: warning: [GHC-30606] [-Wredundant-constraints]
    Redundant constraint: Eq k
    In the type signature for:
         newCacheIO :: forall (m :: * -> *) r k v.
                       (MonadIO m, MonadReader r m, Eq k, Hashable k) =>
                       (k -> RAction r v) -> m (k -> RAction r v)
   |
24 | newCacheIO :: (MonadIO m, MonadReader r m, Eq k, Hashable k) => (k -> RAction r v) -> m (k -> RAction r v)
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 5 of 14] Compiling Development.Shake.Plus.Database
[ 6 of 14] Compiling Development.Shake.Plus.Directory
[ 7 of 14] Compiling Development.Shake.Plus.File
[ 8 of 14] Compiling Development.Shake.Plus.FileRules
[ 9 of 14] Compiling Development.Shake.Plus.Forward
[10 of 14] Compiling Development.Shake.Plus.Oracle

src/Development/Shake/Plus/Oracle.hs:23:59: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
23 | addOracle :: (MonadRules m, MonadReader r m, RuleResult q ~ a, ShakeValue q, ShakeValue a, Partial)
   |                                                           ^

src/Development/Shake/Plus/Oracle.hs:23:59: warning: [GHC-12003] [-Wtype-equality-out-of-scope]
    • The ‘~’ operator is out of scope.
      Assuming it to stand for an equality constraint.
    • NB: ‘~’ used to be built-in syntax but now is a regular type operator
          exported from Data.Type.Equality and Prelude.
      If you are using a custom Prelude, consider re-exporting it.
    • This will become an error in a future GHC release.
   |
23 | addOracle :: (MonadRules m, MonadReader r m, RuleResult q ~ a, ShakeValue q, ShakeValue a, Partial)
   |                                                           ^

src/Development/Shake/Plus/Oracle.hs:29:64: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
29 | addOracleCache :: (MonadRules m, MonadReader r m, RuleResult q ~ a, ShakeValue q, ShakeValue a, Partial)
   |                                                                ^

src/Development/Shake/Plus/Oracle.hs:29:64: warning: [GHC-12003] [-Wtype-equality-out-of-scope]
    • The ‘~’ operator is out of scope.
      Assuming it to stand for an equality constraint.
    • NB: ‘~’ used to be built-in syntax but now is a regular type operator
          exported from Data.Type.Equality and Prelude.
      If you are using a custom Prelude, consider re-exporting it.
    • This will become an error in a future GHC release.
   |
29 | addOracleCache :: (MonadRules m, MonadReader r m, RuleResult q ~ a, ShakeValue q, ShakeValue a, Partial)
   |                                                                ^

src/Development/Shake/Plus/Oracle.hs:35:63: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
35 | addOracleHash :: (MonadRules m, MonadReader r m, RuleResult q ~ a, ShakeValue q, ShakeValue a, Partial)
   |                                                               ^

src/Development/Shake/Plus/Oracle.hs:35:63: warning: [GHC-12003] [-Wtype-equality-out-of-scope]
    • The ‘~’ operator is out of scope.
      Assuming it to stand for an equality constraint.
    • NB: ‘~’ used to be built-in syntax but now is a regular type operator
          exported from Data.Type.Equality and Prelude.
      If you are using a custom Prelude, consider re-exporting it.
    • This will become an error in a future GHC release.
   |
35 | addOracleHash :: (MonadRules m, MonadReader r m, RuleResult q ~ a, ShakeValue q, ShakeValue a, Partial)
   |                                                               ^

src/Development/Shake/Plus/Oracle.hs:41:43: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
41 | askOracle :: (MonadAction m, RuleResult q ~ a, ShakeValue q, ShakeValue a) => q -> m a
   |                                           ^

src/Development/Shake/Plus/Oracle.hs:41:43: warning: [GHC-12003] [-Wtype-equality-out-of-scope]
    • The ‘~’ operator is out of scope.
      Assuming it to stand for an equality constraint.
    • NB: ‘~’ used to be built-in syntax but now is a regular type operator
          exported from Data.Type.Equality and Prelude.
      If you are using a custom Prelude, consider re-exporting it.
    • This will become an error in a future GHC release.
   |
41 | askOracle :: (MonadAction m, RuleResult q ~ a, ShakeValue q, ShakeValue a) => q -> m a
   |                                           ^

src/Development/Shake/Plus/Oracle.hs:45:44: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
45 | askOracles :: (MonadAction m, RuleResult q ~ a, ShakeValue q, ShakeValue a) => [q]-> m [a]
   |                                            ^

src/Development/Shake/Plus/Oracle.hs:45:44: warning: [GHC-12003] [-Wtype-equality-out-of-scope]
    • The ‘~’ operator is out of scope.
      Assuming it to stand for an equality constraint.
    • NB: ‘~’ used to be built-in syntax but now is a regular type operator
          exported from Data.Type.Equality and Prelude.
      If you are using a custom Prelude, consider re-exporting it.
    • This will become an error in a future GHC release.
   |
45 | askOracles :: (MonadAction m, RuleResult q ~ a, ShakeValue q, ShakeValue a) => [q]-> m [a]
   |                                            ^
[11 of 14] Compiling Development.Shake.Plus.Temp
[12 of 14] Compiling Development.Shake.Plus
[13 of 14] Compiling Development.Shake.Plus.Env
[14 of 14] Compiling Paths_shake_plus
