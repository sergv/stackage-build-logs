Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - ghc-typelits-presburger-0.7.4.0 (lib) (first run)
 - ghc-typelits-presburger-0.7.4.0 (test:test-typeltis-presburger) (first run)
Configuring library for ghc-typelits-presburger-0.7.4.0...
Preprocessing library for ghc-typelits-presburger-0.7.4.0...
Building library for ghc-typelits-presburger-0.7.4.0...
[1 of 6] Compiling Data.Integer.SAT

src/Data/Integer/SAT.hs:48:1: warning: [-Wunused-imports]
    The import of ‘<$>, Applicative’
    from module ‘Control.Applicative’ is redundant
   |
48 | import Control.Applicative (Alternative (..), Applicative (..), (<$>))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[2 of 6] Compiling GHC.TypeLits.Presburger.Flags
[3 of 6] Compiling GHC.TypeLits.Presburger.Compat

src/GHC/TypeLits/Presburger/Compat.hs:12:1: warning: [-Wunused-imports]
    The import of ‘GHC.TypeLits.Presburger.Flags’ is redundant
      except perhaps to import instances from ‘GHC.TypeLits.Presburger.Flags’
    To import instances alone, use: import GHC.TypeLits.Presburger.Flags()
   |
12 | import GHC.TypeLits.Presburger.Flags
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/GHC/TypeLits/Presburger/Compat.hs:23:1: warning: [-Wunused-imports]
    The import of ‘GHC.Builtin.Names’ is redundant
      except perhaps to import instances from ‘GHC.Builtin.Names’
    To import instances alone, use: import GHC.Builtin.Names()
   |
23 | import GHC.Builtin.Names (gHC_TYPENATS)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/GHC/TypeLits/Presburger/Compat.hs:25:27: warning: [-Wunused-imports]
    The import of ‘gHC_TYPENATS’
    from module ‘GHC.Builtin.Names’ is redundant
   |
25 | import GHC.Builtin.Names (gHC_TYPENATS, gHC_TYPEERROR)
   |                           ^^^^^^^^^^^^

src/GHC/TypeLits/Presburger/Compat.hs:77:1: warning: [-Wunused-imports]
    The import of ‘GHC.Builtin.Names’ is redundant
      except perhaps to import instances from ‘GHC.Builtin.Names’
    To import instances alone, use: import GHC.Builtin.Names()
   |
77 | import GHC.Builtin.Names (mkBaseModule)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/GHC/TypeLits/Presburger/Compat.hs:127:3: warning: [-Wunused-imports]
    The import of ‘mkTyConTy’ from module ‘GHC.Plugins’ is redundant
    |
127 |   mkTyConTy,
    |   ^^^^^^^^^

src/GHC/TypeLits/Presburger/Compat.hs:163:1: warning: [-Wunused-imports]
    The import of ‘GHC.Tc.Types’ is redundant
      except perhaps to import instances from ‘GHC.Tc.Types’
    To import instances alone, use: import GHC.Tc.Types()
    |
163 | import GHC.Tc.Types as GHC.TypeLits.Presburger.Compat (TcPlugin (..))
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/GHC/TypeLits/Presburger/Compat.hs:180:47: warning: [-Wunused-imports]
    The import of ‘toUnitId’ from module ‘GHC.Unit.Types’ is redundant
    |
180 | import GHC.Unit.Types (UnitId (..), fsToUnit, toUnitId)
    |                                               ^^^^^^^^
[4 of 6] Compiling GHC.TypeLits.Presburger.Types

src/GHC/TypeLits/Presburger/Types.hs:41:1: warning: [-Wunused-imports]
    The import of ‘Data.Char’ is redundant
      except perhaps to import instances from ‘Data.Char’
    To import instances alone, use: import Data.Char()
   |
41 | import Data.Char (isDigit)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^

src/GHC/TypeLits/Presburger/Types.hs:49:1: warning: [-Wunused-imports]
    The qualified import of ‘Data.List’ is redundant
      except perhaps to import instances from ‘Data.List’
    To import instances alone, use: import Data.List()
   |
49 | import qualified Data.List as L
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/GHC/TypeLits/Presburger/Types.hs:55:5: warning: [-Wunused-imports]
    The import of ‘listToMaybe’ from module ‘Data.Maybe’ is redundant
   |
55 |     listToMaybe,
   |     ^^^^^^^^^^^

src/GHC/TypeLits/Presburger/Types.hs:62:1: warning: [-Wunused-imports]
    The import of ‘GHC.TypeLits.Presburger.Flags’ is redundant
      except perhaps to import instances from ‘GHC.TypeLits.Presburger.Flags’
    To import instances alone, use: import GHC.TypeLits.Presburger.Flags()
   |
62 | import GHC.TypeLits.Presburger.Flags
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[5 of 6] Compiling GHC.TypeLits.Presburger
[6 of 6] Compiling Paths_ghc_typelits_presburger
Configuring test suite 'test-typeltis-presburger' for ghc-typelits-presburger-0.7.4.0...
Preprocessing test suite 'test-typeltis-presburger' for ghc-typelits-presburger-0.7.4.0...
Building test suite 'test-typeltis-presburger' for ghc-typelits-presburger-0.7.4.0...
[1 of 6] Compiling Paths_ghc_typelits_presburger
[2 of 6] Compiling Shared
[3 of 6] Compiling ErrorsWithPlugin

test/ErrorsWithPlugin.hs:11:1: warning: [GHC-62161] [-Wincomplete-patterns]
    Pattern match(es) are non-exhaustive
    In an equation for ‘zipMVec’:
        Patterns of type ‘Vec n a’, ‘Vec n b’ not matched:
            Nil (_ :- _)
            (_ :- _) Nil
   |
11 | zipMVec Nil Nil = Nil
   | ^^^^^^^^^^^^^^^^^^^^^...

test/ErrorsWithPlugin.hs:12:18: warning: [-Wunused-matches]
    Defined but not used: ‘as’
   |
12 | zipMVec zs@(a :- as) (b :- bs) = (a, b) :- zipMVec zs bs
   |                  ^^

test/ErrorsWithPlugin.hs:12:34: warning: [GHC-25897] [-Wdeferred-type-errors]
    • Could not deduce ‘n2 ~ n’
        arising from reasoning about an injective type family using constraints:
          ‘(n GHC.TypeNats.+ 1) ~ n’
            arising from a type equality
              Vec (n GHC.TypeNats.+ 1) (a, b)
              ~
              Vec n (a, b) at test/ErrorsWithPlugin.hs:12:34-56
          ‘(n2 GHC.TypeNats.+ 1) ~ n’
            arising from a pattern with constructor:
                           :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                                 a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
                         in an equation for ‘zipMVec’ at test/ErrorsWithPlugin.hs:12:23-29
      from the context: n ~ (n1 GHC.TypeNats.+ 1)
        bound by a pattern with constructor:
                   :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                         a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
                 in an equation for ‘zipMVec’
        at test/ErrorsWithPlugin.hs:12:13-19
      or from: n ~ (n2 GHC.TypeNats.+ 1)
        bound by a pattern with constructor:
                   :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                         a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
                 in an equation for ‘zipMVec’
        at test/ErrorsWithPlugin.hs:12:23-29
      ‘n2’ is a rigid type variable bound by
        a pattern with constructor:
          :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
        in an equation for ‘zipMVec’
        at test/ErrorsWithPlugin.hs:12:23-29
      ‘n’ is a rigid type variable bound by
        the type signature for:
          zipMVec :: forall (n :: GHC.TypeNats.Nat) a b.
                     Vec n a -> Vec n b -> Vec n (a, b)
        at test/ErrorsWithPlugin.hs:10:1-45
    • In the expression: (a, b) :- zipMVec zs bs
      In an equation for ‘zipMVec’:
          zipMVec zs@(a :- as) (b :- bs) = (a, b) :- zipMVec zs bs
    • Relevant bindings include
        bs :: Vec n2 b (bound at test/ErrorsWithPlugin.hs:12:28)
        zs :: Vec n a (bound at test/ErrorsWithPlugin.hs:12:9)
        zipMVec :: Vec n a -> Vec n b -> Vec n (a, b)
          (bound at test/ErrorsWithPlugin.hs:11:1)
   |
12 | zipMVec zs@(a :- as) (b :- bs) = (a, b) :- zipMVec zs bs
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^

test/ErrorsWithPlugin.hs:12:34: warning: [GHC-25897] [-Wdeferred-type-errors]
    • Could not deduce ‘(n GHC.TypeNats.+ 1) ~ n’
      from the context: n ~ (n1 GHC.TypeNats.+ 1)
        bound by a pattern with constructor:
                   :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                         a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
                 in an equation for ‘zipMVec’
        at test/ErrorsWithPlugin.hs:12:13-19
      or from: n ~ (n2 GHC.TypeNats.+ 1)
        bound by a pattern with constructor:
                   :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                         a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
                 in an equation for ‘zipMVec’
        at test/ErrorsWithPlugin.hs:12:23-29
      Expected: Vec n (a, b)
        Actual: Vec (n GHC.TypeNats.+ 1) (a, b)
      ‘n’ is a rigid type variable bound by
        the type signature for:
          zipMVec :: forall (n :: GHC.TypeNats.Nat) a b.
                     Vec n a -> Vec n b -> Vec n (a, b)
        at test/ErrorsWithPlugin.hs:10:1-45
    • In the expression: (a, b) :- zipMVec zs bs
      In an equation for ‘zipMVec’:
          zipMVec zs@(a :- as) (b :- bs) = (a, b) :- zipMVec zs bs
    • Relevant bindings include
        zs :: Vec n a (bound at test/ErrorsWithPlugin.hs:12:9)
        zipMVec :: Vec n a -> Vec n b -> Vec n (a, b)
          (bound at test/ErrorsWithPlugin.hs:11:1)
   |
12 | zipMVec zs@(a :- as) (b :- bs) = (a, b) :- zipMVec zs bs
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^

test/ErrorsWithPlugin.hs:19:31: warning: [GHC-25897] [-Wdeferred-type-errors]
    • Could not deduce ‘n1 ~ n’
      from the context: n ~ (n1 GHC.TypeNats.+ 1)
        bound by a pattern with constructor:
                   :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                         a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
                 in an equation for ‘unSpin’
        at test/ErrorsWithPlugin.hs:19:12-18
      Expected: Vec n a
        Actual: Vec n1 a
      ‘n1’ is a rigid type variable bound by
        a pattern with constructor:
          :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
        in an equation for ‘unSpin’
        at test/ErrorsWithPlugin.hs:19:12-18
      ‘n’ is a rigid type variable bound by
        the type signature for:
          unSpin :: forall (n :: GHC.TypeNats.Nat) a. Vec n a -> ()
        at test/ErrorsWithPlugin.hs:17:1-23
    • In the second argument of ‘spin’, namely ‘ws’
      In the expression: spin zs ws
      In an equation for ‘unSpin’: unSpin zs@(_ :- ws) = spin zs ws
    • Relevant bindings include
        ws :: Vec n1 a (bound at test/ErrorsWithPlugin.hs:19:17)
        zs :: Vec n a (bound at test/ErrorsWithPlugin.hs:19:8)
        unSpin :: Vec n a -> () (bound at test/ErrorsWithPlugin.hs:18:1)
   |
19 | unSpin zs@(_ :- ws) = spin zs ws
   |                               ^^
[4 of 6] Compiling ErrorsNoPlugin

test/ErrorsNoPlugin.hs:10:1: warning: [GHC-62161] [-Wincomplete-patterns]
    Pattern match(es) are non-exhaustive
    In an equation for ‘zipMVec’:
        Patterns of type ‘Vec n a’, ‘Vec n b’ not matched:
            Nil (_ :- _)
            (_ :- _) Nil
   |
10 | zipMVec Nil Nil = Nil
   | ^^^^^^^^^^^^^^^^^^^^^...

test/ErrorsNoPlugin.hs:11:18: warning: [-Wunused-matches]
    Defined but not used: ‘as’
   |
11 | zipMVec zs@(a :- as) (b :- bs) = (a, b) :- zipMVec zs bs
   |                  ^^

test/ErrorsNoPlugin.hs:11:34: warning: [GHC-25897] [-Wdeferred-type-errors]
    • Could not deduce ‘n2 ~ n’
        arising from reasoning about an injective type family using constraints:
          ‘(n GHC.TypeNats.+ 1) ~ n’
            arising from a type equality
              Vec (n GHC.TypeNats.+ 1) (a, b)
              ~
              Vec n (a, b) at test/ErrorsNoPlugin.hs:11:34-56
          ‘(n2 GHC.TypeNats.+ 1) ~ n’
            arising from a pattern with constructor:
                           :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                                 a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
                         in an equation for ‘zipMVec’ at test/ErrorsNoPlugin.hs:11:23-29
      from the context: n ~ (n1 GHC.TypeNats.+ 1)
        bound by a pattern with constructor:
                   :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                         a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
                 in an equation for ‘zipMVec’
        at test/ErrorsNoPlugin.hs:11:13-19
      or from: n ~ (n2 GHC.TypeNats.+ 1)
        bound by a pattern with constructor:
                   :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                         a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
                 in an equation for ‘zipMVec’
        at test/ErrorsNoPlugin.hs:11:23-29
      ‘n2’ is a rigid type variable bound by
        a pattern with constructor:
          :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
        in an equation for ‘zipMVec’
        at test/ErrorsNoPlugin.hs:11:23-29
      ‘n’ is a rigid type variable bound by
        the type signature for:
          zipMVec :: forall (n :: GHC.TypeNats.Nat) a b.
                     Vec n a -> Vec n b -> Vec n (a, b)
        at test/ErrorsNoPlugin.hs:9:1-45
    • In the expression: (a, b) :- zipMVec zs bs
      In an equation for ‘zipMVec’:
          zipMVec zs@(a :- as) (b :- bs) = (a, b) :- zipMVec zs bs
    • Relevant bindings include
        bs :: Vec n2 b (bound at test/ErrorsNoPlugin.hs:11:28)
        zs :: Vec n a (bound at test/ErrorsNoPlugin.hs:11:9)
        zipMVec :: Vec n a -> Vec n b -> Vec n (a, b)
          (bound at test/ErrorsNoPlugin.hs:10:1)
   |
11 | zipMVec zs@(a :- as) (b :- bs) = (a, b) :- zipMVec zs bs
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^

test/ErrorsNoPlugin.hs:11:34: warning: [GHC-25897] [-Wdeferred-type-errors]
    • Could not deduce ‘(n GHC.TypeNats.+ 1) ~ n’
      from the context: n ~ (n1 GHC.TypeNats.+ 1)
        bound by a pattern with constructor:
                   :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                         a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
                 in an equation for ‘zipMVec’
        at test/ErrorsNoPlugin.hs:11:13-19
      or from: n ~ (n2 GHC.TypeNats.+ 1)
        bound by a pattern with constructor:
                   :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                         a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
                 in an equation for ‘zipMVec’
        at test/ErrorsNoPlugin.hs:11:23-29
      Expected: Vec n (a, b)
        Actual: Vec (n GHC.TypeNats.+ 1) (a, b)
      ‘n’ is a rigid type variable bound by
        the type signature for:
          zipMVec :: forall (n :: GHC.TypeNats.Nat) a b.
                     Vec n a -> Vec n b -> Vec n (a, b)
        at test/ErrorsNoPlugin.hs:9:1-45
    • In the expression: (a, b) :- zipMVec zs bs
      In an equation for ‘zipMVec’:
          zipMVec zs@(a :- as) (b :- bs) = (a, b) :- zipMVec zs bs
    • Relevant bindings include
        zs :: Vec n a (bound at test/ErrorsNoPlugin.hs:11:9)
        zipMVec :: Vec n a -> Vec n b -> Vec n (a, b)
          (bound at test/ErrorsNoPlugin.hs:10:1)
   |
11 | zipMVec zs@(a :- as) (b :- bs) = (a, b) :- zipMVec zs bs
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^

test/ErrorsNoPlugin.hs:18:31: warning: [GHC-25897] [-Wdeferred-type-errors]
    • Could not deduce ‘n1 ~ n’
      from the context: n ~ (n1 GHC.TypeNats.+ 1)
        bound by a pattern with constructor:
                   :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                         a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
                 in an equation for ‘unSpin’
        at test/ErrorsNoPlugin.hs:18:12-18
      Expected: Vec n a
        Actual: Vec n1 a
      ‘n1’ is a rigid type variable bound by
        a pattern with constructor:
          :- :: forall a (n1 :: GHC.Num.Natural.Natural).
                a -> Vec n1 a -> Vec (n1 GHC.TypeNats.+ 1) a,
        in an equation for ‘unSpin’
        at test/ErrorsNoPlugin.hs:18:12-18
      ‘n’ is a rigid type variable bound by
        the type signature for:
          unSpin :: forall (n :: GHC.TypeNats.Nat) a. Vec n a -> ()
        at test/ErrorsNoPlugin.hs:16:1-23
    • In the second argument of ‘spin’, namely ‘ws’
      In the expression: spin zs ws
      In an equation for ‘unSpin’: unSpin zs@(_ :- ws) = spin zs ws
    • Relevant bindings include
        ws :: Vec n1 a (bound at test/ErrorsNoPlugin.hs:18:17)
        zs :: Vec n a (bound at test/ErrorsNoPlugin.hs:18:8)
        unSpin :: Vec n a -> () (bound at test/ErrorsNoPlugin.hs:17:1)
   |
18 | unSpin zs@(_ :- ws) = spin zs ws
   |                               ^^
[5 of 6] Compiling GHC.TypeLits.PresburgerSpec
[6 of 6] Compiling Main
[7 of 7] Linking /tmp/workdir-ghc-typelits-presburger/ghc-typelits-presburger-0.7.4.0/dist-newstyle/build/x86_64-linux/ghc-9.6.6/ghc-typelits-presburger-0.7.4.0/t/test-typeltis-presburger/build/test-typeltis-presburger/test-typeltis-presburger
