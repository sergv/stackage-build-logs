Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - monoid-transformer-0.0.4 (lib:monoid-transformer) (first run)
Warning: monoid-transformer.cabal:33:24: version operators used. To use
version operators the package needs to specify at least 'cabal-version: >=
1.8'.
Warning: monoid-transformer.cabal:34:17: version operators used. To use
version operators the package needs to specify at least 'cabal-version: >=
1.8'.
Configuring monoid-transformer-0.0.4...
Preprocessing library for monoid-transformer-0.0.4...
Building library for monoid-transformer-0.0.4...
[1 of 6] Compiling Data.Monoid.MonadicEndo

src/Data/Monoid/MonadicEndo.hs:3:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
  |
3 | import Data.Monoid (Monoid, mempty, mappend, )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Monoid/MonadicEndo.hs:4:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
  |
4 | import Data.Semigroup (Semigroup, (<>), )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[2 of 6] Compiling Data.Monoid.Transformer

src/Data/Monoid/Transformer.hs:3:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
  |
3 | import Data.Monoid (Monoid, )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[3 of 6] Compiling Data.Monoid.State

src/Data/Monoid/State.hs:52:4: warning: [-Wnoncanonical-monoid-instances]
    Noncanonical ‘mappend’ definition detected
    in the instance declaration for ‘Monoid (T s a)’.
    ‘mappend’ will eventually be removed in favour of ‘(<>)’
    Either remove definition for ‘mappend’ (recommended) or define as ‘mappend = (<>)’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/semigroup-monoid
   |
52 |    mappend (Cons x) (Cons y) =
   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^...
[4 of 6] Compiling Data.Monoid.Reader

src/Data/Monoid/Reader.hs:25:4: warning: [-Wnoncanonical-monoid-instances]
    Noncanonical ‘mappend’ definition detected
    in the instance declaration for ‘Monoid (T r a)’.
    ‘mappend’ will eventually be removed in favour of ‘(<>)’
    Either remove definition for ‘mappend’ (recommended) or define as ‘mappend = (<>)’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/semigroup-monoid
   |
25 |    mappend (Cons x) (Cons y) =
   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^...
[5 of 6] Compiling Data.Monoid.Monad

src/Data/Monoid/Monad.hs:6:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
  |
6 | import Data.Monoid (Monoid, mempty, mappend, )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Monoid/Monad.hs:7:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
  |
7 | import Data.Semigroup (Semigroup, (<>), )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Monoid/Monad.hs:22:4: warning: [-Wnoncanonical-monoid-instances]
    Noncanonical ‘mappend’ definition detected
    in the instance declaration for ‘Monoid (T m a)’.
    ‘mappend’ will eventually be removed in favour of ‘(<>)’
    Either remove definition for ‘mappend’ (recommended) or define as ‘mappend = (<>)’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/semigroup-monoid
   |
22 |    mappend (Cons x) (Cons y) =
   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^...
[6 of 6] Compiling Data.Monoid.Applicative

src/Data/Monoid/Applicative.hs:5:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
  |
5 | import Control.Applicative (Applicative, pure, liftA2, )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Monoid/Applicative.hs:6:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
  |
6 | import Data.Monoid (Monoid, mempty, mappend, )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Monoid/Applicative.hs:7:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
  |
7 | import Data.Semigroup (Semigroup, (<>), )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Monoid/Applicative.hs:20:4: warning: [-Wnoncanonical-monoid-instances]
    Noncanonical ‘mappend’ definition detected
    in the instance declaration for ‘Monoid (T f a)’.
    ‘mappend’ will eventually be removed in favour of ‘(<>)’
    Either remove definition for ‘mappend’ (recommended) or define as ‘mappend = (<>)’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/semigroup-monoid
   |
20 |    mappend (Cons x) (Cons y) =
   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^...
