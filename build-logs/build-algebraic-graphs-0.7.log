Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - algebraic-graphs-0.7 (lib) (first run)
 - algebraic-graphs-0.7 (test:main) (first run)
Configuring library for algebraic-graphs-0.7...
Preprocessing library for algebraic-graphs-0.7...
Building library for algebraic-graphs-0.7...
[ 1 of 29] Compiling Algebra.Graph.AdjacencyMap
[ 2 of 29] Compiling Algebra.Graph.AdjacencyIntMap
[ 3 of 29] Compiling Algebra.Graph.AdjacencyIntMap.Algorithm
[ 4 of 29] Compiling Algebra.Graph.Internal
[ 5 of 29] Compiling Algebra.Graph
[ 6 of 29] Compiling Algebra.Graph.HigherKinded.Class
[ 7 of 29] Compiling Algebra.Graph.Bipartite.AdjacencyMap
[ 8 of 29] Compiling Algebra.Graph.Bipartite.AdjacencyMap.Algorithm
[ 9 of 29] Compiling Algebra.Graph.Label
[10 of 29] Compiling Algebra.Graph.NonEmpty.AdjacencyMap
[11 of 29] Compiling Algebra.Graph.AdjacencyMap.Algorithm
[12 of 29] Compiling Algebra.Graph.Acyclic.AdjacencyMap
[13 of 29] Compiling Algebra.Graph.ToGraph

src/Algebra/Graph/ToGraph.hs:171:32: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
171 |     vertexIntSet :: ToVertex t ~ Int => t -> IntSet
    |                                ^

src/Algebra/Graph/ToGraph.hs:197:29: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
197 |     preIntSet :: ToVertex t ~ Int => Int -> t -> IntSet
    |                             ^

src/Algebra/Graph/ToGraph.hs:215:30: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
215 |     postIntSet :: ToVertex t ~ Int => Int -> t -> IntSet
    |                              ^

src/Algebra/Graph/ToGraph.hs:303:37: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
303 |     toAdjacencyIntMap :: ToVertex t ~ Int => t -> AIM.AdjacencyIntMap
    |                                     ^

src/Algebra/Graph/ToGraph.hs:312:46: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
312 |     toAdjacencyIntMapTranspose :: ToVertex t ~ Int => t -> AIM.AdjacencyIntMap
    |                                              ^

src/Algebra/Graph/ToGraph.hs:452:43: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
452 | adjacencyIntMap :: (ToGraph t, ToVertex t ~ Int) => t -> IntMap IntSet
    |                                           ^

src/Algebra/Graph/ToGraph.hs:471:52: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
471 | adjacencyIntMapTranspose :: (ToGraph t, ToVertex t ~ Int) => t -> IntMap IntSet
    |                                                    ^
[14 of 29] Compiling Algebra.Graph.Relation
[15 of 29] Compiling Algebra.Graph.Relation.Symmetric
[16 of 29] Compiling Algebra.Graph.NonEmpty
[17 of 29] Compiling Algebra.Graph.Labelled.AdjacencyMap
[18 of 29] Compiling Algebra.Graph.Labelled
[19 of 29] Compiling Algebra.Graph.Labelled.Example.Network
[20 of 29] Compiling Algebra.Graph.Labelled.Example.Automaton
[21 of 29] Compiling Algebra.Graph.Export

src/Algebra/Graph/Export.hs:185:41: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
185 | export :: (Ord a, ToGraph g, ToVertex g ~ a) => (a -> Doc s) -> (a -> a -> Doc s) -> g -> Doc s
    |                                         ^
[22 of 29] Compiling Algebra.Graph.Export.Dot

src/Algebra/Graph/Export/Dot.hs:121:63: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
121 | export :: (IsString s, Monoid s, Ord a, ToGraph g, ToVertex g ~ a) => Style a s -> g -> s
    |                                                               ^

src/Algebra/Graph/Export/Dot.hs:165:78: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
165 | exportAsIs :: (IsString s, Monoid s, Ord (ToVertex g), ToGraph g, ToVertex g ~ s) => g -> s
    |                                                                              ^
[23 of 29] Compiling Algebra.Graph.Undirected
[24 of 29] Compiling Algebra.Graph.Class
[25 of 29] Compiling Algebra.Graph.Relation.Transitive
[26 of 29] Compiling Algebra.Graph.Relation.Reflexive
[27 of 29] Compiling Algebra.Graph.Relation.Preorder
[28 of 29] Compiling Algebra.Graph.Example.Todo
[29 of 29] Compiling Data.Graph.Typed
Configuring test suite 'main' for algebraic-graphs-0.7...
Preprocessing test suite 'main' for algebraic-graphs-0.7...
Building test suite 'main' for algebraic-graphs-0.7...
[ 1 of 23] Compiling Algebra.Graph.Test.Arbitrary
[ 2 of 23] Compiling Algebra.Graph.Test.API
[ 3 of 23] Compiling Algebra.Graph.Test
[ 4 of 23] Compiling Algebra.Graph.Test.Acyclic.AdjacencyMap
[ 5 of 23] Compiling Algebra.Graph.Test.Bipartite.AdjacencyMap
[ 6 of 23] Compiling Algebra.Graph.Test.Example.Todo
[ 7 of 23] Compiling Algebra.Graph.Test.Export
[ 8 of 23] Compiling Algebra.Graph.Test.Generic
[ 9 of 23] Compiling Algebra.Graph.Test.AdjacencyMap
[10 of 23] Compiling Algebra.Graph.Test.AdjacencyIntMap
[11 of 23] Compiling Algebra.Graph.Test.Graph
[12 of 23] Compiling Algebra.Graph.Test.Internal
[13 of 23] Compiling Algebra.Graph.Test.Label
[14 of 23] Compiling Algebra.Graph.Test.Labelled.AdjacencyMap
[15 of 23] Compiling Algebra.Graph.Test.Labelled.Graph
[16 of 23] Compiling Algebra.Graph.Test.NonEmpty.AdjacencyMap
[17 of 23] Compiling Algebra.Graph.Test.NonEmpty.Graph
[18 of 23] Compiling Algebra.Graph.Test.Relation
[19 of 23] Compiling Algebra.Graph.Test.Relation.Symmetric
[20 of 23] Compiling Algebra.Graph.Test.RewriteRules
test/Algebra/Graph/Test/RewriteRules.hs:43:1: emptyI === emptyIR passed.
test/Algebra/Graph/Test/RewriteRules.hs:49:1: vertexI === vertexIR passed.
test/Algebra/Graph/Test/RewriteRules.hs:56:1: overlayI === overlayIR passed.
test/Algebra/Graph/Test/RewriteRules.hs:63:1: connectI === connectIR passed.
test/Algebra/Graph/Test/RewriteRules.hs:69:1: overlaysC `hasNoType` GHC.Types.List passed.
test/Algebra/Graph/Test/RewriteRules.hs:76:1: overlaysP === overlaysPR passed.
test/Algebra/Graph/Test/RewriteRules.hs:82:1: verticesCP `hasNoType` GHC.Types.List passed.
test/Algebra/Graph/Test/RewriteRules.hs:83:1: verticesCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:89:1: connectsC `hasNoType` GHC.Types.List passed.
test/Algebra/Graph/Test/RewriteRules.hs:96:1: connectsP === connectsPR passed.
test/Algebra/Graph/Test/RewriteRules.hs:102:1: isSubgraphOfC `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:108:1: cliqueCP `hasNoType` GHC.Types.List passed.
test/Algebra/Graph/Test/RewriteRules.hs:109:1: cliqueCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:115:1: edgesCP `hasNoType` GHC.Types.List passed.
test/Algebra/Graph/Test/RewriteRules.hs:116:1: edgesCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:122:1: starCP `hasNoType` GHC.Types.List passed.
test/Algebra/Graph/Test/RewriteRules.hs:123:1: starCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:130:1: fmapCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:137:1: bindC === bindCR passed.
test/Algebra/Graph/Test/RewriteRules.hs:144:1: bindP === bindPR passed.
test/Algebra/Graph/Test/RewriteRules.hs:151:1: apC === apCR passed.
test/Algebra/Graph/Test/RewriteRules.hs:159:1: apP === apPR passed.
test/Algebra/Graph/Test/RewriteRules.hs:165:1: eqC `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:170:1: eqT `hasNoType` Algebra.Graph.AdjacencyMap.AdjacencyMap passed.
test/Algebra/Graph/Test/RewriteRules.hs:176:1: ordC `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:181:1: ordT `hasNoType` Algebra.Graph.AdjacencyMap.AdjacencyMap passed.
test/Algebra/Graph/Test/RewriteRules.hs:187:1: isEmptyC `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:193:1: sizeC `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:199:1: vertexSetC `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:205:1: vertexSetC `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:210:1: vertexCountT `hasNoType` Data.Set.Internal.Set passed.
test/Algebra/Graph/Test/RewriteRules.hs:216:1: edgeCountC `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:221:1: edgeCountT `hasNoType` Data.Set.Internal.Set passed.
test/Algebra/Graph/Test/RewriteRules.hs:227:1: vertexListCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:228:1: vertexListCP `hasNoType` GHC.Types.List passed.
test/Algebra/Graph/Test/RewriteRules.hs:233:1: vertexListT `hasNoType` Data.Set.Internal.Set passed.
test/Algebra/Graph/Test/RewriteRules.hs:239:1: edgeSetC `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:244:1: vertexListT `hasNoType` Algebra.Graph.AdjacencyMap.AdjacencyMap passed.
test/Algebra/Graph/Test/RewriteRules.hs:250:1: edgeListCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:251:1: edgeListCP `hasNoType` GHC.Types.List passed.
test/Algebra/Graph/Test/RewriteRules.hs:256:1: edgeListT `hasNoType` Algebra.Graph.AdjacencyMap.AdjacencyMap passed.
test/Algebra/Graph/Test/RewriteRules.hs:262:1: hasVertexC `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:268:1: hasEdgeC `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:274:1: adjacencyListC `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:280:1: pathP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:286:1: circuitP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:292:1: bicliqueCP `hasNoType` GHC.Types.List passed.
test/Algebra/Graph/Test/RewriteRules.hs:293:1: bicliqueCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:301:1: replaceVertexCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:309:1: mergeVerticesCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:316:1: splitVertexCP `hasNoType` GHC.Types.List passed.
test/Algebra/Graph/Test/RewriteRules.hs:317:1: splitVertexCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:324:1: transposeCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:339:1: simplifyC === simplifyCR passed.
test/Algebra/Graph/Test/RewriteRules.hs:345:1: composeCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:352:1: induceCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:359:1: induceJustCP `hasNoType` Algebra.Graph.Graph passed.
test/Algebra/Graph/Test/RewriteRules.hs:365:1: contextC `hasNoType` Algebra.Graph.Graph passed.
inspection testing successful
      expected successes: 58
[21 of 23] Compiling Algebra.Graph.Test.Undirected
[22 of 23] Compiling Data.Graph.Test.Typed
[23 of 23] Compiling Main
[24 of 24] Linking /tmp/workdir-algebraic-graphs/algebraic-graphs-0.7/dist-newstyle/build/x86_64-linux/ghc-9.6.6/algebraic-graphs-0.7/t/main/build/main/main
