Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - persistent-test-2.13.1.3 (lib) (first run)
Warning: persistent-test.cabal:92:3: Inconsistent indentation. Indentation
jumps at lines 92
Configuring library for persistent-test-2.13.1.3...
Preprocessing library for persistent-test-2.13.1.3...
Building library for persistent-test-2.13.1.3...
[ 1 of 41] Compiling Init

src/Init.hs:159:33: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’ (imported from Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
    |
159 | persistSettings = sqlSettings { mpsGeneric = True }
    |                                 ^^^^^^^^^^

src/Init.hs:235:15: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
235 |     , backend ~ BaseBackend backend
    |               ^
[ 2 of 41] Compiling HtmlTest

src/HtmlTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = True }, mkMigrate "htmlMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/HtmlTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = True }, mkMigrate "htmlMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/HtmlTest.hs:14:36: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
14 | share [mkPersist persistSettings { mpsGeneric = True }, mkMigrate "htmlMigrate"] [persistLowerCase|
   |                                    ^^^^^^^^^^
[ 3 of 41] Compiling GeneratedColumnTestSQL

src/GeneratedColumnTestSQL.hs:9:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
9 | share [mkPersist sqlSettings, mkMigrate "migrate1"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/GeneratedColumnTestSQL.hs:9:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
9 | share [mkPersist sqlSettings, mkMigrate "migrate1"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/GeneratedColumnTestSQL.hs:9:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
9 | share [mkPersist sqlSettings, mkMigrate "migrate1"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/GeneratedColumnTestSQL.hs:9:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
9 | share [mkPersist sqlSettings, mkMigrate "migrate1"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/GeneratedColumnTestSQL.hs:9:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
9 | share [mkPersist sqlSettings, mkMigrate "migrate1"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/GeneratedColumnTestSQL.hs:9:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
9 | share [mkPersist sqlSettings, mkMigrate "migrate1"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/GeneratedColumnTestSQL.hs:9:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
9 | share [mkPersist sqlSettings, mkMigrate "migrate1"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/GeneratedColumnTestSQL.hs:21:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
21 | share [mkPersist sqlSettings, mkMigrate "migrate2"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/GeneratedColumnTestSQL.hs:21:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
21 | share [mkPersist sqlSettings, mkMigrate "migrate2"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/GeneratedColumnTestSQL.hs:21:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
21 | share [mkPersist sqlSettings, mkMigrate "migrate2"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
[ 4 of 41] Compiling ForeignKey

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/ForeignKey.hs:14:36: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   |                                    ^^^^^^^^^^

src/ForeignKey.hs:241:30: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
241 |     , PersistEntityBackend a ~ SqlBackend
    |                              ^
[ 5 of 41] Compiling EquivalentTypeTest

src/EquivalentTypeTest.hs:12:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
12 | share [mkPersist sqlSettings, mkMigrate "migrateAll1"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EquivalentTypeTest.hs:12:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
12 | share [mkPersist sqlSettings, mkMigrate "migrateAll1"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EquivalentTypeTest.hs:18:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
18 | share [mkPersist sqlSettings, mkMigrate "migrateAll2"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EquivalentTypeTest.hs:18:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
18 | share [mkPersist sqlSettings, mkMigrate "migrateAll2"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
[ 6 of 41] Compiling EntityEmbedTest

src/EntityEmbedTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | mkPersist persistSettings { mpsGeneric = True } [persistUpperCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EntityEmbedTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | mkPersist persistSettings { mpsGeneric = True } [persistUpperCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EntityEmbedTest.hs:8:29: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
  |
8 | mkPersist persistSettings { mpsGeneric = True } [persistUpperCase|
  |                             ^^^^^^^^^^
[ 7 of 41] Compiling EmptyEntityTest

src/EmptyEntityTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmptyEntityTest.hs:11:32: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
11 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   |                                ^^^^^^^^^^
[ 8 of 41] Compiling EmbedTest

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedTest.hs:31:32: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
31 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "embedMigrate"] [persistUpperCase|
   |                                ^^^^^^^^^^

src/EmbedTest.hs:138:63: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
138 | cleanDB :: (PersistQuery backend, PersistEntityBackend HasMap ~ backend, MonadIO m) => ReaderT backend m ()
    |                                                               ^
[ 9 of 41] Compiling EmbedOrderTest

src/EmbedOrderTest.hs:13:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
13 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "embedOrderMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedOrderTest.hs:13:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
13 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "embedOrderMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedOrderTest.hs:13:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
13 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "embedOrderMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedOrderTest.hs:13:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
13 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "embedOrderMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedOrderTest.hs:13:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
13 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "embedOrderMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedOrderTest.hs:13:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
13 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "embedOrderMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/EmbedOrderTest.hs:13:32: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
13 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "embedOrderMigrate"] [persistUpperCase|
   |                                ^^^^^^^^^^
[10 of 41] Compiling DataTypeTest

src/DataTypeTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist persistSettings, mkMigrate "dataTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/DataTypeTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist persistSettings, mkMigrate "dataTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/DataTypeTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist persistSettings, mkMigrate "dataTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/DataTypeTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist persistSettings, mkMigrate "dataTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/DataTypeTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist persistSettings, mkMigrate "dataTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/DataTypeTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist persistSettings, mkMigrate "dataTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/DataTypeTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist persistSettings, mkMigrate "dataTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/DataTypeTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist persistSettings, mkMigrate "dataTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/DataTypeTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist persistSettings, mkMigrate "dataTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/DataTypeTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist persistSettings, mkMigrate "dataTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/DataTypeTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist persistSettings, mkMigrate "dataTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/DataTypeTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist persistSettings, mkMigrate "dataTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/DataTypeTest.hs:31:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | share [mkPersist persistSettings, mkMigrate "dataTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/DataTypeTest.hs:84:10: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
84 |     ( db ~ ReaderT backend m
   |          ^

src/DataTypeTest.hs:87:35: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
87 |     , PersistEntityBackend entity ~ BaseBackend backend
   |                                   ^
[11 of 41] Compiling CustomPrimaryKeyReferenceTest

src/CustomPrimaryKeyReferenceTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CustomPrimaryKeyReferenceTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CustomPrimaryKeyReferenceTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CustomPrimaryKeyReferenceTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CustomPrimaryKeyReferenceTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CustomPrimaryKeyReferenceTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CustomPrimaryKeyReferenceTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CustomPrimaryKeyReferenceTest.hs:10:36: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   |                                    ^^^^^^^^^^

src/CustomPrimaryKeyReferenceTest.hs:25:73: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | cleanDB :: (MonadIO m, PersistQuery backend, PersistEntityBackend Tweet ~ backend) => ReaderT backend m ()
   |                                                                         ^
[12 of 41] Compiling CustomPersistField
[13 of 41] Compiling CustomPersistFieldTest

src/CustomPersistFieldTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "customFieldMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CustomPersistFieldTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "customFieldMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CustomPersistFieldTest.hs:8:32: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
  |
8 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "customFieldMigrate"] [persistLowerCase|
  |                                ^^^^^^^^^^
[14 of 41] Compiling CompositeTest

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/CompositeTest.hs:14:36: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
14 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "compositeMigrate"] [persistLowerCase|
   |                                    ^^^^^^^^^^

src/CompositeTest.hs:52:66: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
52 | cleanDB :: (PersistQuery backend, PersistEntityBackend TestChild ~ backend, MonadIO m) => ReaderT backend m ()
   |                                                                  ^
[15 of 41] Compiling LargeNumberTest

src/LargeNumberTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "numberMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/LargeNumberTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "numberMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/LargeNumberTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "numberMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/LargeNumberTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "numberMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/LargeNumberTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "numberMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/LargeNumberTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "numberMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/LargeNumberTest.hs:8:32: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
  |
8 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "numberMigrate"] [persistLowerCase|
  |                                ^^^^^^^^^^
[16 of 41] Compiling LongIdentifierTest

src/LongIdentifierTest.hs:21:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
21 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/LongIdentifierTest.hs:21:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
21 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/LongIdentifierTest.hs:21:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
21 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/LongIdentifierTest.hs:21:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
21 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
[17 of 41] Compiling MaxLenTest

src/MaxLenTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "maxlenMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MaxLenTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "maxlenMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MaxLenTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "maxlenMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MaxLenTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "maxlenMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MaxLenTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "maxlenMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MaxLenTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "maxlenMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MaxLenTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "maxlenMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MaxLenTest.hs:10:32: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
10 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "maxlenMigrate"] [persistLowerCase|
   |                                ^^^^^^^^^^
[18 of 41] Compiling MaybeFieldDefsTest

src/MaybeFieldDefsTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "maybeFieldDefMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MaybeFieldDefsTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "maybeFieldDefMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MaybeFieldDefsTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "maybeFieldDefMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MaybeFieldDefsTest.hs:11:32: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
11 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "maybeFieldDefMigrate"] [persistLowerCase|
   |                                ^^^^^^^^^^
[19 of 41] Compiling MigrationColumnLengthTest

src/MigrationColumnLengthTest.hs:9:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
9 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationColumnLengthTest.hs:9:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
9 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationColumnLengthTest.hs:9:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
9 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
[20 of 41] Compiling MigrationIdempotencyTest

src/MigrationIdempotencyTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationIdempotencyTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationIdempotencyTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationIdempotencyTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationIdempotencyTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationIdempotencyTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationIdempotencyTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationIdempotencyTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationIdempotencyTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationIdempotencyTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
[21 of 41] Compiling MigrationOnlyTest

src/MigrationOnlyTest.hs:13:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
13 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migrateAll1"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationOnlyTest.hs:13:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
13 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migrateAll1"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationOnlyTest.hs:13:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
13 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migrateAll1"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationOnlyTest.hs:13:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
13 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migrateAll1"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationOnlyTest.hs:13:32: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
13 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migrateAll1"] [persistLowerCase|
   |                                ^^^^^^^^^^

src/MigrationOnlyTest.hs:21:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
21 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migrateAll2"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationOnlyTest.hs:21:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
21 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migrateAll2"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationOnlyTest.hs:21:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
21 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migrateAll2"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationOnlyTest.hs:21:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
21 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migrateAll2"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationOnlyTest.hs:21:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
21 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migrateAll2"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationOnlyTest.hs:21:32: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
21 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migrateAll2"] [persistLowerCase|
   |                                ^^^^^^^^^^
[22 of 41] Compiling MigrationTest

src/MigrationTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings, mkMigrate "migrationMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings, mkMigrate "migrationMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings, mkMigrate "migrationMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings, mkMigrate "migrationMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings, mkMigrate "migrationMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings, mkMigrate "migrationMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings, mkMigrate "migrationMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist sqlSettings, mkMigrate "migrationMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationTest.hs:26:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
26 | share [mkPersist sqlSettings, mkMigrate "migrationAddCol"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationTest.hs:26:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
26 | share [mkPersist sqlSettings, mkMigrate "migrationAddCol"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationTest.hs:26:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
26 | share [mkPersist sqlSettings, mkMigrate "migrationAddCol"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationTest.hs:26:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
26 | share [mkPersist sqlSettings, mkMigrate "migrationAddCol"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationTest.hs:26:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
26 | share [mkPersist sqlSettings, mkMigrate "migrationAddCol"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationTest.hs:26:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
26 | share [mkPersist sqlSettings, mkMigrate "migrationAddCol"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/MigrationTest.hs:26:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
26 | share [mkPersist sqlSettings, mkMigrate "migrationAddCol"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
[23 of 41] Compiling PersistTestPetCollarType
[24 of 41] Compiling PersistTestPetType
[25 of 41] Compiling PersistUniqueTest

src/PersistUniqueTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistUniqueTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistUniqueTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistUniqueTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistUniqueTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistUniqueTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistUniqueTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistUniqueTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistUniqueTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistUniqueTest.hs:8:36: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
  |
8 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
  |                                    ^^^^^^^^^^

src/PersistUniqueTest.hs:40:70: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
40 | cleanDB :: (MonadIO m, PersistQuery backend, PersistEntityBackend Fo ~ backend) => ReaderT backend m ()
   |                                                                      ^
[26 of 41] Compiling PersistentTestModelsImports

src/PersistentTestModelsImports.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist sqlSettings] [persistUpperCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModelsImports.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist sqlSettings] [persistUpperCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModelsImports.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist sqlSettings] [persistUpperCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
[27 of 41] Compiling PersistentTestModels
src/PersistentTestModels.hs:(25,101)-(126,2): Splicing expression
    template-haskell:Language.Haskell.TH.Quote.quoteExp
      persistUpperCase
      "\n\
      \\n\
      \-- Dedented comment\n\
      \  -- Header-level comment\n\
      \    -- Indented comment\n\
      \  Person json\n\
      \    name Text\n\
      \    age Int \"some ignored -- \\\" attribute\"\n\
      \    color Text Maybe -- this is a comment sql=foobarbaz\n\
      \    PersonNameKey name -- this is a comment sql=foobarbaz\n\
      \    deriving Show Eq\n\
      \  Person1\n\
      \-- Dedented comment\n\
      \  -- Header-level comment\n\
      \    -- Indented comment\n\
      \    name Text\n\
      \    age Int\n\
      \    deriving Show Eq\n\
      \  PersonMaybeAge\n\
      \    name Text\n\
      \    age Int Maybe\n\
      \  PersonMay json\n\
      \    name Text Maybe\n\
      \    color Text Maybe\n\
      \    deriving Show Eq\n\
      \  Pet\n\
      \    ownerId PersonId\n\
      \    name Text\n\
      \    -- deriving Show Eq\n\
      \-- Dedented comment\n\
      \  -- Header-level comment\n\
      \    -- Indented comment\n\
      \    type PetType\n\
      \  MaybeOwnedPet\n\
      \    ownerId PersonId Maybe\n\
      \    name Text\n\
      \    type PetType\n\
      \-- Dedented comment\n\
      \  -- Header-level comment\n\
      \    -- Indented comment\n\
      \  NeedsPet\n\
      \    petKey PetId\n\
      \  OutdoorPet\n\
      \    ownerId PersonId\n\
      \    collar PetCollar\n\
      \    type PetType\n\
      \\n\
      \  -- From the scaffold\n\
      \  UserPT\n\
      \    ident Text\n\
      \    password Text Maybe\n\
      \    UniqueUserPT ident\n\
      \  EmailPT\n\
      \    email Text\n\
      \    user UserPTId Maybe\n\
      \    verkey Text Maybe\n\
      \    UniqueEmailPT email\n\
      \\n\
      \  Upsert\n\
      \    email Text\n\
      \    attr Text\n\
      \    extra Text\n\
      \    age Int\n\
      \    UniqueUpsert email\n\
      \    deriving Eq Show\n\
      \\n\
      \  UpsertBy\n\
      \    email Text\n\
      \    city Text\n\
      \    attr Text\n\
      \    UniqueUpsertBy email\n\
      \    UniqueUpsertByCity city\n\
      \    deriving Eq Show\n\
      \\n\
      \  Strict\n\
      \    !yes Int\n\
      \    ~no Int\n\
      \    def Int\n\
      \\n\
      \  DudeWeirdColumns\n\
      \    name Text\n\
      \    foo  Int     Maybe MigrationOnly\n\
      \    bar  Double  SafeToRemove\n\
      \    UniqueName name\n\
      \    deriving Eq Show\n\
      \\n\
      \  -- | This is a doc comment for a relationship.\n\
      \  -- | You need to put the pipe character for each line of documentation.\n\
      \  -- Lines without a pipe are omitted.\n\
      \  -- | But you can resume the doc comments afterwards.\n\
      \  Relationship\n\
      \      -- | Fields should be documentable.\n\
      \      name String\n\
      \      parent RelationshipId Maybe\n\
      \\n\
      \  MutA\n\
      \    mutB    MutBId\n\
      \\n\
      \  MutB\n\
      \    mutA    MutAId\n\
      \\n"
  ======>
    [Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "Person"# 6))
          (EntityNameDB (Data.Text.unpackCStringLen# "Person"# 6))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [Data.Text.unpackCStringLen# "json"# 4] []
          [UniqueDef
             (ConstraintNameHS
                (Data.Text.unpackCStringLen# "PersonNameKey"# 13))
             (ConstraintNameDB
                (Data.Text.unpackCStringLen# "PersonNameKey"# 13))
             ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
               FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
                NEL.:| [])
             []]
          []
          [Data.Text.unpackCStringLen# "Show"# 4,
           Data.Text.unpackCStringLen# "Eq"# 2]
          Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
          (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3))
          [FieldAttrOther
             (Data.Text.unpackCStringLen# "some ignored -- \" attribute"# 27)]
          True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "color"# 5))
          (FieldNameDB (Data.Text.unpackCStringLen# "color"# 5))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "Person1"# 7))
          (EntityNameDB (Data.Text.unpackCStringLen# "Person1"# 7))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Person1Id"# 9))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] []
          [Data.Text.unpackCStringLen# "Show"# 4,
           Data.Text.unpackCStringLen# "Eq"# 2]
          Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
          (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14))
          (EntityNameDB (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon
                   Nothing (Data.Text.unpackCStringLen# "PersonMaybeAgeId"# 16))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
          (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "PersonMay"# 9))
          (EntityNameDB (Data.Text.unpackCStringLen# "PersonMay"# 9))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonMayId"# 11))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [Data.Text.unpackCStringLen# "json"# 4] [] [] []
          [Data.Text.unpackCStringLen# "Show"# 4,
           Data.Text.unpackCStringLen# "Eq"# 2]
          Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "color"# 5))
          (FieldNameDB (Data.Text.unpackCStringLen# "color"# 5))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "Pet"# 3))
          (EntityNameDB (Data.Text.unpackCStringLen# "Pet"# 3))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetId"# 5))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
          (FieldNameDB (Data.Text.unpackCStringLen# "ownerId"# 7)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "type"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetType"# 7))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13))
          (EntityNameDB (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon
                   Nothing (Data.Text.unpackCStringLen# "MaybeOwnedPetId"# 15))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
          (FieldNameDB (Data.Text.unpackCStringLen# "ownerId"# 7))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "type"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetType"# 7))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "NeedsPet"# 8))
          (EntityNameDB (Data.Text.unpackCStringLen# "NeedsPet"# 8))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NeedsPetId"# 10))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "petKey"# 6))
          (FieldNameDB (Data.Text.unpackCStringLen# "petKey"# 6)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetId"# 5))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "OutdoorPet"# 10))
          (EntityNameDB (Data.Text.unpackCStringLen# "OutdoorPet"# 10))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon
                   Nothing (Data.Text.unpackCStringLen# "OutdoorPetId"# 12))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
          (FieldNameDB (Data.Text.unpackCStringLen# "ownerId"# 7)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "collar"# 6))
          (FieldNameDB (Data.Text.unpackCStringLen# "collar"# 6)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetCollar"# 9))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "type"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetType"# 7))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "UserPT"# 6))
          (EntityNameDB (Data.Text.unpackCStringLen# "UserPT"# 6))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UserPTId"# 8))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] []
          [UniqueDef
             (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueUserPT"# 12))
             (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueUserPT"# 12))
             ((FieldNameHS (Data.Text.unpackCStringLen# "ident"# 5), 
               FieldNameDB (Data.Text.unpackCStringLen# "ident"# 5))
                NEL.:| [])
             []]
          [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "ident"# 5))
          (FieldNameDB (Data.Text.unpackCStringLen# "ident"# 5)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "password"# 8))
          (FieldNameDB (Data.Text.unpackCStringLen# "password"# 8))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "EmailPT"# 7))
          (EntityNameDB (Data.Text.unpackCStringLen# "EmailPT"# 7))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "EmailPTId"# 9))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] []
          [UniqueDef
             (ConstraintNameHS
                (Data.Text.unpackCStringLen# "UniqueEmailPT"# 13))
             (ConstraintNameDB
                (Data.Text.unpackCStringLen# "UniqueEmailPT"# 13))
             ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
               FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                NEL.:| [])
             []]
          [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
          (FieldNameDB (Data.Text.unpackCStringLen# "email"# 5)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "user"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "user"# 4))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UserPTId"# 8))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "verkey"# 6))
          (FieldNameDB (Data.Text.unpackCStringLen# "verkey"# 6))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "Upsert"# 6))
          (EntityNameDB (Data.Text.unpackCStringLen# "Upsert"# 6))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertId"# 8))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] []
          [UniqueDef
             (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueUpsert"# 12))
             (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueUpsert"# 12))
             ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
               FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                NEL.:| [])
             []]
          []
          [Data.Text.unpackCStringLen# "Eq"# 2,
           Data.Text.unpackCStringLen# "Show"# 4]
          Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
          (FieldNameDB (Data.Text.unpackCStringLen# "email"# 5)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "attr"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "attr"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "extra"# 5))
          (FieldNameDB (Data.Text.unpackCStringLen# "extra"# 5)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
          (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "UpsertBy"# 8))
          (EntityNameDB (Data.Text.unpackCStringLen# "UpsertBy"# 8))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertById"# 10))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] []
          [UniqueDef
             (ConstraintNameHS
                (Data.Text.unpackCStringLen# "UniqueUpsertBy"# 14))
             (ConstraintNameDB
                (Data.Text.unpackCStringLen# "UniqueUpsertBy"# 14))
             ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
               FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                NEL.:| [])
             [],
           UniqueDef
             (ConstraintNameHS
                (Data.Text.unpackCStringLen# "UniqueUpsertByCity"# 18))
             (ConstraintNameDB
                (Data.Text.unpackCStringLen# "UniqueUpsertByCity"# 18))
             ((FieldNameHS (Data.Text.unpackCStringLen# "city"# 4), 
               FieldNameDB (Data.Text.unpackCStringLen# "city"# 4))
                NEL.:| [])
             []]
          []
          [Data.Text.unpackCStringLen# "Eq"# 2,
           Data.Text.unpackCStringLen# "Show"# 4]
          Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
          (FieldNameDB (Data.Text.unpackCStringLen# "email"# 5)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "city"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "city"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "attr"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "attr"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "Strict"# 6))
          (EntityNameDB (Data.Text.unpackCStringLen# "Strict"# 6))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "StrictId"# 8))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "yes"# 3))
          (FieldNameDB (Data.Text.unpackCStringLen# "yes"# 3)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "no"# 2))
          (FieldNameDB (Data.Text.unpackCStringLen# "no"# 2)) [] False
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "def"# 3))
          (FieldNameDB (Data.Text.unpackCStringLen# "def"# 3)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "DudeWeirdColumns"# 16))
          (EntityNameDB (Data.Text.unpackCStringLen# "DudeWeirdColumns"# 16))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon
                   Nothing (Data.Text.unpackCStringLen# "DudeWeirdColumnsId"# 18))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] []
          [UniqueDef
             (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueName"# 10))
             (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueName"# 10))
             ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
               FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
                NEL.:| [])
             []]
          []
          [Data.Text.unpackCStringLen# "Eq"# 2,
           Data.Text.unpackCStringLen# "Show"# 4]
          Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "foo"# 3))
          (FieldNameDB (Data.Text.unpackCStringLen# "foo"# 3))
          [FieldAttrMigrationOnly, FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "bar"# 3))
          (FieldNameDB (Data.Text.unpackCStringLen# "bar"# 3))
          [FieldAttrSafeToRemove] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Double"# 6))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "Relationship"# 12))
          (EntityNameDB (Data.Text.unpackCStringLen# "Relationship"# 12))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon
                   Nothing (Data.Text.unpackCStringLen# "RelationshipId"# 14))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] Data.Map.Internal.Tip False
          (Just
             (Data.Text.unpackCStringLen#
                "This is a doc comment for a relationship.\n\
                \You need to put the pipe character for each line of documentation.\n\
                \But you can resume the doc comments afterwards.\n"#
                157)))
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "String"# 6))
          (FieldCascade Nothing Nothing) Nothing
          (Just
             (Data.Text.unpackCStringLen#
                "Fields should be documentable.\n"# 31)),
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "parent"# 6))
          (FieldNameDB (Data.Text.unpackCStringLen# "parent"# 6))
          [FieldAttrMaybe] True
          (FTTypeCon
             Nothing (Data.Text.unpackCStringLen# "RelationshipId"# 14))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "MutA"# 4))
          (EntityNameDB (Data.Text.unpackCStringLen# "MutA"# 4))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "MutAId"# 6))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "mutB"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "mutB"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "MutBId"# 6))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "MutB"# 4))
          (EntityNameDB (Data.Text.unpackCStringLen# "MutB"# 4))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "MutBId"# 6))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "mutA"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "mutA"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "MutAId"# 6))
          (FieldCascade Nothing Nothing) Nothing Nothing]]
src/PersistentTestModels.hs:(25,1)-(126,2): Splicing declarations
    share
      [mkPersist persistSettings {mpsGeneric = True},
       mkMigrate "testMigrate"]
      ([Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "Person"# 6))
             (EntityNameDB (Data.Text.unpackCStringLen# "Person"# 6))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [Data.Text.unpackCStringLen# "json"# 4] []
             [UniqueDef
                (ConstraintNameHS
                   (Data.Text.unpackCStringLen# "PersonNameKey"# 13))
                (ConstraintNameDB
                   (Data.Text.unpackCStringLen# "PersonNameKey"# 13))
                ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
                  FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
                   NEL.:| [])
                []]
             []
             [Data.Text.unpackCStringLen# "Show"# 4,
              Data.Text.unpackCStringLen# "Eq"# 2]
             Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
             (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3))
             [FieldAttrOther
                (Data.Text.unpackCStringLen# "some ignored -- \" attribute"# 27)]
             True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "color"# 5))
             (FieldNameDB (Data.Text.unpackCStringLen# "color"# 5))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "Person1"# 7))
             (EntityNameDB (Data.Text.unpackCStringLen# "Person1"# 7))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Person1Id"# 9))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] []
             [Data.Text.unpackCStringLen# "Show"# 4,
              Data.Text.unpackCStringLen# "Eq"# 2]
             Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
             (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14))
             (EntityNameDB (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon
                      Nothing (Data.Text.unpackCStringLen# "PersonMaybeAgeId"# 16))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
             (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "PersonMay"# 9))
             (EntityNameDB (Data.Text.unpackCStringLen# "PersonMay"# 9))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonMayId"# 11))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [Data.Text.unpackCStringLen# "json"# 4] [] [] []
             [Data.Text.unpackCStringLen# "Show"# 4,
              Data.Text.unpackCStringLen# "Eq"# 2]
             Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "color"# 5))
             (FieldNameDB (Data.Text.unpackCStringLen# "color"# 5))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "Pet"# 3))
             (EntityNameDB (Data.Text.unpackCStringLen# "Pet"# 3))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetId"# 5))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
             (FieldNameDB (Data.Text.unpackCStringLen# "ownerId"# 7)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "type"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetType"# 7))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13))
             (EntityNameDB (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon
                      Nothing (Data.Text.unpackCStringLen# "MaybeOwnedPetId"# 15))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
             (FieldNameDB (Data.Text.unpackCStringLen# "ownerId"# 7))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "type"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetType"# 7))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "NeedsPet"# 8))
             (EntityNameDB (Data.Text.unpackCStringLen# "NeedsPet"# 8))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NeedsPetId"# 10))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "petKey"# 6))
             (FieldNameDB (Data.Text.unpackCStringLen# "petKey"# 6)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetId"# 5))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "OutdoorPet"# 10))
             (EntityNameDB (Data.Text.unpackCStringLen# "OutdoorPet"# 10))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon
                      Nothing (Data.Text.unpackCStringLen# "OutdoorPetId"# 12))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
             (FieldNameDB (Data.Text.unpackCStringLen# "ownerId"# 7)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "collar"# 6))
             (FieldNameDB (Data.Text.unpackCStringLen# "collar"# 6)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetCollar"# 9))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "type"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetType"# 7))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "UserPT"# 6))
             (EntityNameDB (Data.Text.unpackCStringLen# "UserPT"# 6))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UserPTId"# 8))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] []
             [UniqueDef
                (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueUserPT"# 12))
                (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueUserPT"# 12))
                ((FieldNameHS (Data.Text.unpackCStringLen# "ident"# 5), 
                  FieldNameDB (Data.Text.unpackCStringLen# "ident"# 5))
                   NEL.:| [])
                []]
             [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "ident"# 5))
             (FieldNameDB (Data.Text.unpackCStringLen# "ident"# 5)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "password"# 8))
             (FieldNameDB (Data.Text.unpackCStringLen# "password"# 8))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "EmailPT"# 7))
             (EntityNameDB (Data.Text.unpackCStringLen# "EmailPT"# 7))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "EmailPTId"# 9))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] []
             [UniqueDef
                (ConstraintNameHS
                   (Data.Text.unpackCStringLen# "UniqueEmailPT"# 13))
                (ConstraintNameDB
                   (Data.Text.unpackCStringLen# "UniqueEmailPT"# 13))
                ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
                  FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                   NEL.:| [])
                []]
             [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
             (FieldNameDB (Data.Text.unpackCStringLen# "email"# 5)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "user"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "user"# 4))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UserPTId"# 8))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "verkey"# 6))
             (FieldNameDB (Data.Text.unpackCStringLen# "verkey"# 6))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "Upsert"# 6))
             (EntityNameDB (Data.Text.unpackCStringLen# "Upsert"# 6))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertId"# 8))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] []
             [UniqueDef
                (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueUpsert"# 12))
                (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueUpsert"# 12))
                ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
                  FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                   NEL.:| [])
                []]
             []
             [Data.Text.unpackCStringLen# "Eq"# 2,
              Data.Text.unpackCStringLen# "Show"# 4]
             Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
             (FieldNameDB (Data.Text.unpackCStringLen# "email"# 5)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "attr"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "attr"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "extra"# 5))
             (FieldNameDB (Data.Text.unpackCStringLen# "extra"# 5)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
             (FieldNameDB (Data.Text.unpackCStringLen# "age"# 3)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "UpsertBy"# 8))
             (EntityNameDB (Data.Text.unpackCStringLen# "UpsertBy"# 8))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertById"# 10))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] []
             [UniqueDef
                (ConstraintNameHS
                   (Data.Text.unpackCStringLen# "UniqueUpsertBy"# 14))
                (ConstraintNameDB
                   (Data.Text.unpackCStringLen# "UniqueUpsertBy"# 14))
                ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
                  FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                   NEL.:| [])
                [],
              UniqueDef
                (ConstraintNameHS
                   (Data.Text.unpackCStringLen# "UniqueUpsertByCity"# 18))
                (ConstraintNameDB
                   (Data.Text.unpackCStringLen# "UniqueUpsertByCity"# 18))
                ((FieldNameHS (Data.Text.unpackCStringLen# "city"# 4), 
                  FieldNameDB (Data.Text.unpackCStringLen# "city"# 4))
                   NEL.:| [])
                []]
             []
             [Data.Text.unpackCStringLen# "Eq"# 2,
              Data.Text.unpackCStringLen# "Show"# 4]
             Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
             (FieldNameDB (Data.Text.unpackCStringLen# "email"# 5)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "city"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "city"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "attr"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "attr"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "Strict"# 6))
             (EntityNameDB (Data.Text.unpackCStringLen# "Strict"# 6))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "StrictId"# 8))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "yes"# 3))
             (FieldNameDB (Data.Text.unpackCStringLen# "yes"# 3)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "no"# 2))
             (FieldNameDB (Data.Text.unpackCStringLen# "no"# 2)) [] False
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "def"# 3))
             (FieldNameDB (Data.Text.unpackCStringLen# "def"# 3)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "DudeWeirdColumns"# 16))
             (EntityNameDB (Data.Text.unpackCStringLen# "DudeWeirdColumns"# 16))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon
                      Nothing (Data.Text.unpackCStringLen# "DudeWeirdColumnsId"# 18))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] []
             [UniqueDef
                (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueName"# 10))
                (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueName"# 10))
                ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
                  FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
                   NEL.:| [])
                []]
             []
             [Data.Text.unpackCStringLen# "Eq"# 2,
              Data.Text.unpackCStringLen# "Show"# 4]
             Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Text"# 4))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "foo"# 3))
             (FieldNameDB (Data.Text.unpackCStringLen# "foo"# 3))
             [FieldAttrMigrationOnly, FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "bar"# 3))
             (FieldNameDB (Data.Text.unpackCStringLen# "bar"# 3))
             [FieldAttrSafeToRemove] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Double"# 6))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "Relationship"# 12))
             (EntityNameDB (Data.Text.unpackCStringLen# "Relationship"# 12))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon
                      Nothing (Data.Text.unpackCStringLen# "RelationshipId"# 14))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] Data.Map.Internal.Tip False
             (Just
                (Data.Text.unpackCStringLen#
                   "This is a doc comment for a relationship.\n\
                   \You need to put the pipe character for each line of documentation.\n\
                   \But you can resume the doc comments afterwards.\n"#
                   157)))
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "String"# 6))
             (FieldCascade Nothing Nothing) Nothing
             (Just
                (Data.Text.unpackCStringLen#
                   "Fields should be documentable.\n"# 31)),
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "parent"# 6))
             (FieldNameDB (Data.Text.unpackCStringLen# "parent"# 6))
             [FieldAttrMaybe] True
             (FTTypeCon
                Nothing (Data.Text.unpackCStringLen# "RelationshipId"# 14))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "MutA"# 4))
             (EntityNameDB (Data.Text.unpackCStringLen# "MutA"# 4))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "MutAId"# 6))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "mutB"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "mutB"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "MutBId"# 6))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "MutB"# 4))
             (EntityNameDB (Data.Text.unpackCStringLen# "MutB"# 4))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "MutBId"# 6))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "mutA"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "mutA"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "MutAId"# 6))
             (FieldCascade Nothing Nothing) Nothing Nothing]])
  ======>
    instance PersistStore backend =>
             PersistField (PersonGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["name", "age", "color"]
    instance PersistStore backend =>
             PersistFieldSql (PersonGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (Person1Generic backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["name", "age"]
    instance PersistStore backend =>
             PersistFieldSql (Person1Generic backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (PersonMaybeAgeGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["name", "age"]
    instance PersistStore backend =>
             PersistFieldSql (PersonMaybeAgeGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (PersonMayGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["name", "color"]
    instance PersistStore backend =>
             PersistFieldSql (PersonMayGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (PetGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["ownerId", "name", "type"]
    instance PersistStore backend =>
             PersistFieldSql (PetGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (MaybeOwnedPetGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["ownerId", "name", "type"]
    instance PersistStore backend =>
             PersistFieldSql (MaybeOwnedPetGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (NeedsPetGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["petKey"]
    instance PersistStore backend =>
             PersistFieldSql (NeedsPetGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (OutdoorPetGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["ownerId", "collar", "type"]
    instance PersistStore backend =>
             PersistFieldSql (OutdoorPetGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (UserPTGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["ident", "password"]
    instance PersistStore backend =>
             PersistFieldSql (UserPTGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (EmailPTGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["email", "user", "verkey"]
    instance PersistStore backend =>
             PersistFieldSql (EmailPTGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (UpsertGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["email", "attr", "extra", "age"]
    instance PersistStore backend =>
             PersistFieldSql (UpsertGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (UpsertByGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["email", "city", "attr"]
    instance PersistStore backend =>
             PersistFieldSql (UpsertByGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (StrictGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["yes", "no", "def"]
    instance PersistStore backend =>
             PersistFieldSql (StrictGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (DudeWeirdColumnsGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["name"]
    instance PersistStore backend =>
             PersistFieldSql (DudeWeirdColumnsGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (RelationshipGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["name", "parent"]
    instance PersistStore backend =>
             PersistFieldSql (RelationshipGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (MutAGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["mutB"]
    instance PersistStore backend =>
             PersistFieldSql (MutAGeneric backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (MutBGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["mutA"]
    instance PersistStore backend =>
             PersistFieldSql (MutBGeneric backend) where
      sqlType _ = SqlString
    type Person = PersonGeneric SqlBackend
    data PersonGeneric backend
      = Person {personName :: !Text,
                personAge :: !Int,
                personColor :: !(Maybe Text)}
      deriving stock (Show, Eq)
    type PersonId = Key Person
    instance PersistStore backend =>
             PersistEntity (PersonGeneric backend) where
      type PersistEntityBackend (PersonGeneric backend) = backend
      data Unique (PersonGeneric backend) = PersonNameKey Text
      newtype Key (PersonGeneric backend)
        = PersonKey {unPersonKey :: (BackendKey backend)}
      data EntityField (PersonGeneric backend) typ
        = (typ ~ Key (PersonGeneric backend)) => PersonId |
          (typ ~ Text) => PersonName |
          (typ ~ Int) => PersonAge |
          (typ ~ Maybe Text) => PersonColor
      keyToValues
        = ((: [])
             . (toPersistValue . (\ PersonKey {unPersonKey = x} -> x)))
      keyFromValues
        = (fmap PersonKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mKd
        = ((Entity <$> fromField_a5mKd PersonId)
             <*>
               (((pure Person <*> fromField_a5mKd PersonName)
                   <*> fromField_a5mKd PersonAge)
                  <*> fromField_a5mKd PersonColor))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "Person"# 6))
            (EntityNameDB (Data.Text.unpackCStringLen# "Person"# 6))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [Data.Text.unpackCStringLen# "json"# 4] []
            [UniqueDef
               (ConstraintNameHS
                  (Data.Text.unpackCStringLen# "PersonNameKey"# 13))
               (ConstraintNameDB
                  (Data.Text.unpackCStringLen# "PersonNameKey"# 13))
               ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
                 FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
                  NEL.:| [])
               []]
            []
            [Data.Text.unpackCStringLen# "Show"# 4,
             Data.Text.unpackCStringLen# "Eq"# 2]
            Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "age"#
                                                                                                                                                                     3),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "age"#
                                                                                                                                                                3),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [FieldAttrOther
                                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                                    "some ignored -- \" attribute"#
                                                                                                                                                                    27)],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "color"#
                                                                                                                                                                     5),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "color"#
                                                                                                                                                                5),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "PersonId"#
                                                                                                                                                    8))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Person x_a5mJk x_a5mJl x_a5mJm)
        = [toPersistValue x_a5mJk, toPersistValue x_a5mJl,
           toPersistValue x_a5mJm]
      fromPersistValues [x1_a5mJv, x2_a5mJw, x3_a5mJx]
        = Person
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Person"# 6)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x1_a5mJv
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Person"# 6)
                    (Data.Text.unpackCStringLen# "age"# 3))
                 . fromPersistValue)
                x2_a5mJw
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Person"# 6)
                    (Data.Text.unpackCStringLen# "color"# 5))
                 . fromPersistValue)
                x3_a5mJx
      fromPersistValues x_a5mJo
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "Person: fromPersistValues failed on: "# 37)
                 (Data.Text.Internal.pack $ show x_a5mJo))
      persistUniqueToFieldNames PersonNameKey {}
        = ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
            FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
             NEL.:| [])
      persistUniqueToValues (PersonNameKey x_a5mJA)
        = [toPersistValue x_a5mJA]
      persistUniqueKeys (Person _name_a5mJB _age_a5mJC _color_a5mJD)
        = [PersonNameKey _name_a5mJB]
      persistFieldDef PersonId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef PersonName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Person)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistFieldDef PersonAge
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Person)
            (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
      persistFieldDef PersonColor
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Person)
            (FieldNameHS (Data.Text.unpackCStringLen# "color"# 5))
      persistIdField = PersonId
      fieldLens PersonId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mJW) key_a5mJX
               -> Entity key_a5mJX value_a5mJW)
      fieldLens PersonName
        = lensPTH
            ((\ Person {personName = x} -> x) . entityVal)
            (\ (Entity key_a5mJZ value_a5mK0) x_a5mK1
               -> Entity
                    key_a5mJZ
                    (case value_a5mK0 of
                       Person {personAge = personAge_a5mK3,
                               personColor = personColor_a5mK4}
                         -> Person
                              {personName = x_a5mK1, personAge = personAge,
                               personColor = personColor}))
      fieldLens PersonAge
        = lensPTH
            ((\ Person {personAge = x} -> x) . entityVal)
            (\ (Entity key_a5mJZ value_a5mK0) x_a5mK1
               -> Entity
                    key_a5mJZ
                    (case value_a5mK0 of
                       Person {personName = personName_a5mK5,
                               personColor = personColor_a5mK7}
                         -> Person
                              {personName = personName, personAge = x_a5mK1,
                               personColor = personColor}))
      fieldLens PersonColor
        = lensPTH
            ((\ Person {personColor = x} -> x) . entityVal)
            (\ (Entity key_a5mJZ value_a5mK0) x_a5mK1
               -> Entity
                    key_a5mJZ
                    (case value_a5mK0 of
                       Person {personName = personName_a5mK8, personAge = personAge_a5mK9}
                         -> Person
                              {personName = personName, personAge = personAge,
                               personColor = x_a5mK1}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (PersonGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (PersonGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (PersonGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (PersonGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (PersonGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (PersonGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (PersonGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (PersonGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (PersonGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (PersonGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (PersonGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (PersonGeneric backend) where
      toBackendKey = \ PersonKey {unPersonKey = x} -> x
      fromBackendKey = PersonKey
    type Person1 = Person1Generic SqlBackend
    data Person1Generic backend
      = Person1 {person1Name :: !Text, person1Age :: !Int}
      deriving stock (Show, Eq)
    type Person1Id = Key Person1
    instance PersistStore backend =>
             PersistEntity (Person1Generic backend) where
      type PersistEntityBackend (Person1Generic backend) = backend
      data Unique (Person1Generic backend)
      newtype Key (Person1Generic backend)
        = Person1Key {unPerson1Key :: (BackendKey backend)}
      data EntityField (Person1Generic backend) typ
        = (typ ~ Key (Person1Generic backend)) => Person1Id |
          (typ ~ Text) => Person1Name |
          (typ ~ Int) => Person1Age
      keyToValues
        = ((: [])
             . (toPersistValue . (\ Person1Key {unPerson1Key = x} -> x)))
      keyFromValues
        = (fmap Person1Key
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mLl
        = ((Entity <$> fromField_a5mLl Person1Id)
             <*>
               ((pure Person1 <*> fromField_a5mLl Person1Name)
                  <*> fromField_a5mLl Person1Age))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "Person1"# 7))
            (EntityNameDB (Data.Text.unpackCStringLen# "Person1"# 7))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Person1Id"# 9))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] []
            [Data.Text.unpackCStringLen# "Show"# 4,
             Data.Text.unpackCStringLen# "Eq"# 2]
            Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "age"#
                                                                                                                                                                     3),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "age"#
                                                                                                                                                                3),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Person1Id"#
                                                                                                                                                    9))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Person1 x_a5mKM x_a5mKN)
        = [toPersistValue x_a5mKM, toPersistValue x_a5mKN]
      fromPersistValues [x1_a5mKP, x2_a5mKQ]
        = Person1
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Person1"# 7)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x1_a5mKP
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Person1"# 7)
                    (Data.Text.unpackCStringLen# "age"# 3))
                 . fromPersistValue)
                x2_a5mKQ
      fromPersistValues x_a5mKO
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "Person1: fromPersistValues failed on: "# 38)
                 (Data.Text.Internal.pack $ show x_a5mKO))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Person1 _name_a5mKS _age_a5mKU) = []
      persistFieldDef Person1Id
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Person1Id"# 9))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef Person1Name
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Person1)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistFieldDef Person1Age
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Person1)
            (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
      persistIdField = Person1Id
      fieldLens Person1Id
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mL5) key_a5mL6
               -> Entity key_a5mL6 value_a5mL5)
      fieldLens Person1Name
        = lensPTH
            ((\ Person1 {person1Name = x} -> x) . entityVal)
            (\ (Entity key_a5mL8 value_a5mL9) x_a5mLb
               -> Entity
                    key_a5mL8
                    (case value_a5mL9 of
                       Person1 {person1Age = person1Age_a5mLd}
                         -> Person1 {person1Name = x_a5mLb, person1Age = person1Age}))
      fieldLens Person1Age
        = lensPTH
            ((\ Person1 {person1Age = x} -> x) . entityVal)
            (\ (Entity key_a5mL8 value_a5mL9) x_a5mLb
               -> Entity
                    key_a5mL8
                    (case value_a5mL9 of
                       Person1 {person1Name = person1Name_a5mLe}
                         -> Person1 {person1Name = person1Name, person1Age = x_a5mLb}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (Person1Generic backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (Person1Generic backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (Person1Generic backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (Person1Generic backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (Person1Generic backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (Person1Generic backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (Person1Generic backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (Person1Generic backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (Person1Generic backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (Person1Generic backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (Person1Generic backend))
    instance PersistStore backend =>
             ToBackendKey backend (Person1Generic backend) where
      toBackendKey = \ Person1Key {unPerson1Key = x} -> x
      fromBackendKey = Person1Key
    type PersonMaybeAge = PersonMaybeAgeGeneric SqlBackend
    data PersonMaybeAgeGeneric backend
      = PersonMaybeAge {personMaybeAgeName :: !Text,
                        personMaybeAgeAge :: !(Maybe Int)}
    type PersonMaybeAgeId = Key PersonMaybeAge
    instance PersistStore backend =>
             PersistEntity (PersonMaybeAgeGeneric backend) where
      type PersistEntityBackend (PersonMaybeAgeGeneric backend) = backend
      data Unique (PersonMaybeAgeGeneric backend)
      newtype Key (PersonMaybeAgeGeneric backend)
        = PersonMaybeAgeKey {unPersonMaybeAgeKey :: (BackendKey backend)}
      data EntityField (PersonMaybeAgeGeneric backend) typ
        = (typ ~ Key (PersonMaybeAgeGeneric backend)) => PersonMaybeAgeId |
          (typ ~ Text) => PersonMaybeAgeName |
          (typ ~ Maybe Int) => PersonMaybeAgeAge
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ PersonMaybeAgeKey {unPersonMaybeAgeKey = x} -> x)))
      keyFromValues
        = (fmap PersonMaybeAgeKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mLU
        = ((Entity <$> fromField_a5mLU PersonMaybeAgeId)
             <*>
               ((pure PersonMaybeAge <*> fromField_a5mLU PersonMaybeAgeName)
                  <*> fromField_a5mLU PersonMaybeAgeAge))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14))
            (EntityNameDB (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "PersonMaybeAgeId"# 16))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "age"#
                                                                                                                                                                     3),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "age"#
                                                                                                                                                                3),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "PersonMaybeAgeId"#
                                                                                                                                                    16))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (PersonMaybeAge x_a5mLs x_a5mLt)
        = [toPersistValue x_a5mLs, toPersistValue x_a5mLt]
      fromPersistValues [x1_a5mLv, x2_a5mLw]
        = PersonMaybeAge
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x1_a5mLv
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "PersonMaybeAge"# 14)
                    (Data.Text.unpackCStringLen# "age"# 3))
                 . fromPersistValue)
                x2_a5mLw
      fromPersistValues x_a5mLu
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "PersonMaybeAge: fromPersistValues failed on: "# 45)
                 (Data.Text.Internal.pack $ show x_a5mLu))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (PersonMaybeAge _name_a5mLx _age_a5mLy) = []
      persistFieldDef PersonMaybeAgeId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "PersonMaybeAgeId"# 16))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef PersonMaybeAgeName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy PersonMaybeAge)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistFieldDef PersonMaybeAgeAge
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy PersonMaybeAge)
            (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
      persistIdField = PersonMaybeAgeId
      fieldLens PersonMaybeAgeId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mLL) key_a5mLM
               -> Entity key_a5mLM value_a5mLL)
      fieldLens PersonMaybeAgeName
        = lensPTH
            ((\ PersonMaybeAge {personMaybeAgeName = x} -> x) . entityVal)
            (\ (Entity key_a5mLN value_a5mLO) x_a5mLP
               -> Entity
                    key_a5mLN
                    (case value_a5mLO of
                       PersonMaybeAge {personMaybeAgeAge = personMaybeAgeAge_a5mLR}
                         -> PersonMaybeAge
                              {personMaybeAgeName = x_a5mLP,
                               personMaybeAgeAge = personMaybeAgeAge}))
      fieldLens PersonMaybeAgeAge
        = lensPTH
            ((\ PersonMaybeAge {personMaybeAgeAge = x} -> x) . entityVal)
            (\ (Entity key_a5mLN value_a5mLO) x_a5mLP
               -> Entity
                    key_a5mLN
                    (case value_a5mLO of
                       PersonMaybeAge {personMaybeAgeName = personMaybeAgeName_a5mLS}
                         -> PersonMaybeAge
                              {personMaybeAgeName = personMaybeAgeName,
                               personMaybeAgeAge = x_a5mLP}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (PersonMaybeAgeGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (PersonMaybeAgeGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (PersonMaybeAgeGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (PersonMaybeAgeGeneric backend) where
      toBackendKey = \ PersonMaybeAgeKey {unPersonMaybeAgeKey = x} -> x
      fromBackendKey = PersonMaybeAgeKey
    type PersonMay = PersonMayGeneric SqlBackend
    data PersonMayGeneric backend
      = PersonMay {personMayName :: !(Maybe Text),
                   personMayColor :: !(Maybe Text)}
      deriving stock (Show, Eq)
    type PersonMayId = Key PersonMay
    instance PersistStore backend =>
             PersistEntity (PersonMayGeneric backend) where
      type PersistEntityBackend (PersonMayGeneric backend) = backend
      data Unique (PersonMayGeneric backend)
      newtype Key (PersonMayGeneric backend)
        = PersonMayKey {unPersonMayKey :: (BackendKey backend)}
      data EntityField (PersonMayGeneric backend) typ
        = (typ ~ Key (PersonMayGeneric backend)) => PersonMayId |
          (typ ~ Maybe Text) => PersonMayName |
          (typ ~ Maybe Text) => PersonMayColor
      keyToValues
        = ((: [])
             . (toPersistValue . (\ PersonMayKey {unPersonMayKey = x} -> x)))
      keyFromValues
        = (fmap PersonMayKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mMy
        = ((Entity <$> fromField_a5mMy PersonMayId)
             <*>
               ((pure PersonMay <*> fromField_a5mMy PersonMayName)
                  <*> fromField_a5mMy PersonMayColor))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "PersonMay"# 9))
            (EntityNameDB (Data.Text.unpackCStringLen# "PersonMay"# 9))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonMayId"# 11))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [Data.Text.unpackCStringLen# "json"# 4] [] [] []
            [Data.Text.unpackCStringLen# "Show"# 4,
             Data.Text.unpackCStringLen# "Eq"# 2]
            Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "color"#
                                                                                                                                                                     5),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "color"#
                                                                                                                                                                5),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "PersonMayId"#
                                                                                                                                                    11))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (PersonMay x_a5mMa x_a5mMb)
        = [toPersistValue x_a5mMa, toPersistValue x_a5mMb]
      fromPersistValues [x1_a5mMd, x2_a5mMe]
        = PersonMay
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "PersonMay"# 9)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x1_a5mMd
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "PersonMay"# 9)
                    (Data.Text.unpackCStringLen# "color"# 5))
                 . fromPersistValue)
                x2_a5mMe
      fromPersistValues x_a5mMc
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "PersonMay: fromPersistValues failed on: "# 40)
                 (Data.Text.Internal.pack $ show x_a5mMc))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (PersonMay _name_a5mMg _color_a5mMh) = []
      persistFieldDef PersonMayId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PersonMayId"# 11))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef PersonMayName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy PersonMay)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistFieldDef PersonMayColor
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy PersonMay)
            (FieldNameHS (Data.Text.unpackCStringLen# "color"# 5))
      persistIdField = PersonMayId
      fieldLens PersonMayId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mMn) key_a5mMo
               -> Entity key_a5mMo value_a5mMn)
      fieldLens PersonMayName
        = lensPTH
            ((\ PersonMay {personMayName = x} -> x) . entityVal)
            (\ (Entity key_a5mMp value_a5mMq) x_a5mMr
               -> Entity
                    key_a5mMp
                    (case value_a5mMq of
                       PersonMay {personMayColor = personMayColor_a5mMu}
                         -> PersonMay
                              {personMayName = x_a5mMr, personMayColor = personMayColor}))
      fieldLens PersonMayColor
        = lensPTH
            ((\ PersonMay {personMayColor = x} -> x) . entityVal)
            (\ (Entity key_a5mMp value_a5mMq) x_a5mMr
               -> Entity
                    key_a5mMp
                    (case value_a5mMq of
                       PersonMay {personMayName = personMayName_a5mMv}
                         -> PersonMay
                              {personMayName = personMayName, personMayColor = x_a5mMr}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (PersonMayGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (PersonMayGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (PersonMayGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (PersonMayGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (PersonMayGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (PersonMayGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (PersonMayGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (PersonMayGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (PersonMayGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (PersonMayGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (PersonMayGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (PersonMayGeneric backend) where
      toBackendKey = \ PersonMayKey {unPersonMayKey = x} -> x
      fromBackendKey = PersonMayKey
    type Pet = PetGeneric SqlBackend
    data PetGeneric backend
      = Pet {petOwnerId :: !(Key (PersonGeneric backend)),
             petName :: !Text,
             petType :: !PetType}
    type PetId = Key Pet
    instance PersistStore backend =>
             PersistEntity (PetGeneric backend) where
      type PersistEntityBackend (PetGeneric backend) = backend
      data Unique (PetGeneric backend)
      newtype Key (PetGeneric backend)
        = PetKey {unPetKey :: (BackendKey backend)}
      data EntityField (PetGeneric backend) typ
        = (typ ~ Key (PetGeneric backend)) => PetId |
          (typ ~ Key (PersonGeneric backend)) => PetOwnerId |
          (typ ~ Text) => PetName |
          (typ ~ PetType) => PetType
      keyToValues
        = ((: []) . (toPersistValue . (\ PetKey {unPetKey = x} -> x)))
      keyFromValues
        = (fmap PetKey . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mNc
        = ((Entity <$> fromField_a5mNc PetId)
             <*>
               (((pure Pet <*> fromField_a5mNc PetOwnerId)
                   <*> fromField_a5mNc PetName)
                  <*> fromField_a5mNc PetType))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "Pet"# 3))
            (EntityNameDB (Data.Text.unpackCStringLen# "Pet"# 3))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetId"# 5))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "ownerId"#
                                                                                                                                                                     7),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "ownerId"#
                                                                                                                                                                7),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PersonId"#
                                                                                                                                                                  8),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PersonId),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "Person"#
                                                                                                                                                                          6)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "type"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "type"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PetType"#
                                                                                                                                                                  7),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PetType),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "PetId"#
                                                                                                                                                    5))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Pet x_a5mMH x_a5mMI x_a5mMJ)
        = [toPersistValue x_a5mMH, toPersistValue x_a5mMI,
           toPersistValue x_a5mMJ]
      fromPersistValues [x1_a5mML, x2_a5mMM, x3_a5mMN]
        = Pet
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Pet"# 3)
                    (Data.Text.unpackCStringLen# "ownerId"# 7))
                 . fromPersistValue)
                x1_a5mML
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Pet"# 3)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x2_a5mMM
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Pet"# 3)
                    (Data.Text.unpackCStringLen# "type"# 4))
                 . fromPersistValue)
                x3_a5mMN
      fromPersistValues x_a5mMK
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "Pet: fromPersistValues failed on: "# 34)
                 (Data.Text.Internal.pack $ show x_a5mMK))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Pet _ownerId_a5mMP _name_a5mMQ _type_a5mMR) = []
      persistFieldDef PetId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "PetId"# 5))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef PetOwnerId
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Pet)
            (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
      persistFieldDef PetName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Pet)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistFieldDef PetType
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Pet)
            (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
      persistIdField = PetId
      fieldLens PetId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mMX) key_a5mMY
               -> Entity key_a5mMY value_a5mMX)
      fieldLens PetOwnerId
        = lensPTH
            ((\ Pet {petOwnerId = x} -> x) . entityVal)
            (\ (Entity key_a5mMZ value_a5mN0) x_a5mN1
               -> Entity
                    key_a5mMZ
                    (case value_a5mN0 of
                       Pet {petName = petName_a5mN3, petType = petType_a5mN4}
                         -> Pet
                              {petOwnerId = x_a5mN1, petName = petName, petType = petType}))
      fieldLens PetName
        = lensPTH
            ((\ Pet {petName = x} -> x) . entityVal)
            (\ (Entity key_a5mMZ value_a5mN0) x_a5mN1
               -> Entity
                    key_a5mMZ
                    (case value_a5mN0 of
                       Pet {petOwnerId = petOwnerId_a5mN6, petType = petType_a5mN8}
                         -> Pet
                              {petOwnerId = petOwnerId, petName = x_a5mN1, petType = petType}))
      fieldLens PetType
        = lensPTH
            ((\ Pet {petType = x} -> x) . entityVal)
            (\ (Entity key_a5mMZ value_a5mN0) x_a5mN1
               -> Entity
                    key_a5mMZ
                    (case value_a5mN0 of
                       Pet {petOwnerId = petOwnerId_a5mN9, petName = petName_a5mNa}
                         -> Pet
                              {petOwnerId = petOwnerId, petName = petName, petType = x_a5mN1}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (PetGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (PetGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (PetGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (PetGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (PetGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (PetGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (PetGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (PetGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (PetGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (PetGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (PetGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (PetGeneric backend) where
      toBackendKey = \ PetKey {unPetKey = x} -> x
      fromBackendKey = PetKey
    type MaybeOwnedPet = MaybeOwnedPetGeneric SqlBackend
    data MaybeOwnedPetGeneric backend
      = MaybeOwnedPet {maybeOwnedPetOwnerId :: !(Maybe (Key (PersonGeneric backend))),
                       maybeOwnedPetName :: !Text,
                       maybeOwnedPetType :: !PetType}
    type MaybeOwnedPetId = Key MaybeOwnedPet
    instance PersistStore backend =>
             PersistEntity (MaybeOwnedPetGeneric backend) where
      type PersistEntityBackend (MaybeOwnedPetGeneric backend) = backend
      data Unique (MaybeOwnedPetGeneric backend)
      newtype Key (MaybeOwnedPetGeneric backend)
        = MaybeOwnedPetKey {unMaybeOwnedPetKey :: (BackendKey backend)}
      data EntityField (MaybeOwnedPetGeneric backend) typ
        = (typ ~ Key (MaybeOwnedPetGeneric backend)) => MaybeOwnedPetId |
          (typ ~ Maybe (Key (PersonGeneric backend))) =>
          MaybeOwnedPetOwnerId |
          (typ ~ Text) => MaybeOwnedPetName |
          (typ ~ PetType) => MaybeOwnedPetType
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ MaybeOwnedPetKey {unMaybeOwnedPetKey = x} -> x)))
      keyFromValues
        = (fmap MaybeOwnedPetKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mNM
        = ((Entity <$> fromField_a5mNM MaybeOwnedPetId)
             <*>
               (((pure MaybeOwnedPet <*> fromField_a5mNM MaybeOwnedPetOwnerId)
                   <*> fromField_a5mNM MaybeOwnedPetName)
                  <*> fromField_a5mNM MaybeOwnedPetType))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13))
            (EntityNameDB (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "MaybeOwnedPetId"# 15))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "ownerId"#
                                                                                                                                                                     7),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "ownerId"#
                                                                                                                                                                7),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PersonId"#
                                                                                                                                                                  8),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PersonId),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "Person"#
                                                                                                                                                                          6)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "type"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "type"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PetType"#
                                                                                                                                                                  7),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PetType),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "MaybeOwnedPetId"#
                                                                                                                                                    15))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (MaybeOwnedPet x_a5mNl x_a5mNm x_a5mNn)
        = [toPersistValue x_a5mNl, toPersistValue x_a5mNm,
           toPersistValue x_a5mNn]
      fromPersistValues [x1_a5mNq, x2_a5mNr, x3_a5mNs]
        = MaybeOwnedPet
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13)
                    (Data.Text.unpackCStringLen# "ownerId"# 7))
                 . fromPersistValue)
                x1_a5mNq
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x2_a5mNr
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "MaybeOwnedPet"# 13)
                    (Data.Text.unpackCStringLen# "type"# 4))
                 . fromPersistValue)
                x3_a5mNs
      fromPersistValues x_a5mNo
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "MaybeOwnedPet: fromPersistValues failed on: "# 44)
                 (Data.Text.Internal.pack $ show x_a5mNo))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (MaybeOwnedPet _ownerId_a5mNu _name_a5mNv _type_a5mNw)
        = []
      persistFieldDef MaybeOwnedPetId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "MaybeOwnedPetId"# 15))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef MaybeOwnedPetOwnerId
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy MaybeOwnedPet)
            (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
      persistFieldDef MaybeOwnedPetName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy MaybeOwnedPet)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistFieldDef MaybeOwnedPetType
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy MaybeOwnedPet)
            (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
      persistIdField = MaybeOwnedPetId
      fieldLens MaybeOwnedPetId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mNy) key_a5mNz
               -> Entity key_a5mNz value_a5mNy)
      fieldLens MaybeOwnedPetOwnerId
        = lensPTH
            ((\ MaybeOwnedPet {maybeOwnedPetOwnerId = x} -> x) . entityVal)
            (\ (Entity key_a5mNA value_a5mNB) x_a5mNC
               -> Entity
                    key_a5mNA
                    (case value_a5mNB of
                       MaybeOwnedPet {maybeOwnedPetName = maybeOwnedPetName_a5mNE,
                                      maybeOwnedPetType = maybeOwnedPetType_a5mNF}
                         -> MaybeOwnedPet
                              {maybeOwnedPetOwnerId = x_a5mNC,
                               maybeOwnedPetName = maybeOwnedPetName,
                               maybeOwnedPetType = maybeOwnedPetType}))
      fieldLens MaybeOwnedPetName
        = lensPTH
            ((\ MaybeOwnedPet {maybeOwnedPetName = x} -> x) . entityVal)
            (\ (Entity key_a5mNA value_a5mNB) x_a5mNC
               -> Entity
                    key_a5mNA
                    (case value_a5mNB of
                       MaybeOwnedPet {maybeOwnedPetOwnerId = maybeOwnedPetOwnerId_a5mNG,
                                      maybeOwnedPetType = maybeOwnedPetType_a5mNI}
                         -> MaybeOwnedPet
                              {maybeOwnedPetOwnerId = maybeOwnedPetOwnerId,
                               maybeOwnedPetName = x_a5mNC,
                               maybeOwnedPetType = maybeOwnedPetType}))
      fieldLens MaybeOwnedPetType
        = lensPTH
            ((\ MaybeOwnedPet {maybeOwnedPetType = x} -> x) . entityVal)
            (\ (Entity key_a5mNA value_a5mNB) x_a5mNC
               -> Entity
                    key_a5mNA
                    (case value_a5mNB of
                       MaybeOwnedPet {maybeOwnedPetOwnerId = maybeOwnedPetOwnerId_a5mNJ,
                                      maybeOwnedPetName = maybeOwnedPetName_a5mNK}
                         -> MaybeOwnedPet
                              {maybeOwnedPetOwnerId = maybeOwnedPetOwnerId,
                               maybeOwnedPetName = maybeOwnedPetName,
                               maybeOwnedPetType = x_a5mNC}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (MaybeOwnedPetGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (MaybeOwnedPetGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (MaybeOwnedPetGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (MaybeOwnedPetGeneric backend) where
      toBackendKey = \ MaybeOwnedPetKey {unMaybeOwnedPetKey = x} -> x
      fromBackendKey = MaybeOwnedPetKey
    type NeedsPet = NeedsPetGeneric SqlBackend
    data NeedsPetGeneric backend
      = NeedsPet {needsPetPetKey :: !(Key (PetGeneric backend))}
    type NeedsPetId = Key NeedsPet
    instance PersistStore backend =>
             PersistEntity (NeedsPetGeneric backend) where
      type PersistEntityBackend (NeedsPetGeneric backend) = backend
      data Unique (NeedsPetGeneric backend)
      newtype Key (NeedsPetGeneric backend)
        = NeedsPetKey {unNeedsPetKey :: (BackendKey backend)}
      data EntityField (NeedsPetGeneric backend) typ
        = (typ ~ Key (NeedsPetGeneric backend)) => NeedsPetId |
          (typ ~ Key (PetGeneric backend)) => NeedsPetPetKey
      keyToValues
        = ((: [])
             . (toPersistValue . (\ NeedsPetKey {unNeedsPetKey = x} -> x)))
      keyFromValues
        = (fmap NeedsPetKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mO1
        = ((Entity <$> fromField_a5mO1 NeedsPetId)
             <*> (pure NeedsPet <*> fromField_a5mO1 NeedsPetPetKey))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "NeedsPet"# 8))
            (EntityNameDB (Data.Text.unpackCStringLen# "NeedsPet"# 8))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NeedsPetId"# 10))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "petKey"#
                                                                                                                                                                     6),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "petKey"#
                                                                                                                                                                6),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PetId"#
                                                                                                                                                                  5),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PetId),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "Pet"#
                                                                                                                                                                          3)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "NeedsPetId"#
                                                                                                                                                    10))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (NeedsPet x_a5mNP) = [toPersistValue x_a5mNP]
      fromPersistValues [x1_a5mNR]
        = NeedsPet
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "NeedsPet"# 8)
                    (Data.Text.unpackCStringLen# "petKey"# 6))
                 . fromPersistValue)
                x1_a5mNR
      fromPersistValues x_a5mNQ
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "NeedsPet: fromPersistValues failed on: "# 39)
                 (Data.Text.Internal.pack $ show x_a5mNQ))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (NeedsPet _petKey_a5mNT) = []
      persistFieldDef NeedsPetId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NeedsPetId"# 10))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef NeedsPetPetKey
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy NeedsPet)
            (FieldNameHS (Data.Text.unpackCStringLen# "petKey"# 6))
      persistIdField = NeedsPetId
      fieldLens NeedsPetId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mNV) key_a5mNW
               -> Entity key_a5mNW value_a5mNV)
      fieldLens NeedsPetPetKey
        = lensPTH
            ((\ NeedsPet {needsPetPetKey = x} -> x) . entityVal)
            (\ (Entity key_a5mNX value_a5mNY) x_a5mNZ
               -> Entity
                    key_a5mNX
                    (case value_a5mNY of
                       NeedsPet {} -> NeedsPet {needsPetPetKey = x_a5mNZ}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (NeedsPetGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (NeedsPetGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (NeedsPetGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (NeedsPetGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (NeedsPetGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (NeedsPetGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (NeedsPetGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (NeedsPetGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (NeedsPetGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (NeedsPetGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (NeedsPetGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (NeedsPetGeneric backend) where
      toBackendKey = \ NeedsPetKey {unNeedsPetKey = x} -> x
      fromBackendKey = NeedsPetKey
    type OutdoorPet = OutdoorPetGeneric SqlBackend
    data OutdoorPetGeneric backend
      = OutdoorPet {outdoorPetOwnerId :: !(Key (PersonGeneric backend)),
                    outdoorPetCollar :: !PetCollar,
                    outdoorPetType :: !PetType}
    type OutdoorPetId = Key OutdoorPet
    instance PersistStore backend =>
             PersistEntity (OutdoorPetGeneric backend) where
      type PersistEntityBackend (OutdoorPetGeneric backend) = backend
      data Unique (OutdoorPetGeneric backend)
      newtype Key (OutdoorPetGeneric backend)
        = OutdoorPetKey {unOutdoorPetKey :: (BackendKey backend)}
      data EntityField (OutdoorPetGeneric backend) typ
        = (typ ~ Key (OutdoorPetGeneric backend)) => OutdoorPetId |
          (typ ~ Key (PersonGeneric backend)) => OutdoorPetOwnerId |
          (typ ~ PetCollar) => OutdoorPetCollar |
          (typ ~ PetType) => OutdoorPetType
      keyToValues
        = ((: [])
             . (toPersistValue . (\ OutdoorPetKey {unOutdoorPetKey = x} -> x)))
      keyFromValues
        = (fmap OutdoorPetKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mOU
        = ((Entity <$> fromField_a5mOU OutdoorPetId)
             <*>
               (((pure OutdoorPet <*> fromField_a5mOU OutdoorPetOwnerId)
                   <*> fromField_a5mOU OutdoorPetCollar)
                  <*> fromField_a5mOU OutdoorPetType))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "OutdoorPet"# 10))
            (EntityNameDB (Data.Text.unpackCStringLen# "OutdoorPet"# 10))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "OutdoorPetId"# 12))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "ownerId"#
                                                                                                                                                                     7),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "ownerId"#
                                                                                                                                                                7),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PersonId"#
                                                                                                                                                                  8),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PersonId),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "Person"#
                                                                                                                                                                          6)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "collar"#
                                                                                                                                                                     6),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "collar"#
                                                                                                                                                                6),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PetCollar"#
                                                                                                                                                                  9),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PetCollar),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "type"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "type"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "PetType"#
                                                                                                                                                                  7),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy PetType),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "OutdoorPetId"#
                                                                                                                                                    12))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (OutdoorPet x_a5mO3 x_a5mO4 x_a5mO5)
        = [toPersistValue x_a5mO3, toPersistValue x_a5mO4,
           toPersistValue x_a5mO5]
      fromPersistValues [x1_a5mO7, x2_a5mO8, x3_a5mO9]
        = OutdoorPet
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "OutdoorPet"# 10)
                    (Data.Text.unpackCStringLen# "ownerId"# 7))
                 . fromPersistValue)
                x1_a5mO7
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "OutdoorPet"# 10)
                    (Data.Text.unpackCStringLen# "collar"# 6))
                 . fromPersistValue)
                x2_a5mO8
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "OutdoorPet"# 10)
                    (Data.Text.unpackCStringLen# "type"# 4))
                 . fromPersistValue)
                x3_a5mO9
      fromPersistValues x_a5mO6
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "OutdoorPet: fromPersistValues failed on: "# 41)
                 (Data.Text.Internal.pack $ show x_a5mO6))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (OutdoorPet _ownerId_a5mOa _collar_a5mOb _type_a5mOc)
        = []
      persistFieldDef OutdoorPetId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "OutdoorPetId"# 12))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef OutdoorPetOwnerId
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy OutdoorPet)
            (FieldNameHS (Data.Text.unpackCStringLen# "ownerId"# 7))
      persistFieldDef OutdoorPetCollar
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy OutdoorPet)
            (FieldNameHS (Data.Text.unpackCStringLen# "collar"# 6))
      persistFieldDef OutdoorPetType
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy OutdoorPet)
            (FieldNameHS (Data.Text.unpackCStringLen# "type"# 4))
      persistIdField = OutdoorPetId
      fieldLens OutdoorPetId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mOv) key_a5mOw
               -> Entity key_a5mOw value_a5mOv)
      fieldLens OutdoorPetOwnerId
        = lensPTH
            ((\ OutdoorPet {outdoorPetOwnerId = x} -> x) . entityVal)
            (\ (Entity key_a5mOC value_a5mOD) x_a5mOE
               -> Entity
                    key_a5mOC
                    (case value_a5mOD of
                       OutdoorPet {outdoorPetCollar = outdoorPetCollar_a5mOG,
                                   outdoorPetType = outdoorPetType_a5mOH}
                         -> OutdoorPet
                              {outdoorPetOwnerId = x_a5mOE, outdoorPetCollar = outdoorPetCollar,
                               outdoorPetType = outdoorPetType}))
      fieldLens OutdoorPetCollar
        = lensPTH
            ((\ OutdoorPet {outdoorPetCollar = x} -> x) . entityVal)
            (\ (Entity key_a5mOC value_a5mOD) x_a5mOE
               -> Entity
                    key_a5mOC
                    (case value_a5mOD of
                       OutdoorPet {outdoorPetOwnerId = outdoorPetOwnerId_a5mOI,
                                   outdoorPetType = outdoorPetType_a5mOK}
                         -> OutdoorPet
                              {outdoorPetOwnerId = outdoorPetOwnerId, outdoorPetCollar = x_a5mOE,
                               outdoorPetType = outdoorPetType}))
      fieldLens OutdoorPetType
        = lensPTH
            ((\ OutdoorPet {outdoorPetType = x} -> x) . entityVal)
            (\ (Entity key_a5mOC value_a5mOD) x_a5mOE
               -> Entity
                    key_a5mOC
                    (case value_a5mOD of
                       OutdoorPet {outdoorPetOwnerId = outdoorPetOwnerId_a5mOL,
                                   outdoorPetCollar = outdoorPetCollar_a5mOM}
                         -> OutdoorPet
                              {outdoorPetOwnerId = outdoorPetOwnerId,
                               outdoorPetCollar = outdoorPetCollar, outdoorPetType = x_a5mOE}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (OutdoorPetGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (OutdoorPetGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (OutdoorPetGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (OutdoorPetGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (OutdoorPetGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (OutdoorPetGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (OutdoorPetGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (OutdoorPetGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (OutdoorPetGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (OutdoorPetGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (OutdoorPetGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (OutdoorPetGeneric backend) where
      toBackendKey = \ OutdoorPetKey {unOutdoorPetKey = x} -> x
      fromBackendKey = OutdoorPetKey
    type UserPT = UserPTGeneric SqlBackend
    data UserPTGeneric backend
      = UserPT {userPTIdent :: !Text, userPTPassword :: !(Maybe Text)}
    type UserPTId = Key UserPT
    instance PersistStore backend =>
             PersistEntity (UserPTGeneric backend) where
      type PersistEntityBackend (UserPTGeneric backend) = backend
      data Unique (UserPTGeneric backend) = UniqueUserPT Text
      newtype Key (UserPTGeneric backend)
        = UserPTKey {unUserPTKey :: (BackendKey backend)}
      data EntityField (UserPTGeneric backend) typ
        = (typ ~ Key (UserPTGeneric backend)) => UserPTId |
          (typ ~ Text) => UserPTIdent |
          (typ ~ Maybe Text) => UserPTPassword
      keyToValues
        = ((: [])
             . (toPersistValue . (\ UserPTKey {unUserPTKey = x} -> x)))
      keyFromValues
        = (fmap UserPTKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mQM
        = ((Entity <$> fromField_a5mQM UserPTId)
             <*>
               ((pure UserPT <*> fromField_a5mQM UserPTIdent)
                  <*> fromField_a5mQM UserPTPassword))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "UserPT"# 6))
            (EntityNameDB (Data.Text.unpackCStringLen# "UserPT"# 6))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UserPTId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] []
            [UniqueDef
               (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueUserPT"# 12))
               (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueUserPT"# 12))
               ((FieldNameHS (Data.Text.unpackCStringLen# "ident"# 5), 
                 FieldNameDB (Data.Text.unpackCStringLen# "ident"# 5))
                  NEL.:| [])
               []]
            [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "ident"#
                                                                                                                                                                     5),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "ident"#
                                                                                                                                                                5),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "password"#
                                                                                                                                                                     8),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "password"#
                                                                                                                                                                8),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "UserPTId"#
                                                                                                                                                    8))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (UserPT x_a5mQq x_a5mQr)
        = [toPersistValue x_a5mQq, toPersistValue x_a5mQr]
      fromPersistValues [x1_a5mQt, x2_a5mQu]
        = UserPT
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "UserPT"# 6)
                    (Data.Text.unpackCStringLen# "ident"# 5))
                 . fromPersistValue)
                x1_a5mQt
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "UserPT"# 6)
                    (Data.Text.unpackCStringLen# "password"# 8))
                 . fromPersistValue)
                x2_a5mQu
      fromPersistValues x_a5mQs
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "UserPT: fromPersistValues failed on: "# 37)
                 (Data.Text.Internal.pack $ show x_a5mQs))
      persistUniqueToFieldNames UniqueUserPT {}
        = ((FieldNameHS (Data.Text.unpackCStringLen# "ident"# 5), 
            FieldNameDB (Data.Text.unpackCStringLen# "ident"# 5))
             NEL.:| [])
      persistUniqueToValues (UniqueUserPT x_a5mQw)
        = [toPersistValue x_a5mQw]
      persistUniqueKeys (UserPT _ident_a5mQx _password_a5mQy)
        = [UniqueUserPT _ident_a5mQx]
      persistFieldDef UserPTId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UserPTId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef UserPTIdent
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy UserPT)
            (FieldNameHS (Data.Text.unpackCStringLen# "ident"# 5))
      persistFieldDef UserPTPassword
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy UserPT)
            (FieldNameHS (Data.Text.unpackCStringLen# "password"# 8))
      persistIdField = UserPTId
      fieldLens UserPTId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mQC) key_a5mQD
               -> Entity key_a5mQD value_a5mQC)
      fieldLens UserPTIdent
        = lensPTH
            ((\ UserPT {userPTIdent = x} -> x) . entityVal)
            (\ (Entity key_a5mQF value_a5mQG) x_a5mQH
               -> Entity
                    key_a5mQF
                    (case value_a5mQG of
                       UserPT {userPTPassword = userPTPassword_a5mQJ}
                         -> UserPT
                              {userPTIdent = x_a5mQH, userPTPassword = userPTPassword}))
      fieldLens UserPTPassword
        = lensPTH
            ((\ UserPT {userPTPassword = x} -> x) . entityVal)
            (\ (Entity key_a5mQF value_a5mQG) x_a5mQH
               -> Entity
                    key_a5mQF
                    (case value_a5mQG of
                       UserPT {userPTIdent = userPTIdent_a5mQK}
                         -> UserPT {userPTIdent = userPTIdent, userPTPassword = x_a5mQH}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (UserPTGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (UserPTGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (UserPTGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (UserPTGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (UserPTGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (UserPTGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (UserPTGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (UserPTGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (UserPTGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (UserPTGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (UserPTGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (UserPTGeneric backend) where
      toBackendKey = \ UserPTKey {unUserPTKey = x} -> x
      fromBackendKey = UserPTKey
    type EmailPT = EmailPTGeneric SqlBackend
    data EmailPTGeneric backend
      = EmailPT {emailPTEmail :: !Text,
                 emailPTUser :: !(Maybe (Key (UserPTGeneric backend))),
                 emailPTVerkey :: !(Maybe Text)}
    type EmailPTId = Key EmailPT
    instance PersistStore backend =>
             PersistEntity (EmailPTGeneric backend) where
      type PersistEntityBackend (EmailPTGeneric backend) = backend
      data Unique (EmailPTGeneric backend) = UniqueEmailPT Text
      newtype Key (EmailPTGeneric backend)
        = EmailPTKey {unEmailPTKey :: (BackendKey backend)}
      data EntityField (EmailPTGeneric backend) typ
        = (typ ~ Key (EmailPTGeneric backend)) => EmailPTId |
          (typ ~ Text) => EmailPTEmail |
          (typ ~ Maybe (Key (UserPTGeneric backend))) => EmailPTUser |
          (typ ~ Maybe Text) => EmailPTVerkey
      keyToValues
        = ((: [])
             . (toPersistValue . (\ EmailPTKey {unEmailPTKey = x} -> x)))
      keyFromValues
        = (fmap EmailPTKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mRd
        = ((Entity <$> fromField_a5mRd EmailPTId)
             <*>
               (((pure EmailPT <*> fromField_a5mRd EmailPTEmail)
                   <*> fromField_a5mRd EmailPTUser)
                  <*> fromField_a5mRd EmailPTVerkey))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "EmailPT"# 7))
            (EntityNameDB (Data.Text.unpackCStringLen# "EmailPT"# 7))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "EmailPTId"# 9))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] []
            [UniqueDef
               (ConstraintNameHS
                  (Data.Text.unpackCStringLen# "UniqueEmailPT"# 13))
               (ConstraintNameDB
                  (Data.Text.unpackCStringLen# "UniqueEmailPT"# 13))
               ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
                 FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                  NEL.:| [])
               []]
            [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "email"#
                                                                                                                                                                     5),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "email"#
                                                                                                                                                                5),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "user"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "user"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "UserPTId"#
                                                                                                                                                                  8),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy UserPTId),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "UserPT"#
                                                                                                                                                                          6)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "verkey"#
                                                                                                                                                                     6),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "verkey"#
                                                                                                                                                                6),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "EmailPTId"#
                                                                                                                                                    9))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (EmailPT x_a5mQN x_a5mQO x_a5mQP)
        = [toPersistValue x_a5mQN, toPersistValue x_a5mQO,
           toPersistValue x_a5mQP]
      fromPersistValues [x1_a5mQR, x2_a5mQS, x3_a5mQT]
        = EmailPT
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "EmailPT"# 7)
                    (Data.Text.unpackCStringLen# "email"# 5))
                 . fromPersistValue)
                x1_a5mQR
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "EmailPT"# 7)
                    (Data.Text.unpackCStringLen# "user"# 4))
                 . fromPersistValue)
                x2_a5mQS
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "EmailPT"# 7)
                    (Data.Text.unpackCStringLen# "verkey"# 6))
                 . fromPersistValue)
                x3_a5mQT
      fromPersistValues x_a5mQQ
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "EmailPT: fromPersistValues failed on: "# 38)
                 (Data.Text.Internal.pack $ show x_a5mQQ))
      persistUniqueToFieldNames UniqueEmailPT {}
        = ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
            FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
             NEL.:| [])
      persistUniqueToValues (UniqueEmailPT x_a5mQU)
        = [toPersistValue x_a5mQU]
      persistUniqueKeys (EmailPT _email_a5mQV _user_a5mQW _verkey_a5mQX)
        = [UniqueEmailPT _email_a5mQV]
      persistFieldDef EmailPTId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "EmailPTId"# 9))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef EmailPTEmail
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy EmailPT)
            (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
      persistFieldDef EmailPTUser
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy EmailPT)
            (FieldNameHS (Data.Text.unpackCStringLen# "user"# 4))
      persistFieldDef EmailPTVerkey
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy EmailPT)
            (FieldNameHS (Data.Text.unpackCStringLen# "verkey"# 6))
      persistIdField = EmailPTId
      fieldLens EmailPTId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mQZ) key_a5mR0
               -> Entity key_a5mR0 value_a5mQZ)
      fieldLens EmailPTEmail
        = lensPTH
            ((\ EmailPT {emailPTEmail = x} -> x) . entityVal)
            (\ (Entity key_a5mR1 value_a5mR2) x_a5mR3
               -> Entity
                    key_a5mR1
                    (case value_a5mR2 of
                       EmailPT {emailPTUser = emailPTUser_a5mR5,
                                emailPTVerkey = emailPTVerkey_a5mR6}
                         -> EmailPT
                              {emailPTEmail = x_a5mR3, emailPTUser = emailPTUser,
                               emailPTVerkey = emailPTVerkey}))
      fieldLens EmailPTUser
        = lensPTH
            ((\ EmailPT {emailPTUser = x} -> x) . entityVal)
            (\ (Entity key_a5mR1 value_a5mR2) x_a5mR3
               -> Entity
                    key_a5mR1
                    (case value_a5mR2 of
                       EmailPT {emailPTEmail = emailPTEmail_a5mR7,
                                emailPTVerkey = emailPTVerkey_a5mR9}
                         -> EmailPT
                              {emailPTEmail = emailPTEmail, emailPTUser = x_a5mR3,
                               emailPTVerkey = emailPTVerkey}))
      fieldLens EmailPTVerkey
        = lensPTH
            ((\ EmailPT {emailPTVerkey = x} -> x) . entityVal)
            (\ (Entity key_a5mR1 value_a5mR2) x_a5mR3
               -> Entity
                    key_a5mR1
                    (case value_a5mR2 of
                       EmailPT {emailPTEmail = emailPTEmail_a5mRa,
                                emailPTUser = emailPTUser_a5mRb}
                         -> EmailPT
                              {emailPTEmail = emailPTEmail, emailPTUser = emailPTUser,
                               emailPTVerkey = x_a5mR3}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (EmailPTGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (EmailPTGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (EmailPTGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (EmailPTGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (EmailPTGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (EmailPTGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (EmailPTGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (EmailPTGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (EmailPTGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (EmailPTGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (EmailPTGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (EmailPTGeneric backend) where
      toBackendKey = \ EmailPTKey {unEmailPTKey = x} -> x
      fromBackendKey = EmailPTKey
    type Upsert = UpsertGeneric SqlBackend
    data UpsertGeneric backend
      = Upsert {upsertEmail :: !Text,
                upsertAttr :: !Text,
                upsertExtra :: !Text,
                upsertAge :: !Int}
      deriving stock (Eq, Show)
    type UpsertId = Key Upsert
    instance PersistStore backend =>
             PersistEntity (UpsertGeneric backend) where
      type PersistEntityBackend (UpsertGeneric backend) = backend
      data Unique (UpsertGeneric backend) = UniqueUpsert Text
      newtype Key (UpsertGeneric backend)
        = UpsertKey {unUpsertKey :: (BackendKey backend)}
      data EntityField (UpsertGeneric backend) typ
        = (typ ~ Key (UpsertGeneric backend)) => UpsertId |
          (typ ~ Text) => UpsertEmail |
          (typ ~ Text) => UpsertAttr |
          (typ ~ Text) => UpsertExtra |
          (typ ~ Int) => UpsertAge
      keyToValues
        = ((: [])
             . (toPersistValue . (\ UpsertKey {unUpsertKey = x} -> x)))
      keyFromValues
        = (fmap UpsertKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mRS
        = ((Entity <$> fromField_a5mRS UpsertId)
             <*>
               ((((pure Upsert <*> fromField_a5mRS UpsertEmail)
                    <*> fromField_a5mRS UpsertAttr)
                   <*> fromField_a5mRS UpsertExtra)
                  <*> fromField_a5mRS UpsertAge))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "Upsert"# 6))
            (EntityNameDB (Data.Text.unpackCStringLen# "Upsert"# 6))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] []
            [UniqueDef
               (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueUpsert"# 12))
               (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueUpsert"# 12))
               ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
                 FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                  NEL.:| [])
               []]
            []
            [Data.Text.unpackCStringLen# "Eq"# 2,
             Data.Text.unpackCStringLen# "Show"# 4]
            Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "email"#
                                                                                                                                                                     5),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "email"#
                                                                                                                                                                5),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "attr"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "attr"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "extra"#
                                                                                                                                                                     5),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "extra"#
                                                                                                                                                                5),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "age"#
                                                                                                                                                                     3),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "age"#
                                                                                                                                                                3),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "UpsertId"#
                                                                                                                                                    8))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Upsert x_a5mRh x_a5mRi x_a5mRj x_a5mRk)
        = [toPersistValue x_a5mRh, toPersistValue x_a5mRi,
           toPersistValue x_a5mRj, toPersistValue x_a5mRk]
      fromPersistValues [x1_a5mRm, x2_a5mRn, x3_a5mRo, x4_a5mRp]
        = Upsert
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Upsert"# 6)
                    (Data.Text.unpackCStringLen# "email"# 5))
                 . fromPersistValue)
                x1_a5mRm
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Upsert"# 6)
                    (Data.Text.unpackCStringLen# "attr"# 4))
                 . fromPersistValue)
                x2_a5mRn
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Upsert"# 6)
                    (Data.Text.unpackCStringLen# "extra"# 5))
                 . fromPersistValue)
                x3_a5mRo
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Upsert"# 6)
                    (Data.Text.unpackCStringLen# "age"# 3))
                 . fromPersistValue)
                x4_a5mRp
      fromPersistValues x_a5mRl
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "Upsert: fromPersistValues failed on: "# 37)
                 (Data.Text.Internal.pack $ show x_a5mRl))
      persistUniqueToFieldNames UniqueUpsert {}
        = ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
            FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
             NEL.:| [])
      persistUniqueToValues (UniqueUpsert x_a5mRq)
        = [toPersistValue x_a5mRq]
      persistUniqueKeys
        (Upsert _email_a5mRr _attr_a5mRt _extra_a5mRu _age_a5mRv)
        = [UniqueUpsert _email_a5mRr]
      persistFieldDef UpsertId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef UpsertEmail
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Upsert)
            (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
      persistFieldDef UpsertAttr
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Upsert)
            (FieldNameHS (Data.Text.unpackCStringLen# "attr"# 4))
      persistFieldDef UpsertExtra
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Upsert)
            (FieldNameHS (Data.Text.unpackCStringLen# "extra"# 5))
      persistFieldDef UpsertAge
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Upsert)
            (FieldNameHS (Data.Text.unpackCStringLen# "age"# 3))
      persistIdField = UpsertId
      fieldLens UpsertId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mRx) key_a5mRy
               -> Entity key_a5mRy value_a5mRx)
      fieldLens UpsertEmail
        = lensPTH
            ((\ Upsert {upsertEmail = x} -> x) . entityVal)
            (\ (Entity key_a5mRz value_a5mRA) x_a5mRB
               -> Entity
                    key_a5mRz
                    (case value_a5mRA of
                       Upsert {upsertAttr = upsertAttr_a5mRD,
                               upsertExtra = upsertExtra_a5mRE, upsertAge = upsertAge_a5mRF}
                         -> Upsert
                              {upsertEmail = x_a5mRB, upsertAttr = upsertAttr,
                               upsertExtra = upsertExtra, upsertAge = upsertAge}))
      fieldLens UpsertAttr
        = lensPTH
            ((\ Upsert {upsertAttr = x} -> x) . entityVal)
            (\ (Entity key_a5mRz value_a5mRA) x_a5mRB
               -> Entity
                    key_a5mRz
                    (case value_a5mRA of
                       Upsert {upsertEmail = upsertEmail_a5mRG,
                               upsertExtra = upsertExtra_a5mRI, upsertAge = upsertAge_a5mRJ}
                         -> Upsert
                              {upsertEmail = upsertEmail, upsertAttr = x_a5mRB,
                               upsertExtra = upsertExtra, upsertAge = upsertAge}))
      fieldLens UpsertExtra
        = lensPTH
            ((\ Upsert {upsertExtra = x} -> x) . entityVal)
            (\ (Entity key_a5mRz value_a5mRA) x_a5mRB
               -> Entity
                    key_a5mRz
                    (case value_a5mRA of
                       Upsert {upsertEmail = upsertEmail_a5mRK,
                               upsertAttr = upsertAttr_a5mRL, upsertAge = upsertAge_a5mRN}
                         -> Upsert
                              {upsertEmail = upsertEmail, upsertAttr = upsertAttr,
                               upsertExtra = x_a5mRB, upsertAge = upsertAge}))
      fieldLens UpsertAge
        = lensPTH
            ((\ Upsert {upsertAge = x} -> x) . entityVal)
            (\ (Entity key_a5mRz value_a5mRA) x_a5mRB
               -> Entity
                    key_a5mRz
                    (case value_a5mRA of
                       Upsert {upsertEmail = upsertEmail_a5mRO,
                               upsertAttr = upsertAttr_a5mRP, upsertExtra = upsertExtra_a5mRQ}
                         -> Upsert
                              {upsertEmail = upsertEmail, upsertAttr = upsertAttr,
                               upsertExtra = upsertExtra, upsertAge = x_a5mRB}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (UpsertGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (UpsertGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (UpsertGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (UpsertGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (UpsertGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (UpsertGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (UpsertGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (UpsertGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (UpsertGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (UpsertGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (UpsertGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (UpsertGeneric backend) where
      toBackendKey = \ UpsertKey {unUpsertKey = x} -> x
      fromBackendKey = UpsertKey
    type UpsertBy = UpsertByGeneric SqlBackend
    data UpsertByGeneric backend
      = UpsertBy {upsertByEmail :: !Text,
                  upsertByCity :: !Text,
                  upsertByAttr :: !Text}
      deriving stock (Eq, Show)
    type UpsertById = Key UpsertBy
    instance PersistStore backend =>
             PersistEntity (UpsertByGeneric backend) where
      type PersistEntityBackend (UpsertByGeneric backend) = backend
      data Unique (UpsertByGeneric backend)
        = UniqueUpsertBy Text | UniqueUpsertByCity Text
      newtype Key (UpsertByGeneric backend)
        = UpsertByKey {unUpsertByKey :: (BackendKey backend)}
      data EntityField (UpsertByGeneric backend) typ
        = (typ ~ Key (UpsertByGeneric backend)) => UpsertById |
          (typ ~ Text) => UpsertByEmail |
          (typ ~ Text) => UpsertByCity |
          (typ ~ Text) => UpsertByAttr
      keyToValues
        = ((: [])
             . (toPersistValue . (\ UpsertByKey {unUpsertByKey = x} -> x)))
      keyFromValues
        = (fmap UpsertByKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mSn
        = ((Entity <$> fromField_a5mSn UpsertById)
             <*>
               (((pure UpsertBy <*> fromField_a5mSn UpsertByEmail)
                   <*> fromField_a5mSn UpsertByCity)
                  <*> fromField_a5mSn UpsertByAttr))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "UpsertBy"# 8))
            (EntityNameDB (Data.Text.unpackCStringLen# "UpsertBy"# 8))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertById"# 10))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] []
            [UniqueDef
               (ConstraintNameHS
                  (Data.Text.unpackCStringLen# "UniqueUpsertBy"# 14))
               (ConstraintNameDB
                  (Data.Text.unpackCStringLen# "UniqueUpsertBy"# 14))
               ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
                 FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
                  NEL.:| [])
               [],
             UniqueDef
               (ConstraintNameHS
                  (Data.Text.unpackCStringLen# "UniqueUpsertByCity"# 18))
               (ConstraintNameDB
                  (Data.Text.unpackCStringLen# "UniqueUpsertByCity"# 18))
               ((FieldNameHS (Data.Text.unpackCStringLen# "city"# 4), 
                 FieldNameDB (Data.Text.unpackCStringLen# "city"# 4))
                  NEL.:| [])
               []]
            []
            [Data.Text.unpackCStringLen# "Eq"# 2,
             Data.Text.unpackCStringLen# "Show"# 4]
            Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "email"#
                                                                                                                                                                     5),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "email"#
                                                                                                                                                                5),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "city"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "city"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "attr"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "attr"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "UpsertById"#
                                                                                                                                                    10))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (UpsertBy x_a5mRV x_a5mRW x_a5mRX)
        = [toPersistValue x_a5mRV, toPersistValue x_a5mRW,
           toPersistValue x_a5mRX]
      fromPersistValues [x1_a5mRZ, x2_a5mS0, x3_a5mS1]
        = UpsertBy
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "UpsertBy"# 8)
                    (Data.Text.unpackCStringLen# "email"# 5))
                 . fromPersistValue)
                x1_a5mRZ
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "UpsertBy"# 8)
                    (Data.Text.unpackCStringLen# "city"# 4))
                 . fromPersistValue)
                x2_a5mS0
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "UpsertBy"# 8)
                    (Data.Text.unpackCStringLen# "attr"# 4))
                 . fromPersistValue)
                x3_a5mS1
      fromPersistValues x_a5mRY
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "UpsertBy: fromPersistValues failed on: "# 39)
                 (Data.Text.Internal.pack $ show x_a5mRY))
      persistUniqueToFieldNames UniqueUpsertBy {}
        = ((FieldNameHS (Data.Text.unpackCStringLen# "email"# 5), 
            FieldNameDB (Data.Text.unpackCStringLen# "email"# 5))
             NEL.:| [])
      persistUniqueToFieldNames UniqueUpsertByCity {}
        = ((FieldNameHS (Data.Text.unpackCStringLen# "city"# 4), 
            FieldNameDB (Data.Text.unpackCStringLen# "city"# 4))
             NEL.:| [])
      persistUniqueToValues (UniqueUpsertBy x_a5mS3)
        = [toPersistValue x_a5mS3]
      persistUniqueToValues (UniqueUpsertByCity x_a5mS4)
        = [toPersistValue x_a5mS4]
      persistUniqueKeys (UpsertBy _email_a5mS5 _city_a5mS6 _attr_a5mS7)
        = [UniqueUpsertBy _email_a5mS5, UniqueUpsertByCity _city_a5mS6]
      persistFieldDef UpsertById
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "UpsertById"# 10))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef UpsertByEmail
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy UpsertBy)
            (FieldNameHS (Data.Text.unpackCStringLen# "email"# 5))
      persistFieldDef UpsertByCity
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy UpsertBy)
            (FieldNameHS (Data.Text.unpackCStringLen# "city"# 4))
      persistFieldDef UpsertByAttr
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy UpsertBy)
            (FieldNameHS (Data.Text.unpackCStringLen# "attr"# 4))
      persistIdField = UpsertById
      fieldLens UpsertById
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mS9) key_a5mSa
               -> Entity key_a5mSa value_a5mS9)
      fieldLens UpsertByEmail
        = lensPTH
            ((\ UpsertBy {upsertByEmail = x} -> x) . entityVal)
            (\ (Entity key_a5mSb value_a5mSc) x_a5mSd
               -> Entity
                    key_a5mSb
                    (case value_a5mSc of
                       UpsertBy {upsertByCity = upsertByCity_a5mSf,
                                 upsertByAttr = upsertByAttr_a5mSg}
                         -> UpsertBy
                              {upsertByEmail = x_a5mSd, upsertByCity = upsertByCity,
                               upsertByAttr = upsertByAttr}))
      fieldLens UpsertByCity
        = lensPTH
            ((\ UpsertBy {upsertByCity = x} -> x) . entityVal)
            (\ (Entity key_a5mSb value_a5mSc) x_a5mSd
               -> Entity
                    key_a5mSb
                    (case value_a5mSc of
                       UpsertBy {upsertByEmail = upsertByEmail_a5mSh,
                                 upsertByAttr = upsertByAttr_a5mSj}
                         -> UpsertBy
                              {upsertByEmail = upsertByEmail, upsertByCity = x_a5mSd,
                               upsertByAttr = upsertByAttr}))
      fieldLens UpsertByAttr
        = lensPTH
            ((\ UpsertBy {upsertByAttr = x} -> x) . entityVal)
            (\ (Entity key_a5mSb value_a5mSc) x_a5mSd
               -> Entity
                    key_a5mSb
                    (case value_a5mSc of
                       UpsertBy {upsertByEmail = upsertByEmail_a5mSk,
                                 upsertByCity = upsertByCity_a5mSl}
                         -> UpsertBy
                              {upsertByEmail = upsertByEmail, upsertByCity = upsertByCity,
                               upsertByAttr = x_a5mSd}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (UpsertByGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (UpsertByGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (UpsertByGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (UpsertByGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (UpsertByGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (UpsertByGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (UpsertByGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (UpsertByGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (UpsertByGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (UpsertByGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (UpsertByGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (UpsertByGeneric backend) where
      toBackendKey = \ UpsertByKey {unUpsertByKey = x} -> x
      fromBackendKey = UpsertByKey
    type Strict = StrictGeneric SqlBackend
    data StrictGeneric backend
      = Strict {strictYes :: !Int, strictNo :: Int, strictDef :: !Int}
    type StrictId = Key Strict
    instance PersistStore backend =>
             PersistEntity (StrictGeneric backend) where
      type PersistEntityBackend (StrictGeneric backend) = backend
      data Unique (StrictGeneric backend)
      newtype Key (StrictGeneric backend)
        = StrictKey {unStrictKey :: (BackendKey backend)}
      data EntityField (StrictGeneric backend) typ
        = (typ ~ Key (StrictGeneric backend)) => StrictId |
          (typ ~ Int) => StrictYes |
          (typ ~ Int) => StrictNo |
          (typ ~ Int) => StrictDef
      keyToValues
        = ((: [])
             . (toPersistValue . (\ StrictKey {unStrictKey = x} -> x)))
      keyFromValues
        = (fmap StrictKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mSS
        = ((Entity <$> fromField_a5mSS StrictId)
             <*>
               (((pure Strict <*> fromField_a5mSS StrictYes)
                   <*> fromField_a5mSS StrictNo)
                  <*> fromField_a5mSS StrictDef))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "Strict"# 6))
            (EntityNameDB (Data.Text.unpackCStringLen# "Strict"# 6))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "StrictId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "yes"#
                                                                                                                                                                     3),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "yes"#
                                                                                                                                                                3),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "no"#
                                                                                                                                                                     2),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "no"#
                                                                                                                                                                2),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = False,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "def"#
                                                                                                                                                                     3),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "def"#
                                                                                                                                                                3),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "StrictId"#
                                                                                                                                                    8))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Strict x_a5mSp x_a5mSq x_a5mSr)
        = [toPersistValue x_a5mSp, toPersistValue x_a5mSq,
           toPersistValue x_a5mSr]
      fromPersistValues [x1_a5mSu, x2_a5mSv, x3_a5mSw]
        = Strict
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Strict"# 6)
                    (Data.Text.unpackCStringLen# "yes"# 3))
                 . fromPersistValue)
                x1_a5mSu
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Strict"# 6)
                    (Data.Text.unpackCStringLen# "no"# 2))
                 . fromPersistValue)
                x2_a5mSv
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Strict"# 6)
                    (Data.Text.unpackCStringLen# "def"# 3))
                 . fromPersistValue)
                x3_a5mSw
      fromPersistValues x_a5mSt
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "Strict: fromPersistValues failed on: "# 37)
                 (Data.Text.Internal.pack $ show x_a5mSt))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Strict _yes_a5mSz _no_a5mSA _def_a5mSB) = []
      persistFieldDef StrictId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "StrictId"# 8))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef StrictYes
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Strict)
            (FieldNameHS (Data.Text.unpackCStringLen# "yes"# 3))
      persistFieldDef StrictNo
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Strict)
            (FieldNameHS (Data.Text.unpackCStringLen# "no"# 2))
      persistFieldDef StrictDef
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Strict)
            (FieldNameHS (Data.Text.unpackCStringLen# "def"# 3))
      persistIdField = StrictId
      fieldLens StrictId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mSE) key_a5mSF
               -> Entity key_a5mSF value_a5mSE)
      fieldLens StrictYes
        = lensPTH
            ((\ Strict {strictYes = x} -> x) . entityVal)
            (\ (Entity key_a5mSG value_a5mSH) x_a5mSI
               -> Entity
                    key_a5mSG
                    (case value_a5mSH of
                       Strict {strictNo = strictNo_a5mSK, strictDef = strictDef_a5mSL}
                         -> Strict
                              {strictYes = x_a5mSI, strictNo = strictNo, strictDef = strictDef}))
      fieldLens StrictNo
        = lensPTH
            ((\ Strict {strictNo = x} -> x) . entityVal)
            (\ (Entity key_a5mSG value_a5mSH) x_a5mSI
               -> Entity
                    key_a5mSG
                    (case value_a5mSH of
                       Strict {strictYes = strictYes_a5mSM, strictDef = strictDef_a5mSO}
                         -> Strict
                              {strictYes = strictYes, strictNo = x_a5mSI,
                               strictDef = strictDef}))
      fieldLens StrictDef
        = lensPTH
            ((\ Strict {strictDef = x} -> x) . entityVal)
            (\ (Entity key_a5mSG value_a5mSH) x_a5mSI
               -> Entity
                    key_a5mSG
                    (case value_a5mSH of
                       Strict {strictYes = strictYes_a5mSP, strictNo = strictNo_a5mSQ}
                         -> Strict
                              {strictYes = strictYes, strictNo = strictNo, strictDef = x_a5mSI}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (StrictGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (StrictGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (StrictGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (StrictGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (StrictGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (StrictGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (StrictGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (StrictGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (StrictGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (StrictGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (StrictGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (StrictGeneric backend) where
      toBackendKey = \ StrictKey {unStrictKey = x} -> x
      fromBackendKey = StrictKey
    type DudeWeirdColumns = DudeWeirdColumnsGeneric SqlBackend
    data DudeWeirdColumnsGeneric backend
      = DudeWeirdColumns {dudeWeirdColumnsName :: !Text}
      deriving stock (Eq, Show)
    type DudeWeirdColumnsId = Key DudeWeirdColumns
    instance PersistStore backend =>
             PersistEntity (DudeWeirdColumnsGeneric backend) where
      type PersistEntityBackend (DudeWeirdColumnsGeneric backend) = backend
      data Unique (DudeWeirdColumnsGeneric backend) = UniqueName Text
      newtype Key (DudeWeirdColumnsGeneric backend)
        = DudeWeirdColumnsKey {unDudeWeirdColumnsKey :: (BackendKey backend)}
      data EntityField (DudeWeirdColumnsGeneric backend) typ
        = (typ ~ Key (DudeWeirdColumnsGeneric backend)) =>
          DudeWeirdColumnsId |
          (typ ~ Text) => DudeWeirdColumnsName
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ DudeWeirdColumnsKey {unDudeWeirdColumnsKey = x} -> x)))
      keyFromValues
        = (fmap DudeWeirdColumnsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mT6
        = ((Entity <$> fromField_a5mT6 DudeWeirdColumnsId)
             <*>
               (pure DudeWeirdColumns <*> fromField_a5mT6 DudeWeirdColumnsName))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "DudeWeirdColumns"# 16))
            (EntityNameDB (Data.Text.unpackCStringLen# "DudeWeirdColumns"# 16))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "DudeWeirdColumnsId"# 18))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] []
            [UniqueDef
               (ConstraintNameHS (Data.Text.unpackCStringLen# "UniqueName"# 10))
               (ConstraintNameDB (Data.Text.unpackCStringLen# "UniqueName"# 10))
               ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
                 FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
                  NEL.:| [])
               []]
            []
            [Data.Text.unpackCStringLen# "Eq"# 2,
             Data.Text.unpackCStringLen# "Show"# 4]
            Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Text"#
                                                                                                                                                                  4),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Text),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "foo"#
                                                                                                                                                                     3),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "foo"#
                                                                                                                                                                3),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [FieldAttrMigrationOnly,
                                                                                                                                                               FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "bar"#
                                                                                                                                                                     3),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "bar"#
                                                                                                                                                                3),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Double"#
                                                                                                                                                                  6),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Double),
                                                                                                                                                 fieldAttrs = [FieldAttrSafeToRemove],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "DudeWeirdColumnsId"#
                                                                                                                                                    18))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (DudeWeirdColumns x_a5mST)
        = [toPersistValue x_a5mST]
      fromPersistValues [x1_a5mSV]
        = DudeWeirdColumns
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "DudeWeirdColumns"# 16)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x1_a5mSV
      fromPersistValues x_a5mSU
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "DudeWeirdColumns: fromPersistValues failed on: "# 47)
                 (Data.Text.Internal.pack $ show x_a5mSU))
      persistUniqueToFieldNames UniqueName {}
        = ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
            FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
             NEL.:| [])
      persistUniqueToValues (UniqueName x_a5mSW)
        = [toPersistValue x_a5mSW]
      persistUniqueKeys (DudeWeirdColumns _name_a5mSX)
        = [UniqueName _name_a5mSX]
      persistFieldDef DudeWeirdColumnsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "DudeWeirdColumnsId"# 18))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef DudeWeirdColumnsName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy DudeWeirdColumns)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistIdField = DudeWeirdColumnsId
      fieldLens DudeWeirdColumnsId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mSZ) key_a5mT0
               -> Entity key_a5mT0 value_a5mSZ)
      fieldLens DudeWeirdColumnsName
        = lensPTH
            ((\ DudeWeirdColumns {dudeWeirdColumnsName = x} -> x) . entityVal)
            (\ (Entity key_a5mT1 value_a5mT2) x_a5mT3
               -> Entity
                    key_a5mT1
                    (case value_a5mT2 of
                       DudeWeirdColumns {}
                         -> DudeWeirdColumns {dudeWeirdColumnsName = x_a5mT3}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (DudeWeirdColumnsGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (DudeWeirdColumnsGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (DudeWeirdColumnsGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (DudeWeirdColumnsGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (DudeWeirdColumnsGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (DudeWeirdColumnsGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (DudeWeirdColumnsGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (DudeWeirdColumnsGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (DudeWeirdColumnsGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (DudeWeirdColumnsGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (DudeWeirdColumnsGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (DudeWeirdColumnsGeneric backend) where
      toBackendKey
        = \ DudeWeirdColumnsKey {unDudeWeirdColumnsKey = x} -> x
      fromBackendKey = DudeWeirdColumnsKey
    type Relationship = RelationshipGeneric SqlBackend
    data RelationshipGeneric backend
      = Relationship {relationshipName :: !String,
                      relationshipParent :: !(Maybe (Key (RelationshipGeneric backend)))}
    type RelationshipId = Key Relationship
    instance PersistStore backend =>
             PersistEntity (RelationshipGeneric backend) where
      type PersistEntityBackend (RelationshipGeneric backend) = backend
      data Unique (RelationshipGeneric backend)
      newtype Key (RelationshipGeneric backend)
        = RelationshipKey {unRelationshipKey :: (BackendKey backend)}
      data EntityField (RelationshipGeneric backend) typ
        = (typ ~ Key (RelationshipGeneric backend)) => RelationshipId |
          (typ ~ String) => RelationshipName |
          (typ ~ Maybe (Key (RelationshipGeneric backend))) =>
          RelationshipParent
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ RelationshipKey {unRelationshipKey = x} -> x)))
      keyFromValues
        = (fmap RelationshipKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mTq
        = ((Entity <$> fromField_a5mTq RelationshipId)
             <*>
               ((pure Relationship <*> fromField_a5mTq RelationshipName)
                  <*> fromField_a5mTq RelationshipParent))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "Relationship"# 12))
            (EntityNameDB (Data.Text.unpackCStringLen# "Relationship"# 12))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "RelationshipId"# 14))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] Data.Map.Internal.Tip False
            (Just
               (Data.Text.unpackCStringLen#
                  "This is a doc comment for a relationship.\n\
                  \You need to put the pipe character for each line of documentation.\n\
                  \But you can resume the doc comments afterwards.\n"#
                  157))
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "String"#
                                                                                                                                                                  6),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy String),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Just
                                                                                                                                                                   (Data.Text.unpackCStringLen#
                                                                                                                                                                      "Fields should be documentable.\n"#
                                                                                                                                                                      31),
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "parent"#
                                                                                                                                                                     6),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "parent"#
                                                                                                                                                                6),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "RelationshipId"#
                                                                                                                                                                  14),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy RelationshipId),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "Relationship"#
                                                                                                                                                                          12)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "RelationshipId"#
                                                                                                                                                    14))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Relationship x_a5mT9 x_a5mTa)
        = [toPersistValue x_a5mT9, toPersistValue x_a5mTa]
      fromPersistValues [x1_a5mTc, x2_a5mTd]
        = Relationship
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Relationship"# 12)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x1_a5mTc
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "Relationship"# 12)
                    (Data.Text.unpackCStringLen# "parent"# 6))
                 . fromPersistValue)
                x2_a5mTd
      fromPersistValues x_a5mTb
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "Relationship: fromPersistValues failed on: "# 43)
                 (Data.Text.Internal.pack $ show x_a5mTb))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Relationship _name_a5mTe _parent_a5mTf) = []
      persistFieldDef RelationshipId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "RelationshipId"# 14))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef RelationshipName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Relationship)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistFieldDef RelationshipParent
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Relationship)
            (FieldNameHS (Data.Text.unpackCStringLen# "parent"# 6))
      persistIdField = RelationshipId
      fieldLens RelationshipId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mTh) key_a5mTi
               -> Entity key_a5mTi value_a5mTh)
      fieldLens RelationshipName
        = lensPTH
            ((\ Relationship {relationshipName = x} -> x) . entityVal)
            (\ (Entity key_a5mTj value_a5mTk) x_a5mTl
               -> Entity
                    key_a5mTj
                    (case value_a5mTk of
                       Relationship {relationshipParent = relationshipParent_a5mTn}
                         -> Relationship
                              {relationshipName = x_a5mTl,
                               relationshipParent = relationshipParent}))
      fieldLens RelationshipParent
        = lensPTH
            ((\ Relationship {relationshipParent = x} -> x) . entityVal)
            (\ (Entity key_a5mTj value_a5mTk) x_a5mTl
               -> Entity
                    key_a5mTj
                    (case value_a5mTk of
                       Relationship {relationshipName = relationshipName_a5mTo}
                         -> Relationship
                              {relationshipName = relationshipName,
                               relationshipParent = x_a5mTl}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (RelationshipGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (RelationshipGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (RelationshipGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (RelationshipGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (RelationshipGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (RelationshipGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (RelationshipGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (RelationshipGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (RelationshipGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (RelationshipGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (RelationshipGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (RelationshipGeneric backend) where
      toBackendKey = \ RelationshipKey {unRelationshipKey = x} -> x
      fromBackendKey = RelationshipKey
    type MutA = MutAGeneric SqlBackend
    data MutAGeneric backend
      = MutA {mutAMutB :: !(Key (MutBGeneric backend))}
    type MutAId = Key MutA
    instance PersistStore backend =>
             PersistEntity (MutAGeneric backend) where
      type PersistEntityBackend (MutAGeneric backend) = backend
      data Unique (MutAGeneric backend)
      newtype Key (MutAGeneric backend)
        = MutAKey {unMutAKey :: (BackendKey backend)}
      data EntityField (MutAGeneric backend) typ
        = (typ ~ Key (MutAGeneric backend)) => MutAId |
          (typ ~ Key (MutBGeneric backend)) => MutAMutB
      keyToValues
        = ((: []) . (toPersistValue . (\ MutAKey {unMutAKey = x} -> x)))
      keyFromValues
        = (fmap MutAKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mTF
        = ((Entity <$> fromField_a5mTF MutAId)
             <*> (pure MutA <*> fromField_a5mTF MutAMutB))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "MutA"# 4))
            (EntityNameDB (Data.Text.unpackCStringLen# "MutA"# 4))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "MutAId"# 6))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "mutB"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "mutB"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "MutBId"#
                                                                                                                                                                  6),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy MutBId),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "MutB"#
                                                                                                                                                                          4)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "MutAId"#
                                                                                                                                                    6))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (MutA x_a5mTs) = [toPersistValue x_a5mTs]
      fromPersistValues [x1_a5mTv]
        = MutA
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "MutA"# 4)
                    (Data.Text.unpackCStringLen# "mutB"# 4))
                 . fromPersistValue)
                x1_a5mTv
      fromPersistValues x_a5mTt
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "MutA: fromPersistValues failed on: "# 35)
                 (Data.Text.Internal.pack $ show x_a5mTt))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (MutA _mutB_a5mTw) = []
      persistFieldDef MutAId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "MutAId"# 6))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef MutAMutB
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy MutA)
            (FieldNameHS (Data.Text.unpackCStringLen# "mutB"# 4))
      persistIdField = MutAId
      fieldLens MutAId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mTz) key_a5mTA
               -> Entity key_a5mTA value_a5mTz)
      fieldLens MutAMutB
        = lensPTH
            ((\ MutA {mutAMutB = x} -> x) . entityVal)
            (\ (Entity key_a5mTB value_a5mTC) x_a5mTD
               -> Entity
                    key_a5mTB
                    (case value_a5mTC of MutA {} -> MutA {mutAMutB = x_a5mTD}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (MutAGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (MutAGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (MutAGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (MutAGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (MutAGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (MutAGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (MutAGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (MutAGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (MutAGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (MutAGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (MutAGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (MutAGeneric backend) where
      toBackendKey = \ MutAKey {unMutAKey = x} -> x
      fromBackendKey = MutAKey
    type MutB = MutBGeneric SqlBackend
    data MutBGeneric backend
      = MutB {mutBMutA :: !(Key (MutAGeneric backend))}
    type MutBId = Key MutB
    instance PersistStore backend =>
             PersistEntity (MutBGeneric backend) where
      type PersistEntityBackend (MutBGeneric backend) = backend
      data Unique (MutBGeneric backend)
      newtype Key (MutBGeneric backend)
        = MutBKey {unMutBKey :: (BackendKey backend)}
      data EntityField (MutBGeneric backend) typ
        = (typ ~ Key (MutBGeneric backend)) => MutBId |
          (typ ~ Key (MutAGeneric backend)) => MutBMutA
      keyToValues
        = ((: []) . (toPersistValue . (\ MutBKey {unMutBKey = x} -> x)))
      keyFromValues
        = (fmap MutBKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5mTX
        = ((Entity <$> fromField_a5mTX MutBId)
             <*> (pure MutB <*> fromField_a5mTX MutBMutA))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "MutB"# 4))
            (EntityNameDB (Data.Text.unpackCStringLen# "MutB"# 4))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "MutBId"# 6))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "mutA"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "mutA"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "MutAId"#
                                                                                                                                                                  6),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy MutAId),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "MutA"#
                                                                                                                                                                          4)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "MutBId"#
                                                                                                                                                    6))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (MutB x_a5mTG) = [toPersistValue x_a5mTG]
      fromPersistValues [x1_a5mTI]
        = MutB
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "MutB"# 4)
                    (Data.Text.unpackCStringLen# "mutA"# 4))
                 . fromPersistValue)
                x1_a5mTI
      fromPersistValues x_a5mTH
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "MutB: fromPersistValues failed on: "# 35)
                 (Data.Text.Internal.pack $ show x_a5mTH))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (MutB _mutA_a5mTJ) = []
      persistFieldDef MutBId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "MutBId"# 6))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef MutBMutA
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy MutB)
            (FieldNameHS (Data.Text.unpackCStringLen# "mutA"# 4))
      persistIdField = MutBId
      fieldLens MutBId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5mTR) key_a5mTS
               -> Entity key_a5mTS value_a5mTR)
      fieldLens MutBMutA
        = lensPTH
            ((\ MutB {mutBMutA = x} -> x) . entityVal)
            (\ (Entity key_a5mTT value_a5mTU) x_a5mTV
               -> Entity
                    key_a5mTT
                    (case value_a5mTU of MutB {} -> MutB {mutBMutA = x_a5mTV}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (MutBGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (MutBGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (MutBGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (MutBGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (MutBGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (MutBGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (MutBGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (MutBGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (MutBGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (MutBGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (MutBGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (MutBGeneric backend) where
      toBackendKey = \ MutBKey {unMutBKey = x} -> x
      fromBackendKey = MutBKey
    instance PersistStore backend =>
             ToJSON (PersonGeneric backend) where
      toJSON (Person name_a5mU0 age_a5mU1 color_a5mU2)
        = object
            [(Data.Aeson.Key.fromString "name" .= name_a5mU0),
             (Data.Aeson.Key.fromString "age" .= age_a5mU1),
             (Data.Aeson.Key.fromString "color" .= color_a5mU2)]
    instance PersistStore backend =>
             FromJSON (PersonGeneric backend) where
      parseJSON
        = withObject
            "Person"
            (\ obj_a5mTZ
               -> (((pure Person
                       <*> (obj_a5mTZ .: Data.Aeson.Key.fromString "name"))
                      <*> (obj_a5mTZ .: Data.Aeson.Key.fromString "age"))
                     <*> (obj_a5mTZ .:? Data.Aeson.Key.fromString "color")))
    instance PersistStore backend =>
             ToJSON (Entity (PersonGeneric backend)) where
      toJSON = entityIdToJSON
    instance PersistStore backend =>
             FromJSON (Entity (PersonGeneric backend)) where
      parseJSON = entityIdFromJSON
    instance PersistStore backend =>
             ToJSON (PersonMayGeneric backend) where
      toJSON (PersonMay name_a5mU4 color_a5mU5)
        = object
            [(Data.Aeson.Key.fromString "name" .= name_a5mU4),
             (Data.Aeson.Key.fromString "color" .= color_a5mU5)]
    instance PersistStore backend =>
             FromJSON (PersonMayGeneric backend) where
      parseJSON
        = withObject
            "PersonMay"
            (\ obj_a5mU3
               -> ((pure PersonMay
                      <*> (obj_a5mU3 .:? Data.Aeson.Key.fromString "name"))
                     <*> (obj_a5mU3 .:? Data.Aeson.Key.fromString "color")))
    instance PersistStore backend =>
             ToJSON (Entity (PersonMayGeneric backend)) where
      toJSON = entityIdToJSON
    instance PersistStore backend =>
             FromJSON (Entity (PersonMayGeneric backend)) where
      parseJSON = entityIdFromJSON
    instance PersistStoreWrite backend =>
             OnlyOneUniqueKey (PersonGeneric backend) where
      onlyUniqueP = (head . persistUniqueKeys)
    instance PersistStoreWrite backend =>
             AtLeastOneUniqueKey (PersonGeneric backend) where
      requireUniquesP = (NEL.fromList . persistUniqueKeys)
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (Person1Generic backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (Person1Generic backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (Person1Generic backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (Person1Generic backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (PersonMaybeAgeGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (PersonMaybeAgeGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (PersonMaybeAgeGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (PersonMaybeAgeGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (PersonMayGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (PersonMayGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (PersonMayGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (PersonMayGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (PetGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (PetGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (PetGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (PetGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (MaybeOwnedPetGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (MaybeOwnedPetGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (MaybeOwnedPetGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (MaybeOwnedPetGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NeedsPetGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (NeedsPetGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NeedsPetGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (NeedsPetGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (OutdoorPetGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (OutdoorPetGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (OutdoorPetGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (OutdoorPetGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance PersistStoreWrite backend =>
             OnlyOneUniqueKey (UserPTGeneric backend) where
      onlyUniqueP = (head . persistUniqueKeys)
    instance PersistStoreWrite backend =>
             AtLeastOneUniqueKey (UserPTGeneric backend) where
      requireUniquesP = (NEL.fromList . persistUniqueKeys)
    instance PersistStoreWrite backend =>
             OnlyOneUniqueKey (EmailPTGeneric backend) where
      onlyUniqueP = (head . persistUniqueKeys)
    instance PersistStoreWrite backend =>
             AtLeastOneUniqueKey (EmailPTGeneric backend) where
      requireUniquesP = (NEL.fromList . persistUniqueKeys)
    instance PersistStoreWrite backend =>
             OnlyOneUniqueKey (UpsertGeneric backend) where
      onlyUniqueP = (head . persistUniqueKeys)
    instance PersistStoreWrite backend =>
             AtLeastOneUniqueKey (UpsertGeneric backend) where
      requireUniquesP = (NEL.fromList . persistUniqueKeys)
    instance (GHC.TypeError.TypeError (MultipleUniqueKeysError (UpsertByGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (UpsertByGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance PersistStoreWrite backend =>
             AtLeastOneUniqueKey (UpsertByGeneric backend) where
      requireUniquesP = (NEL.fromList . persistUniqueKeys)
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (StrictGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (StrictGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (StrictGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (StrictGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance PersistStoreWrite backend =>
             OnlyOneUniqueKey (DudeWeirdColumnsGeneric backend) where
      onlyUniqueP = (head . persistUniqueKeys)
    instance PersistStoreWrite backend =>
             AtLeastOneUniqueKey (DudeWeirdColumnsGeneric backend) where
      requireUniquesP = (NEL.fromList . persistUniqueKeys)
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (RelationshipGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (RelationshipGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (RelationshipGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (RelationshipGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (MutAGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (MutAGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (MutAGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (MutAGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (MutBGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (MutBGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (MutBGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (MutBGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance SymbolToField "id" (PersonGeneric backend) (Key (PersonGeneric backend)) where
      symbolToField = PersonId
    instance SymbolToField "name" (PersonGeneric backend) Text where
      symbolToField = PersonName
    instance SymbolToField "age" (PersonGeneric backend) Int where
      symbolToField = PersonAge
    instance SymbolToField "color" (PersonGeneric backend) (Maybe Text) where
      symbolToField = PersonColor
    instance SymbolToField "id" (Person1Generic backend) (Key (Person1Generic backend)) where
      symbolToField = Person1Id
    instance SymbolToField "name" (Person1Generic backend) Text where
      symbolToField = Person1Name
    instance SymbolToField "age" (Person1Generic backend) Int where
      symbolToField = Person1Age
    instance SymbolToField "id" (PersonMaybeAgeGeneric backend) (Key (PersonMaybeAgeGeneric backend)) where
      symbolToField = PersonMaybeAgeId
    instance SymbolToField "name" (PersonMaybeAgeGeneric backend) Text where
      symbolToField = PersonMaybeAgeName
    instance SymbolToField "age" (PersonMaybeAgeGeneric backend) (Maybe Int) where
      symbolToField = PersonMaybeAgeAge
    instance SymbolToField "id" (PersonMayGeneric backend) (Key (PersonMayGeneric backend)) where
      symbolToField = PersonMayId
    instance SymbolToField "name" (PersonMayGeneric backend) (Maybe Text) where
      symbolToField = PersonMayName
    instance SymbolToField "color" (PersonMayGeneric backend) (Maybe Text) where
      symbolToField = PersonMayColor
    instance SymbolToField "id" (PetGeneric backend) (Key (PetGeneric backend)) where
      symbolToField = PetId
    instance SymbolToField "ownerId" (PetGeneric backend) (Key (PersonGeneric backend)) where
      symbolToField = PetOwnerId
    instance SymbolToField "name" (PetGeneric backend) Text where
      symbolToField = PetName
    instance SymbolToField "type" (PetGeneric backend) PetType where
      symbolToField = PetType
    instance SymbolToField "id" (MaybeOwnedPetGeneric backend) (Key (MaybeOwnedPetGeneric backend)) where
      symbolToField = MaybeOwnedPetId
    instance SymbolToField "ownerId" (MaybeOwnedPetGeneric backend) (Maybe (Key (PersonGeneric backend))) where
      symbolToField = MaybeOwnedPetOwnerId
    instance SymbolToField "name" (MaybeOwnedPetGeneric backend) Text where
      symbolToField = MaybeOwnedPetName
    instance SymbolToField "type" (MaybeOwnedPetGeneric backend) PetType where
      symbolToField = MaybeOwnedPetType
    instance SymbolToField "id" (NeedsPetGeneric backend) (Key (NeedsPetGeneric backend)) where
      symbolToField = NeedsPetId
    instance SymbolToField "petKey" (NeedsPetGeneric backend) (Key (PetGeneric backend)) where
      symbolToField = NeedsPetPetKey
    instance SymbolToField "id" (OutdoorPetGeneric backend) (Key (OutdoorPetGeneric backend)) where
      symbolToField = OutdoorPetId
    instance SymbolToField "ownerId" (OutdoorPetGeneric backend) (Key (PersonGeneric backend)) where
      symbolToField = OutdoorPetOwnerId
    instance SymbolToField "collar" (OutdoorPetGeneric backend) PetCollar where
      symbolToField = OutdoorPetCollar
    instance SymbolToField "type" (OutdoorPetGeneric backend) PetType where
      symbolToField = OutdoorPetType
    instance SymbolToField "id" (UserPTGeneric backend) (Key (UserPTGeneric backend)) where
      symbolToField = UserPTId
    instance SymbolToField "ident" (UserPTGeneric backend) Text where
      symbolToField = UserPTIdent
    instance SymbolToField "password" (UserPTGeneric backend) (Maybe Text) where
      symbolToField = UserPTPassword
    instance SymbolToField "id" (EmailPTGeneric backend) (Key (EmailPTGeneric backend)) where
      symbolToField = EmailPTId
    instance SymbolToField "email" (EmailPTGeneric backend) Text where
      symbolToField = EmailPTEmail
    instance SymbolToField "user" (EmailPTGeneric backend) (Maybe (Key (UserPTGeneric backend))) where
      symbolToField = EmailPTUser
    instance SymbolToField "verkey" (EmailPTGeneric backend) (Maybe Text) where
      symbolToField = EmailPTVerkey
    instance SymbolToField "id" (UpsertGeneric backend) (Key (UpsertGeneric backend)) where
      symbolToField = UpsertId
    instance SymbolToField "email" (UpsertGeneric backend) Text where
      symbolToField = UpsertEmail
    instance SymbolToField "attr" (UpsertGeneric backend) Text where
      symbolToField = UpsertAttr
    instance SymbolToField "extra" (UpsertGeneric backend) Text where
      symbolToField = UpsertExtra
    instance SymbolToField "age" (UpsertGeneric backend) Int where
      symbolToField = UpsertAge
    instance SymbolToField "id" (UpsertByGeneric backend) (Key (UpsertByGeneric backend)) where
      symbolToField = UpsertById
    instance SymbolToField "email" (UpsertByGeneric backend) Text where
      symbolToField = UpsertByEmail
    instance SymbolToField "city" (UpsertByGeneric backend) Text where
      symbolToField = UpsertByCity
    instance SymbolToField "attr" (UpsertByGeneric backend) Text where
      symbolToField = UpsertByAttr
    instance SymbolToField "id" (StrictGeneric backend) (Key (StrictGeneric backend)) where
      symbolToField = StrictId
    instance SymbolToField "yes" (StrictGeneric backend) Int where
      symbolToField = StrictYes
    instance SymbolToField "no" (StrictGeneric backend) Int where
      symbolToField = StrictNo
    instance SymbolToField "def" (StrictGeneric backend) Int where
      symbolToField = StrictDef
    instance SymbolToField "id" (DudeWeirdColumnsGeneric backend) (Key (DudeWeirdColumnsGeneric backend)) where
      symbolToField = DudeWeirdColumnsId
    instance SymbolToField "name" (DudeWeirdColumnsGeneric backend) Text where
      symbolToField = DudeWeirdColumnsName
    instance SymbolToField "id" (RelationshipGeneric backend) (Key (RelationshipGeneric backend)) where
      symbolToField = RelationshipId
    instance SymbolToField "name" (RelationshipGeneric backend) String where
      symbolToField = RelationshipName
    instance SymbolToField "parent" (RelationshipGeneric backend) (Maybe (Key (RelationshipGeneric backend))) where
      symbolToField = RelationshipParent
    instance SymbolToField "id" (MutAGeneric backend) (Key (MutAGeneric backend)) where
      symbolToField = MutAId
    instance SymbolToField "mutB" (MutAGeneric backend) (Key (MutBGeneric backend)) where
      symbolToField = MutAMutB
    instance SymbolToField "id" (MutBGeneric backend) (Key (MutBGeneric backend)) where
      symbolToField = MutBId
    instance SymbolToField "mutA" (MutBGeneric backend) (Key (MutAGeneric backend)) where
      symbolToField = MutBMutA
    instance PersistStoreWrite backend =>
             SafeToInsert (PersonGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (Person1Generic backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (PersonMaybeAgeGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (PersonMayGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (PetGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (MaybeOwnedPetGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (NeedsPetGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (OutdoorPetGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (UserPTGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (EmailPTGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (UpsertGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (UpsertByGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (StrictGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (DudeWeirdColumnsGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (RelationshipGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (MutAGeneric backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (MutBGeneric backend)
    entityDefListFortestMigrate :: [EntityDef]
    entityDefListFortestMigrate
      = [entityDef (Proxy :: Proxy Person),
         entityDef (Proxy :: Proxy Person1),
         entityDef (Proxy :: Proxy PersonMaybeAge),
         entityDef (Proxy :: Proxy PersonMay),
         entityDef (Proxy :: Proxy Pet),
         entityDef (Proxy :: Proxy MaybeOwnedPet),
         entityDef (Proxy :: Proxy NeedsPet),
         entityDef (Proxy :: Proxy OutdoorPet),
         entityDef (Proxy :: Proxy UserPT),
         entityDef (Proxy :: Proxy EmailPT),
         entityDef (Proxy :: Proxy Upsert),
         entityDef (Proxy :: Proxy UpsertBy),
         entityDef (Proxy :: Proxy Strict),
         entityDef (Proxy :: Proxy DudeWeirdColumns),
         entityDef (Proxy :: Proxy Relationship),
         entityDef (Proxy :: Proxy MutA), entityDef (Proxy :: Proxy MutB)]
    testMigrate :: Migration
    testMigrate = migrateModels entityDefListFortestMigrate
src/PersistentTestModels.hs:(141,27)-(152,2): Splicing expression
    template-haskell:Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \NoPrefix1\n\
      \    someFieldName Int\n\
      \NoPrefix2\n\
      \    someOtherFieldName Int\n\
      \    unprefixedRef NoPrefix1Id\n\
      \+NoPrefixSum\n\
      \    unprefixedLeft Int\n\
      \    unprefixedRight String\n\
      \    deriving Show Eq\n\
      \\n"
  ======>
    [Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefix1"# 9))
          (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix1"# 10))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix1Id"# 11))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "someFieldName"# 13))
          (FieldNameDB (Data.Text.unpackCStringLen# "some_field_name"# 15))
          [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefix2"# 9))
          (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix2"# 10))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix2Id"# 11))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS
             (Data.Text.unpackCStringLen# "someOtherFieldName"# 18))
          (FieldNameDB
             (Data.Text.unpackCStringLen# "some_other_field_name"# 21))
          [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedRef"# 13))
          (FieldNameDB (Data.Text.unpackCStringLen# "unprefixed_ref"# 14)) []
          True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix1Id"# 11))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefixSum"# 11))
          (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix_sum"# 13))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon
                   Nothing (Data.Text.unpackCStringLen# "NoPrefixSumId"# 13))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] []
          [Data.Text.unpackCStringLen# "Show"# 4,
           Data.Text.unpackCStringLen# "Eq"# 2]
          Data.Map.Internal.Tip True Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedLeft"# 14))
          (FieldNameDB (Data.Text.unpackCStringLen# "unprefixed_left"# 15))
          [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedRight"# 15))
          (FieldNameDB (Data.Text.unpackCStringLen# "unprefixed_right"# 16))
          [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "String"# 6))
          (FieldCascade Nothing Nothing) Nothing Nothing]]
src/PersistentTestModels.hs:(134,1)-(152,2): Splicing declarations
    share
      [mkPersist
         persistSettings
           {mpsPrefixFields = False, mpsFieldLabelModifier = \ _ _ -> "",
            mpsConstraintLabelModifier = \ _ _ -> "", mpsGeneric = True},
       mkMigrate "noPrefixMigrate"]
      ([Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefix1"# 9))
             (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix1"# 10))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix1Id"# 11))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "someFieldName"# 13))
             (FieldNameDB (Data.Text.unpackCStringLen# "some_field_name"# 15))
             [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefix2"# 9))
             (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix2"# 10))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix2Id"# 11))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS
                (Data.Text.unpackCStringLen# "someOtherFieldName"# 18))
             (FieldNameDB
                (Data.Text.unpackCStringLen# "some_other_field_name"# 21))
             [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedRef"# 13))
             (FieldNameDB (Data.Text.unpackCStringLen# "unprefixed_ref"# 14)) []
             True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix1Id"# 11))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefixSum"# 11))
             (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix_sum"# 13))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon
                      Nothing (Data.Text.unpackCStringLen# "NoPrefixSumId"# 13))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] []
             [Data.Text.unpackCStringLen# "Show"# 4,
              Data.Text.unpackCStringLen# "Eq"# 2]
             Data.Map.Internal.Tip True Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedLeft"# 14))
             (FieldNameDB (Data.Text.unpackCStringLen# "unprefixed_left"# 15))
             [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedRight"# 15))
             (FieldNameDB (Data.Text.unpackCStringLen# "unprefixed_right"# 16))
             [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "String"# 6))
             (FieldCascade Nothing Nothing) Nothing Nothing]])
  ======>
    instance PersistStore backend =>
             PersistField (NoPrefix1Generic backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["someFieldName"]
    instance PersistStore backend =>
             PersistFieldSql (NoPrefix1Generic backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (NoPrefix2Generic backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["someOtherFieldName", "unprefixedRef"]
    instance PersistStore backend =>
             PersistFieldSql (NoPrefix2Generic backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (NoPrefixSumGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["unprefixedLeft", "unprefixedRight"]
    instance PersistStore backend =>
             PersistFieldSql (NoPrefixSumGeneric backend) where
      sqlType _ = SqlString
    type NoPrefix1 = NoPrefix1Generic SqlBackend
    data NoPrefix1Generic backend = NoPrefix1 {someFieldName :: !Int}
    type NoPrefix1Id = Key NoPrefix1
    instance PersistStore backend =>
             PersistEntity (NoPrefix1Generic backend) where
      type PersistEntityBackend (NoPrefix1Generic backend) = backend
      data Unique (NoPrefix1Generic backend)
      newtype Key (NoPrefix1Generic backend)
        = NoPrefix1Key {unNoPrefix1Key :: (BackendKey backend)}
      data EntityField (NoPrefix1Generic backend) typ
        = (typ ~ Key (NoPrefix1Generic backend)) => NoPrefix1Id |
          (typ ~ Int) => SomeFieldName
      keyToValues
        = ((: [])
             . (toPersistValue . (\ NoPrefix1Key {unNoPrefix1Key = x} -> x)))
      keyFromValues
        = (fmap NoPrefix1Key
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5FZm
        = ((Entity <$> fromField_a5FZm NoPrefix1Id)
             <*> (pure NoPrefix1 <*> fromField_a5FZm SomeFieldName))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefix1"# 9))
            (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix1"# 10))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix1Id"# 11))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "someFieldName"#
                                                                                                                                                                     13),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "some_field_name"#
                                                                                                                                                                15),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "NoPrefix1Id"#
                                                                                                                                                    11))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (NoPrefix1 x_a5FZb) = [toPersistValue x_a5FZb]
      fromPersistValues [x1_a5FZd]
        = NoPrefix1
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "no_prefix1"# 10)
                    (Data.Text.unpackCStringLen# "someFieldName"# 13))
                 . fromPersistValue)
                x1_a5FZd
      fromPersistValues x_a5FZc
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "NoPrefix1: fromPersistValues failed on: "# 40)
                 (Data.Text.Internal.pack $ show x_a5FZc))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (NoPrefix1 _someFieldName_a5FZe) = []
      persistFieldDef NoPrefix1Id
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix1Id"# 11))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef SomeFieldName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy NoPrefix1)
            (FieldNameHS (Data.Text.unpackCStringLen# "someFieldName"# 13))
      persistIdField = NoPrefix1Id
      fieldLens NoPrefix1Id
        = lensPTH
            entityKey
            (\ (Entity _ value_a5FZg) key_a5FZh
               -> Entity key_a5FZh value_a5FZg)
      fieldLens SomeFieldName
        = lensPTH
            ((\ NoPrefix1 {someFieldName = x} -> x) . entityVal)
            (\ (Entity key_a5FZi value_a5FZj) x_a5FZk
               -> Entity
                    key_a5FZi
                    (case value_a5FZj of
                       NoPrefix1 {} -> NoPrefix1 {someFieldName = x_a5FZk}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (NoPrefix1Generic backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (NoPrefix1Generic backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (NoPrefix1Generic backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (NoPrefix1Generic backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (NoPrefix1Generic backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (NoPrefix1Generic backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (NoPrefix1Generic backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (NoPrefix1Generic backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (NoPrefix1Generic backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (NoPrefix1Generic backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (NoPrefix1Generic backend))
    instance PersistStore backend =>
             ToBackendKey backend (NoPrefix1Generic backend) where
      toBackendKey = \ NoPrefix1Key {unNoPrefix1Key = x} -> x
      fromBackendKey = NoPrefix1Key
    type NoPrefix2 = NoPrefix2Generic SqlBackend
    data NoPrefix2Generic backend
      = NoPrefix2 {someOtherFieldName :: !Int,
                   unprefixedRef :: !(Key (NoPrefix1Generic backend))}
    type NoPrefix2Id = Key NoPrefix2
    instance PersistStore backend =>
             PersistEntity (NoPrefix2Generic backend) where
      type PersistEntityBackend (NoPrefix2Generic backend) = backend
      data Unique (NoPrefix2Generic backend)
      newtype Key (NoPrefix2Generic backend)
        = NoPrefix2Key {unNoPrefix2Key :: (BackendKey backend)}
      data EntityField (NoPrefix2Generic backend) typ
        = (typ ~ Key (NoPrefix2Generic backend)) => NoPrefix2Id |
          (typ ~ Int) => SomeOtherFieldName |
          (typ ~ Key (NoPrefix1Generic backend)) => UnprefixedRef
      keyToValues
        = ((: [])
             . (toPersistValue . (\ NoPrefix2Key {unNoPrefix2Key = x} -> x)))
      keyFromValues
        = (fmap NoPrefix2Key
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5FZE
        = ((Entity <$> fromField_a5FZE NoPrefix2Id)
             <*>
               ((pure NoPrefix2 <*> fromField_a5FZE SomeOtherFieldName)
                  <*> fromField_a5FZE UnprefixedRef))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefix2"# 9))
            (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix2"# 10))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix2Id"# 11))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "someOtherFieldName"#
                                                                                                                                                                     18),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "some_other_field_name"#
                                                                                                                                                                21),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "unprefixedRef"#
                                                                                                                                                                     13),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "unprefixed_ref"#
                                                                                                                                                                14),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "NoPrefix1Id"#
                                                                                                                                                                  11),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy NoPrefix1Id),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "NoPrefix1"#
                                                                                                                                                                          9)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "NoPrefix2Id"#
                                                                                                                                                    11))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (NoPrefix2 x_a5FZn x_a5FZo)
        = [toPersistValue x_a5FZn, toPersistValue x_a5FZo]
      fromPersistValues [x1_a5FZq, x2_a5FZr]
        = NoPrefix2
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "no_prefix2"# 10)
                    (Data.Text.unpackCStringLen# "someOtherFieldName"# 18))
                 . fromPersistValue)
                x1_a5FZq
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "no_prefix2"# 10)
                    (Data.Text.unpackCStringLen# "unprefixedRef"# 13))
                 . fromPersistValue)
                x2_a5FZr
      fromPersistValues x_a5FZp
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "NoPrefix2: fromPersistValues failed on: "# 40)
                 (Data.Text.Internal.pack $ show x_a5FZp))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (NoPrefix2 _someOtherFieldName_a5FZs _unprefixedRef_a5FZt)
        = []
      persistFieldDef NoPrefix2Id
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "NoPrefix2Id"# 11))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef SomeOtherFieldName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy NoPrefix2)
            (FieldNameHS
               (Data.Text.unpackCStringLen# "someOtherFieldName"# 18))
      persistFieldDef UnprefixedRef
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy NoPrefix2)
            (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedRef"# 13))
      persistIdField = NoPrefix2Id
      fieldLens NoPrefix2Id
        = lensPTH
            entityKey
            (\ (Entity _ value_a5FZv) key_a5FZw
               -> Entity key_a5FZw value_a5FZv)
      fieldLens SomeOtherFieldName
        = lensPTH
            ((\ NoPrefix2 {someOtherFieldName = x} -> x) . entityVal)
            (\ (Entity key_a5FZx value_a5FZy) x_a5FZz
               -> Entity
                    key_a5FZx
                    (case value_a5FZy of
                       NoPrefix2 {unprefixedRef = unprefixedRef_a5FZB}
                         -> NoPrefix2
                              {someOtherFieldName = x_a5FZz, unprefixedRef = unprefixedRef}))
      fieldLens UnprefixedRef
        = lensPTH
            ((\ NoPrefix2 {unprefixedRef = x} -> x) . entityVal)
            (\ (Entity key_a5FZx value_a5FZy) x_a5FZz
               -> Entity
                    key_a5FZx
                    (case value_a5FZy of
                       NoPrefix2 {someOtherFieldName = someOtherFieldName_a5FZC}
                         -> NoPrefix2
                              {someOtherFieldName = someOtherFieldName,
                               unprefixedRef = x_a5FZz}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (NoPrefix2Generic backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (NoPrefix2Generic backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (NoPrefix2Generic backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (NoPrefix2Generic backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (NoPrefix2Generic backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (NoPrefix2Generic backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (NoPrefix2Generic backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (NoPrefix2Generic backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (NoPrefix2Generic backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (NoPrefix2Generic backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (NoPrefix2Generic backend))
    instance PersistStore backend =>
             ToBackendKey backend (NoPrefix2Generic backend) where
      toBackendKey = \ NoPrefix2Key {unNoPrefix2Key = x} -> x
      fromBackendKey = NoPrefix2Key
    type NoPrefixSum = NoPrefixSumGeneric SqlBackend
    data NoPrefixSumGeneric backend
      = UnprefixedLeftSum Int | UnprefixedRightSum String
      deriving stock (Show, Eq)
    type NoPrefixSumId = Key NoPrefixSum
    instance PersistStore backend =>
             PersistEntity (NoPrefixSumGeneric backend) where
      type PersistEntityBackend (NoPrefixSumGeneric backend) = backend
      data Unique (NoPrefixSumGeneric backend)
      newtype Key (NoPrefixSumGeneric backend)
        = NoPrefixSumKey {unNoPrefixSumKey :: (BackendKey backend)}
      data EntityField (NoPrefixSumGeneric backend) typ
        = (typ ~ Key (NoPrefixSumGeneric backend)) => NoPrefixSumId |
          (typ ~ Int) => UnprefixedLeft |
          (typ ~ String) => UnprefixedRight
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ NoPrefixSumKey {unNoPrefixSumKey = x} -> x)))
      keyFromValues
        = (fmap NoPrefixSumKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5FZP
        = error "tabulateEntityA does not make sense for sum type"
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "NoPrefixSum"# 11))
            (EntityNameDB (Data.Text.unpackCStringLen# "no_prefix_sum"# 13))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "NoPrefixSumId"# 13))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] []
            [Data.Text.unpackCStringLen# "Show"# 4,
             Data.Text.unpackCStringLen# "Eq"# 2]
            Data.Map.Internal.Tip True Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "unprefixedLeft"#
                                                                                                                                                                     14),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "unprefixed_left"#
                                                                                                                                                                15),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "unprefixedRight"#
                                                                                                                                                                     15),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "unprefixed_right"#
                                                                                                                                                                16),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "String"#
                                                                                                                                                                  6),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy String),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "NoPrefixSumId"#
                                                                                                                                                    13))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (UnprefixedLeftSum x_a5FZF)
        = [toPersistValue x_a5FZF, PersistNull]
      toPersistFields (UnprefixedRightSum x_a5FZG)
        = [PersistNull, toPersistValue x_a5FZG]
      fromPersistValues [x_a5FZH, PersistNull]
        | Database.Persist.TH.isNotNull x_a5FZH
        = (UnprefixedLeftSum `fmap` fromPersistValue x_a5FZH)
      fromPersistValues [PersistNull, x_a5FZI]
        | Database.Persist.TH.isNotNull x_a5FZI
        = (UnprefixedRightSum `fmap` fromPersistValue x_a5FZI)
      fromPersistValues _
        = Left
            ("Invalid fromPersistValues input: sum type with all nulls. Entity: "
               `mappend` Data.Text.unpackCStringLen# "NoPrefixSum"# 11)
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys _ = []
      persistFieldDef NoPrefixSumId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "NoPrefixSumId"# 13))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef UnprefixedLeft
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy NoPrefixSum)
            (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedLeft"# 14))
      persistFieldDef UnprefixedRight
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy NoPrefixSum)
            (FieldNameHS (Data.Text.unpackCStringLen# "unprefixedRight"# 15))
      persistIdField = NoPrefixSumId
      fieldLens NoPrefixSumId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5FZK) key_a5FZL
               -> Entity key_a5FZL value_a5FZK)
      fieldLens UnprefixedLeft
        = lensPTH
            (\ (Entity _ value_a5FZN)
               -> case value_a5FZN of
                    UnprefixedLeftSum x_a5FZO -> x_a5FZO
                    _ -> error "Tried to use fieldLens on a Sum type")
            (\ (Entity key_a5FZM _) x_a5FZO
               -> Entity key_a5FZM (UnprefixedLeftSum x_a5FZO))
      fieldLens UnprefixedRight
        = lensPTH
            (\ (Entity _ value_a5FZN)
               -> case value_a5FZN of
                    UnprefixedRightSum x_a5FZO -> x_a5FZO
                    _ -> error "Tried to use fieldLens on a Sum type")
            (\ (Entity key_a5FZM _) x_a5FZO
               -> Entity key_a5FZM (UnprefixedRightSum x_a5FZO))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (NoPrefixSumGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (NoPrefixSumGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (NoPrefixSumGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (NoPrefixSumGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (NoPrefixSumGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (NoPrefixSumGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (NoPrefixSumGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (NoPrefixSumGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (NoPrefixSumGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (NoPrefixSumGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (NoPrefixSumGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (NoPrefixSumGeneric backend) where
      toBackendKey = \ NoPrefixSumKey {unNoPrefixSumKey = x} -> x
      fromBackendKey = NoPrefixSumKey
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NoPrefix1Generic backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (NoPrefix1Generic backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NoPrefix1Generic backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (NoPrefix1Generic backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NoPrefix2Generic backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (NoPrefix2Generic backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NoPrefix2Generic backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (NoPrefix2Generic backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NoPrefixSumGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (NoPrefixSumGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (NoPrefixSumGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (NoPrefixSumGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance SymbolToField "id" (NoPrefix1Generic backend) (Key (NoPrefix1Generic backend)) where
      symbolToField = NoPrefix1Id
    instance SymbolToField "someFieldName" (NoPrefix1Generic backend) Int where
      symbolToField = SomeFieldName
    instance SymbolToField "id" (NoPrefix2Generic backend) (Key (NoPrefix2Generic backend)) where
      symbolToField = NoPrefix2Id
    instance SymbolToField "someOtherFieldName" (NoPrefix2Generic backend) Int where
      symbolToField = SomeOtherFieldName
    instance SymbolToField "unprefixedRef" (NoPrefix2Generic backend) (Key (NoPrefix1Generic backend)) where
      symbolToField = UnprefixedRef
    instance SymbolToField "id" (NoPrefixSumGeneric backend) (Key (NoPrefixSumGeneric backend)) where
      symbolToField = NoPrefixSumId
    instance SymbolToField "unprefixedLeft" (NoPrefixSumGeneric backend) Int where
      symbolToField = UnprefixedLeft
    instance SymbolToField "unprefixedRight" (NoPrefixSumGeneric backend) String where
      symbolToField = UnprefixedRight
    instance PersistStoreWrite backend =>
             SafeToInsert (NoPrefix1Generic backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (NoPrefix2Generic backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (NoPrefixSumGeneric backend)
    entityDefListFornoPrefixMigrate :: [EntityDef]
    entityDefListFornoPrefixMigrate
      = [entityDef (Proxy :: Proxy NoPrefix1),
         entityDef (Proxy :: Proxy NoPrefix2),
         entityDef (Proxy :: Proxy NoPrefixSum)]
    noPrefixMigrate :: Migration
    noPrefixMigrate = migrateModels entityDefListFornoPrefixMigrate
src/PersistentTestModels.hs:(173,27)-(183,2): Splicing expression
    template-haskell:Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \CustomPrefix1\n\
      \    customFieldName Int\n\
      \CustomPrefix2\n\
      \    otherCustomFieldName Int\n\
      \    customPrefixedRef CustomPrefix1Id\n\
      \+CustomPrefixSum\n\
      \    customPrefixedLeft Int\n\
      \    customPrefixedRight String\n\
      \    deriving Show Eq\n"
  ======>
    [Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "CustomPrefix1"# 13))
          (EntityNameDB (Data.Text.unpackCStringLen# "custom_prefix1"# 14))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon
                   Nothing (Data.Text.unpackCStringLen# "CustomPrefix1Id"# 15))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "customFieldName"# 15))
          (FieldNameDB (Data.Text.unpackCStringLen# "custom_field_name"# 17))
          [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "CustomPrefix2"# 13))
          (EntityNameDB (Data.Text.unpackCStringLen# "custom_prefix2"# 14))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon
                   Nothing (Data.Text.unpackCStringLen# "CustomPrefix2Id"# 15))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS
             (Data.Text.unpackCStringLen# "otherCustomFieldName"# 20))
          (FieldNameDB
             (Data.Text.unpackCStringLen# "other_custom_field_name"# 23))
          [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "customPrefixedRef"# 17))
          (FieldNameDB
             (Data.Text.unpackCStringLen# "custom_prefixed_ref"# 19))
          [] True
          (FTTypeCon
             Nothing (Data.Text.unpackCStringLen# "CustomPrefix1Id"# 15))
          (FieldCascade Nothing Nothing) Nothing Nothing],
     Database.Persist.Quasi.Internal.UnboundEntityDef
       []
       (Database.Persist.Quasi.Internal.DefaultKey
          (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "CustomPrefixSum"# 15))
          (EntityNameDB
             (Data.Text.unpackCStringLen# "custom_prefix_sum"# 17))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon
                   Nothing (Data.Text.unpackCStringLen# "CustomPrefixSumId"# 17))
                SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                Nothing True))
          [] [] [] []
          [Data.Text.unpackCStringLen# "Show"# 4,
           Data.Text.unpackCStringLen# "Eq"# 2]
          Data.Map.Internal.Tip True Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS
             (Data.Text.unpackCStringLen# "customPrefixedLeft"# 18))
          (FieldNameDB
             (Data.Text.unpackCStringLen# "custom_prefixed_left"# 20))
          [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS
             (Data.Text.unpackCStringLen# "customPrefixedRight"# 19))
          (FieldNameDB
             (Data.Text.unpackCStringLen# "custom_prefixed_right"# 21))
          [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "String"# 6))
          (FieldCascade Nothing Nothing) Nothing Nothing]]
src/PersistentTestModels.hs:(160,1)-(183,2): Splicing declarations
    share
      [mkPersist
         persistSettings
           {mpsFieldLabelModifier = \ entity_a5JDu field_a5JDv
                                      -> case entity_a5JDu of
                                           "CustomPrefix1" -> append "_cp1" field_a5JDv
                                           "CustomPrefix2" -> append "_cp2" field_a5JDv
                                           _ -> error "should not be called",
            mpsConstraintLabelModifier = \ entity_a5JDy field_a5JDz
                                           -> case entity_a5JDy of
                                                "CustomPrefix1" -> append "CP1" field_a5JDz
                                                "CustomPrefix2" -> append "CP2" field_a5JDz
                                                "CustomPrefixSum" -> append "CP" field_a5JDz
                                                _ -> error "should not be called",
            mpsGeneric = True},
       mkMigrate "customPrefixMigrate"]
      ([Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "CustomPrefix1"# 13))
             (EntityNameDB (Data.Text.unpackCStringLen# "custom_prefix1"# 14))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon
                      Nothing (Data.Text.unpackCStringLen# "CustomPrefix1Id"# 15))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "customFieldName"# 15))
             (FieldNameDB (Data.Text.unpackCStringLen# "custom_field_name"# 17))
             [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "CustomPrefix2"# 13))
             (EntityNameDB (Data.Text.unpackCStringLen# "custom_prefix2"# 14))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon
                      Nothing (Data.Text.unpackCStringLen# "CustomPrefix2Id"# 15))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS
                (Data.Text.unpackCStringLen# "otherCustomFieldName"# 20))
             (FieldNameDB
                (Data.Text.unpackCStringLen# "other_custom_field_name"# 23))
             [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "customPrefixedRef"# 17))
             (FieldNameDB
                (Data.Text.unpackCStringLen# "custom_prefixed_ref"# 19))
             [] True
             (FTTypeCon
                Nothing (Data.Text.unpackCStringLen# "CustomPrefix1Id"# 15))
             (FieldCascade Nothing Nothing) Nothing Nothing],
        Database.Persist.Quasi.Internal.UnboundEntityDef
          []
          (Database.Persist.Quasi.Internal.DefaultKey
             (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2)))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "CustomPrefixSum"# 15))
             (EntityNameDB
                (Data.Text.unpackCStringLen# "custom_prefix_sum"# 17))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon
                      Nothing (Data.Text.unpackCStringLen# "CustomPrefixSumId"# 17))
                   SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                   Nothing True))
             [] [] [] []
             [Data.Text.unpackCStringLen# "Show"# 4,
              Data.Text.unpackCStringLen# "Eq"# 2]
             Data.Map.Internal.Tip True Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS
                (Data.Text.unpackCStringLen# "customPrefixedLeft"# 18))
             (FieldNameDB
                (Data.Text.unpackCStringLen# "custom_prefixed_left"# 20))
             [] True (FTTypeCon Nothing (Data.Text.unpackCStringLen# "Int"# 3))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS
                (Data.Text.unpackCStringLen# "customPrefixedRight"# 19))
             (FieldNameDB
                (Data.Text.unpackCStringLen# "custom_prefixed_right"# 21))
             [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "String"# 6))
             (FieldCascade Nothing Nothing) Nothing Nothing]])
  ======>
    instance PersistStore backend =>
             PersistField (CustomPrefix1Generic backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["customFieldName"]
    instance PersistStore backend =>
             PersistFieldSql (CustomPrefix1Generic backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (CustomPrefix2Generic backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["otherCustomFieldName", "customPrefixedRef"]
    instance PersistStore backend =>
             PersistFieldSql (CustomPrefix2Generic backend) where
      sqlType _ = SqlString
    instance PersistStore backend =>
             PersistField (CustomPrefixSumGeneric backend) where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["customPrefixedLeft", "customPrefixedRight"]
    instance PersistStore backend =>
             PersistFieldSql (CustomPrefixSumGeneric backend) where
      sqlType _ = SqlString
    type CustomPrefix1 = CustomPrefix1Generic SqlBackend
    data CustomPrefix1Generic backend
      = CustomPrefix1 {_cp1CustomFieldName :: !Int}
    type CustomPrefix1Id = Key CustomPrefix1
    instance PersistStore backend =>
             PersistEntity (CustomPrefix1Generic backend) where
      type PersistEntityBackend (CustomPrefix1Generic backend) = backend
      data Unique (CustomPrefix1Generic backend)
      newtype Key (CustomPrefix1Generic backend)
        = CustomPrefix1Key {unCustomPrefix1Key :: (BackendKey backend)}
      data EntityField (CustomPrefix1Generic backend) typ
        = (typ ~ Key (CustomPrefix1Generic backend)) => CustomPrefix1Id |
          (typ ~ Int) => CP1CustomFieldName
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ CustomPrefix1Key {unCustomPrefix1Key = x} -> x)))
      keyFromValues
        = (fmap CustomPrefix1Key
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5JYP
        = ((Entity <$> fromField_a5JYP CustomPrefix1Id)
             <*> (pure CustomPrefix1 <*> fromField_a5JYP CP1CustomFieldName))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "CustomPrefix1"# 13))
            (EntityNameDB (Data.Text.unpackCStringLen# "custom_prefix1"# 14))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "CustomPrefix1Id"# 15))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "customFieldName"#
                                                                                                                                                                     15),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "custom_field_name"#
                                                                                                                                                                17),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "CustomPrefix1Id"#
                                                                                                                                                    15))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (CustomPrefix1 x_a5JYD) = [toPersistValue x_a5JYD]
      fromPersistValues [x1_a5JYF]
        = CustomPrefix1
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "custom_prefix1"# 14)
                    (Data.Text.unpackCStringLen# "customFieldName"# 15))
                 . fromPersistValue)
                x1_a5JYF
      fromPersistValues x_a5JYE
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "CustomPrefix1: fromPersistValues failed on: "# 44)
                 (Data.Text.Internal.pack $ show x_a5JYE))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (CustomPrefix1 _customFieldName_a5JYG) = []
      persistFieldDef CustomPrefix1Id
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "CustomPrefix1Id"# 15))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef CP1CustomFieldName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy CustomPrefix1)
            (FieldNameHS (Data.Text.unpackCStringLen# "customFieldName"# 15))
      persistIdField = CustomPrefix1Id
      fieldLens CustomPrefix1Id
        = lensPTH
            entityKey
            (\ (Entity _ value_a5JYJ) key_a5JYK
               -> Entity key_a5JYK value_a5JYJ)
      fieldLens CP1CustomFieldName
        = lensPTH
            ((\ CustomPrefix1 {_cp1CustomFieldName = x} -> x) . entityVal)
            (\ (Entity key_a5JYL value_a5JYM) x_a5JYN
               -> Entity
                    key_a5JYL
                    (case value_a5JYM of
                       CustomPrefix1 {} -> CustomPrefix1 {_cp1CustomFieldName = x_a5JYN}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (CustomPrefix1Generic backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (CustomPrefix1Generic backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (CustomPrefix1Generic backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (CustomPrefix1Generic backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (CustomPrefix1Generic backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (CustomPrefix1Generic backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (CustomPrefix1Generic backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (CustomPrefix1Generic backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (CustomPrefix1Generic backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (CustomPrefix1Generic backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (CustomPrefix1Generic backend))
    instance PersistStore backend =>
             ToBackendKey backend (CustomPrefix1Generic backend) where
      toBackendKey = \ CustomPrefix1Key {unCustomPrefix1Key = x} -> x
      fromBackendKey = CustomPrefix1Key
    type CustomPrefix2 = CustomPrefix2Generic SqlBackend
    data CustomPrefix2Generic backend
      = CustomPrefix2 {_cp2OtherCustomFieldName :: !Int,
                       _cp2CustomPrefixedRef :: !(Key (CustomPrefix1Generic backend))}
    type CustomPrefix2Id = Key CustomPrefix2
    instance PersistStore backend =>
             PersistEntity (CustomPrefix2Generic backend) where
      type PersistEntityBackend (CustomPrefix2Generic backend) = backend
      data Unique (CustomPrefix2Generic backend)
      newtype Key (CustomPrefix2Generic backend)
        = CustomPrefix2Key {unCustomPrefix2Key :: (BackendKey backend)}
      data EntityField (CustomPrefix2Generic backend) typ
        = (typ ~ Key (CustomPrefix2Generic backend)) => CustomPrefix2Id |
          (typ ~ Int) => CP2OtherCustomFieldName |
          (typ ~ Key (CustomPrefix1Generic backend)) => CP2CustomPrefixedRef
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ CustomPrefix2Key {unCustomPrefix2Key = x} -> x)))
      keyFromValues
        = (fmap CustomPrefix2Key
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5JZs
        = ((Entity <$> fromField_a5JZs CustomPrefix2Id)
             <*>
               ((pure CustomPrefix2 <*> fromField_a5JZs CP2OtherCustomFieldName)
                  <*> fromField_a5JZs CP2CustomPrefixedRef))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "CustomPrefix2"# 13))
            (EntityNameDB (Data.Text.unpackCStringLen# "custom_prefix2"# 14))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "CustomPrefix2Id"# 15))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "otherCustomFieldName"#
                                                                                                                                                                     20),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "other_custom_field_name"#
                                                                                                                                                                23),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "customPrefixedRef"#
                                                                                                                                                                     17),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "custom_prefixed_ref"#
                                                                                                                                                                19),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "CustomPrefix1Id"#
                                                                                                                                                                  15),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy CustomPrefix1Id),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = ForeignRef
                                                                                                                                                                    (EntityNameHS
                                                                                                                                                                       (Data.Text.unpackCStringLen#
                                                                                                                                                                          "CustomPrefix1"#
                                                                                                                                                                          13)),
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "CustomPrefix2Id"#
                                                                                                                                                    15))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (CustomPrefix2 x_a5JZb x_a5JZc)
        = [toPersistValue x_a5JZb, toPersistValue x_a5JZc]
      fromPersistValues [x1_a5JZe, x2_a5JZf]
        = CustomPrefix2
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "custom_prefix2"# 14)
                    (Data.Text.unpackCStringLen# "otherCustomFieldName"# 20))
                 . fromPersistValue)
                x1_a5JZe
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "custom_prefix2"# 14)
                    (Data.Text.unpackCStringLen# "customPrefixedRef"# 17))
                 . fromPersistValue)
                x2_a5JZf
      fromPersistValues x_a5JZd
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "CustomPrefix2: fromPersistValues failed on: "# 44)
                 (Data.Text.Internal.pack $ show x_a5JZd))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (CustomPrefix2 _otherCustomFieldName_a5JZg
                       _customPrefixedRef_a5JZh)
        = []
      persistFieldDef CustomPrefix2Id
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "CustomPrefix2Id"# 15))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef CP2OtherCustomFieldName
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy CustomPrefix2)
            (FieldNameHS
               (Data.Text.unpackCStringLen# "otherCustomFieldName"# 20))
      persistFieldDef CP2CustomPrefixedRef
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy CustomPrefix2)
            (FieldNameHS (Data.Text.unpackCStringLen# "customPrefixedRef"# 17))
      persistIdField = CustomPrefix2Id
      fieldLens CustomPrefix2Id
        = lensPTH
            entityKey
            (\ (Entity _ value_a5JZj) key_a5JZk
               -> Entity key_a5JZk value_a5JZj)
      fieldLens CP2OtherCustomFieldName
        = lensPTH
            ((\ CustomPrefix2 {_cp2OtherCustomFieldName = x} -> x) . entityVal)
            (\ (Entity key_a5JZl value_a5JZm) x_a5JZn
               -> Entity
                    key_a5JZl
                    (case value_a5JZm of
                       CustomPrefix2 {_cp2CustomPrefixedRef = _cp2CustomPrefixedRef_a5JZp}
                         -> CustomPrefix2
                              {_cp2OtherCustomFieldName = x_a5JZn,
                               _cp2CustomPrefixedRef = _cp2CustomPrefixedRef}))
      fieldLens CP2CustomPrefixedRef
        = lensPTH
            ((\ CustomPrefix2 {_cp2CustomPrefixedRef = x} -> x) . entityVal)
            (\ (Entity key_a5JZl value_a5JZm) x_a5JZn
               -> Entity
                    key_a5JZl
                    (case value_a5JZm of
                       CustomPrefix2 {_cp2OtherCustomFieldName = _cp2OtherCustomFieldName_a5JZq}
                         -> CustomPrefix2
                              {_cp2OtherCustomFieldName = _cp2OtherCustomFieldName,
                               _cp2CustomPrefixedRef = x_a5JZn}))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (CustomPrefix2Generic backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (CustomPrefix2Generic backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (CustomPrefix2Generic backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (CustomPrefix2Generic backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (CustomPrefix2Generic backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (CustomPrefix2Generic backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (CustomPrefix2Generic backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (CustomPrefix2Generic backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (CustomPrefix2Generic backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (CustomPrefix2Generic backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (CustomPrefix2Generic backend))
    instance PersistStore backend =>
             ToBackendKey backend (CustomPrefix2Generic backend) where
      toBackendKey = \ CustomPrefix2Key {unCustomPrefix2Key = x} -> x
      fromBackendKey = CustomPrefix2Key
    type CustomPrefixSum = CustomPrefixSumGeneric SqlBackend
    data CustomPrefixSumGeneric backend
      = CPCustomPrefixedLeftSum Int | CPCustomPrefixedRightSum String
      deriving stock (Show, Eq)
    type CustomPrefixSumId = Key CustomPrefixSum
    instance PersistStore backend =>
             PersistEntity (CustomPrefixSumGeneric backend) where
      type PersistEntityBackend (CustomPrefixSumGeneric backend) = backend
      data Unique (CustomPrefixSumGeneric backend)
      newtype Key (CustomPrefixSumGeneric backend)
        = CustomPrefixSumKey {unCustomPrefixSumKey :: (BackendKey backend)}
      data EntityField (CustomPrefixSumGeneric backend) typ
        = (typ ~ Key (CustomPrefixSumGeneric backend)) =>
          CustomPrefixSumId |
          (typ ~ Int) => CPCustomPrefixedLeft |
          (typ ~ String) => CPCustomPrefixedRight
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ CustomPrefixSumKey {unCustomPrefixSumKey = x} -> x)))
      keyFromValues
        = (fmap CustomPrefixSumKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      tabulateEntityA fromField_a5JZN
        = error "tabulateEntityA does not make sense for sum type"
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "CustomPrefixSum"# 15))
            (EntityNameDB
               (Data.Text.unpackCStringLen# "custom_prefix_sum"# 17))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "CustomPrefixSumId"# 17))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
            [] [] [] []
            [Data.Text.unpackCStringLen# "Show"# 4,
             Data.Text.unpackCStringLen# "Eq"# 2]
            Data.Map.Internal.Tip True Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "customPrefixedLeft"#
                                                                                                                                                                     18),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "custom_prefixed_left"#
                                                                                                                                                                20),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "Int"#
                                                                                                                                                                  3),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy Int),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "customPrefixedRight"#
                                                                                                                                                                     19),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "custom_prefixed_right"#
                                                                                                                                                                21),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "String"#
                                                                                                                                                                  6),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy String),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                                                           (FieldDef
                                                                                                                                              (FieldNameHS
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "Id"#
                                                                                                                                                    2))
                                                                                                                                              (FieldNameDB
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "id"#
                                                                                                                                                    2))
                                                                                                                                              (FTTypeCon
                                                                                                                                                 Nothing
                                                                                                                                                 (Data.Text.unpackCStringLen#
                                                                                                                                                    "CustomPrefixSumId"#
                                                                                                                                                    17))
                                                                                                                                              SqlInt64
                                                                                                                                              []
                                                                                                                                              True
                                                                                                                                              NoReference
                                                                                                                                              (FieldCascade
                                                                                                                                                 Nothing
                                                                                                                                                 Nothing)
                                                                                                                                              Nothing
                                                                                                                                              Nothing
                                                                                                                                              True),
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (CPCustomPrefixedLeftSum x_a5JZw)
        = [toPersistValue x_a5JZw, PersistNull]
      toPersistFields (CPCustomPrefixedRightSum x_a5JZy)
        = [PersistNull, toPersistValue x_a5JZy]
      fromPersistValues [x_a5JZz, PersistNull]
        | Database.Persist.TH.isNotNull x_a5JZz
        = (CPCustomPrefixedLeftSum `fmap` fromPersistValue x_a5JZz)
      fromPersistValues [PersistNull, x_a5JZA]
        | Database.Persist.TH.isNotNull x_a5JZA
        = (CPCustomPrefixedRightSum `fmap` fromPersistValue x_a5JZA)
      fromPersistValues _
        = Left
            ("Invalid fromPersistValues input: sum type with all nulls. Entity: "
               `mappend` Data.Text.unpackCStringLen# "CustomPrefixSum"# 15)
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys _ = []
      persistFieldDef CustomPrefixSumId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon
                     Nothing (Data.Text.unpackCStringLen# "CustomPrefixSumId"# 17))
                  SqlInt64 [] True NoReference (FieldCascade Nothing Nothing) Nothing
                  Nothing True))
      persistFieldDef CPCustomPrefixedLeft
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy CustomPrefixSum)
            (FieldNameHS
               (Data.Text.unpackCStringLen# "customPrefixedLeft"# 18))
      persistFieldDef CPCustomPrefixedRight
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy CustomPrefixSum)
            (FieldNameHS
               (Data.Text.unpackCStringLen# "customPrefixedRight"# 19))
      persistIdField = CustomPrefixSumId
      fieldLens CustomPrefixSumId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5JZI) key_a5JZJ
               -> Entity key_a5JZJ value_a5JZI)
      fieldLens CPCustomPrefixedLeft
        = lensPTH
            (\ (Entity _ value_a5JZL)
               -> case value_a5JZL of
                    CPCustomPrefixedLeftSum x_a5JZM -> x_a5JZM
                    _ -> error "Tried to use fieldLens on a Sum type")
            (\ (Entity key_a5JZK _) x_a5JZM
               -> Entity key_a5JZK (CPCustomPrefixedLeftSum x_a5JZM))
      fieldLens CPCustomPrefixedRight
        = lensPTH
            (\ (Entity _ value_a5JZL)
               -> case value_a5JZL of
                    CPCustomPrefixedRightSum x_a5JZM -> x_a5JZM
                    _ -> error "Tried to use fieldLens on a Sum type")
            (\ (Entity key_a5JZK _) x_a5JZM
               -> Entity key_a5JZK (CPCustomPrefixedRightSum x_a5JZM))
    deriving stock instance Show (BackendKey backend) =>
                            Show (Key (CustomPrefixSumGeneric backend))
    deriving stock instance Read (BackendKey backend) =>
                            Read (Key (CustomPrefixSumGeneric backend))
    deriving newtype instance Eq (BackendKey backend) =>
                              Eq (Key (CustomPrefixSumGeneric backend))
    deriving newtype instance Ord (BackendKey backend) =>
                              Ord (Key (CustomPrefixSumGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.ToHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.ToHttpApiData (Key (CustomPrefixSumGeneric backend))
    deriving newtype instance Web.Internal.HttpApiData.FromHttpApiData (BackendKey backend) =>
                              Web.Internal.HttpApiData.FromHttpApiData (Key (CustomPrefixSumGeneric backend))
    deriving newtype instance Web.PathPieces.PathPiece (BackendKey backend) =>
                              Web.PathPieces.PathPiece (Key (CustomPrefixSumGeneric backend))
    deriving newtype instance PersistField (BackendKey backend) =>
                              PersistField (Key (CustomPrefixSumGeneric backend))
    deriving newtype instance PersistFieldSql (BackendKey backend) =>
                              PersistFieldSql (Key (CustomPrefixSumGeneric backend))
    deriving newtype instance ToJSON (BackendKey backend) =>
                              ToJSON (Key (CustomPrefixSumGeneric backend))
    deriving newtype instance FromJSON (BackendKey backend) =>
                              FromJSON (Key (CustomPrefixSumGeneric backend))
    instance PersistStore backend =>
             ToBackendKey backend (CustomPrefixSumGeneric backend) where
      toBackendKey = \ CustomPrefixSumKey {unCustomPrefixSumKey = x} -> x
      fromBackendKey = CustomPrefixSumKey
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (CustomPrefix1Generic backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (CustomPrefix1Generic backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (CustomPrefix1Generic backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (CustomPrefix1Generic backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (CustomPrefix2Generic backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (CustomPrefix2Generic backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (CustomPrefix2Generic backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (CustomPrefix2Generic backend) where
      requireUniquesP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (CustomPrefixSumGeneric backend)),
              PersistStoreWrite backend) =>
             OnlyOneUniqueKey (CustomPrefixSumGeneric backend) where
      onlyUniqueP _ = error "impossible"
    instance (GHC.TypeError.TypeError (NoUniqueKeysError (CustomPrefixSumGeneric backend)),
              PersistStoreWrite backend) =>
             AtLeastOneUniqueKey (CustomPrefixSumGeneric backend) where
      requireUniquesP _ = error "impossible"
    instance SymbolToField "id" (CustomPrefix1Generic backend) (Key (CustomPrefix1Generic backend)) where
      symbolToField = CustomPrefix1Id
    instance SymbolToField "customFieldName" (CustomPrefix1Generic backend) Int where
      symbolToField = CP1CustomFieldName
    instance SymbolToField "id" (CustomPrefix2Generic backend) (Key (CustomPrefix2Generic backend)) where
      symbolToField = CustomPrefix2Id
    instance SymbolToField "otherCustomFieldName" (CustomPrefix2Generic backend) Int where
      symbolToField = CP2OtherCustomFieldName
    instance SymbolToField "customPrefixedRef" (CustomPrefix2Generic backend) (Key (CustomPrefix1Generic backend)) where
      symbolToField = CP2CustomPrefixedRef
    instance SymbolToField "id" (CustomPrefixSumGeneric backend) (Key (CustomPrefixSumGeneric backend)) where
      symbolToField = CustomPrefixSumId
    instance SymbolToField "customPrefixedLeft" (CustomPrefixSumGeneric backend) Int where
      symbolToField = CPCustomPrefixedLeft
    instance SymbolToField "customPrefixedRight" (CustomPrefixSumGeneric backend) String where
      symbolToField = CPCustomPrefixedRight
    instance PersistStoreWrite backend =>
             SafeToInsert (CustomPrefix1Generic backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (CustomPrefix2Generic backend)
    instance PersistStoreWrite backend =>
             SafeToInsert (CustomPrefixSumGeneric backend)
    entityDefListForcustomPrefixMigrate :: [EntityDef]
    entityDefListForcustomPrefixMigrate
      = [entityDef (Proxy :: Proxy CustomPrefix1),
         entityDef (Proxy :: Proxy CustomPrefix2),
         entityDef (Proxy :: Proxy CustomPrefixSum)]
    customPrefixMigrate :: Migration
    customPrefixMigrate
      = migrateModels entityDefListForcustomPrefixMigrate
src/PersistentTestModels.hs:(193,27)-(200,2): Splicing expression
    template-haskell:Language.Haskell.TH.Quote.quoteExp
      persistLowerCase
      "\n\
      \\n\
      \Tree sql=trees\n\
      \  name String\n\
      \  parent String Maybe\n\
      \  Primary name\n\
      \  Foreign Tree fkparent parent\n"
  ======>
    [Database.Persist.Quasi.Internal.UnboundEntityDef
       [Database.Persist.Quasi.Internal.UnboundForeignDef
          (Database.Persist.Quasi.Internal.FieldListImpliedId
             (FieldNameHS (Data.Text.unpackCStringLen# "parent"# 6) NEL.:| []))
          (ForeignDef
             (EntityNameHS (Data.Text.unpackCStringLen# "Tree"# 4))
             (EntityNameDB (Data.Text.unpackCStringLen# "tree"# 4))
             (ConstraintNameHS (Data.Text.unpackCStringLen# "fkparent"# 8))
             (ConstraintNameDB (Data.Text.unpackCStringLen# "treefkparent"# 12))
             (FieldCascade Nothing Nothing) [] [] False True)]
       (Database.Persist.Quasi.Internal.NaturalKey
          (Database.Persist.Quasi.Internal.UnboundCompositeDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4) NEL.:| [])
             []))
       (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
          (EntityNameHS (Data.Text.unpackCStringLen# "Tree"# 4))
          (EntityNameDB (Data.Text.unpackCStringLen# "trees"# 5))
          (EntityIdField
             (FieldDef
                (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                (FTTypeCon Nothing (Data.Text.unpackCStringLen# "TreeId"# 6))
                (SqlOther (Data.Text.unpackCStringLen# "Primary Key"# 11)) [] True
                NoReference (FieldCascade Nothing Nothing) Nothing Nothing True))
          [Data.Text.unpackCStringLen# "sql=trees"# 9] []
          [UniqueDef
             (ConstraintNameHS
                (Data.Text.unpackCStringLen# "TreePrimaryKey"# 14))
             (ConstraintNameDB (Data.Text.unpackCStringLen# "primary_key"# 11))
             ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
               FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
                NEL.:| [])
             []]
          [] [] Data.Map.Internal.Tip False Nothing)
       [Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
          (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "String"# 6))
          (FieldCascade Nothing Nothing) Nothing Nothing,
        Database.Persist.Quasi.Internal.UnboundFieldDef
          (FieldNameHS (Data.Text.unpackCStringLen# "parent"# 6))
          (FieldNameDB (Data.Text.unpackCStringLen# "parent"# 6))
          [FieldAttrMaybe] True
          (FTTypeCon Nothing (Data.Text.unpackCStringLen# "String"# 6))
          (FieldCascade Nothing Nothing) Nothing Nothing]]
src/PersistentTestModels.hs:(191,1)-(200,2): Splicing declarations
    share
      [mkPersist
         persistSettings {mpsPrefixFields = False, mpsGeneric = False},
       mkMigrate "treeMigrate"]
      ([Database.Persist.Quasi.Internal.UnboundEntityDef
          [Database.Persist.Quasi.Internal.UnboundForeignDef
             (Database.Persist.Quasi.Internal.FieldListImpliedId
                (FieldNameHS (Data.Text.unpackCStringLen# "parent"# 6) NEL.:| []))
             (ForeignDef
                (EntityNameHS (Data.Text.unpackCStringLen# "Tree"# 4))
                (EntityNameDB (Data.Text.unpackCStringLen# "tree"# 4))
                (ConstraintNameHS (Data.Text.unpackCStringLen# "fkparent"# 8))
                (ConstraintNameDB (Data.Text.unpackCStringLen# "treefkparent"# 12))
                (FieldCascade Nothing Nothing) [] [] False True)]
          (Database.Persist.Quasi.Internal.NaturalKey
             (Database.Persist.Quasi.Internal.UnboundCompositeDef
                (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4) NEL.:| [])
                []))
          (persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
             (EntityNameHS (Data.Text.unpackCStringLen# "Tree"# 4))
             (EntityNameDB (Data.Text.unpackCStringLen# "trees"# 5))
             (EntityIdField
                (FieldDef
                   (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                   (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                   (FTTypeCon Nothing (Data.Text.unpackCStringLen# "TreeId"# 6))
                   (SqlOther (Data.Text.unpackCStringLen# "Primary Key"# 11)) [] True
                   NoReference (FieldCascade Nothing Nothing) Nothing Nothing True))
             [Data.Text.unpackCStringLen# "sql=trees"# 9] []
             [UniqueDef
                (ConstraintNameHS
                   (Data.Text.unpackCStringLen# "TreePrimaryKey"# 14))
                (ConstraintNameDB (Data.Text.unpackCStringLen# "primary_key"# 11))
                ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
                  FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
                   NEL.:| [])
                []]
             [] [] Data.Map.Internal.Tip False Nothing)
          [Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
             (FieldNameDB (Data.Text.unpackCStringLen# "name"# 4)) [] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "String"# 6))
             (FieldCascade Nothing Nothing) Nothing Nothing,
           Database.Persist.Quasi.Internal.UnboundFieldDef
             (FieldNameHS (Data.Text.unpackCStringLen# "parent"# 6))
             (FieldNameDB (Data.Text.unpackCStringLen# "parent"# 6))
             [FieldAttrMaybe] True
             (FTTypeCon Nothing (Data.Text.unpackCStringLen# "String"# 6))
             (FieldCascade Nothing Nothing) Nothing Nothing]])
  ======>
    instance PersistField Tree where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["name", "parent"]
    instance PersistFieldSql Tree where
      sqlType _ = SqlString
    data Tree = Tree {name :: !String, parent :: !(Maybe String)}
    fkparent :: Tree -> Maybe (Key Tree)
    fkparent record_mkForeignKeysComposite_a5MRz
      = fmap
          TreeKey
          (ghc-prim:GHC.Prim.coerce
             (parent record_mkForeignKeysComposite_a5MRz))
    type TreeId = Key Tree
    instance PersistEntity Tree where
      type PersistEntityBackend Tree = SqlBackend
      data Unique Tree = TreePrimaryKey String
      newtype Key Tree
        = TreeKey {unTreeKey :: String}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype Web.PathPieces.PathPiece
        deriving newtype Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Tree typ
        = (typ ~ TreeId) => TreeId |
          (typ ~ String) => Name |
          (typ ~ Maybe String) => Parent
      keyToValues record_a5MRA
        = [toPersistValue ((\ TreeKey {unTreeKey = x} -> x) record_a5MRA)]
      keyFromValues [x1_a5MRC]
        = TreeKey
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "trees"# 5)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x1_a5MRC
      keyFromValues x_a5MRB
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen# "Tree: keyFromValues failed on: "# 31)
                 (Data.Text.Internal.pack $ show x_a5MRB))
      keyFromRecordM
        = Just (\ Tree {name = name_a5MRM} -> TreeKey name_a5MRM)
      tabulateEntityA fromField_a5MRN
        = ((Entity <$> fromField_a5MRN TreeId)
             <*>
               ((pure Tree <*> fromField_a5MRN Name) <*> fromField_a5MRN Parent))
      entityDef _
        = persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.EntityDef
            (EntityNameHS (Data.Text.unpackCStringLen# "Tree"# 4))
            (EntityNameDB (Data.Text.unpackCStringLen# "trees"# 5))
            (EntityIdField
               (FieldDef
                  (FieldNameHS (Data.Text.unpackCStringLen# "Id"# 2))
                  (FieldNameDB (Data.Text.unpackCStringLen# "id"# 2))
                  (FTTypeCon Nothing (Data.Text.unpackCStringLen# "TreeId"# 6))
                  (SqlOther (Data.Text.unpackCStringLen# "Primary Key"# 11)) [] True
                  NoReference (FieldCascade Nothing Nothing) Nothing Nothing True))
            [Data.Text.unpackCStringLen# "sql=trees"# 9] []
            [UniqueDef
               (ConstraintNameHS
                  (Data.Text.unpackCStringLen# "TreePrimaryKey"# 14))
               (ConstraintNameDB (Data.Text.unpackCStringLen# "primary_key"# 11))
               ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
                 FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
                  NEL.:| [])
               []]
            [] [] Data.Map.Internal.Tip False Nothing
            {persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "name"#
                                                                                                                                                                     4),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "name"#
                                                                                                                                                                4),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "String"#
                                                                                                                                                                  6),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy String),
                                                                                                                                                 fieldAttrs = [],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False},
                                                                                                                                              FieldDef
                                                                                                                                                {fieldHaskell = FieldNameHS
                                                                                                                                                                  (Data.Text.unpackCStringLen#
                                                                                                                                                                     "parent"#
                                                                                                                                                                     6),
                                                                                                                                                 fieldDB = FieldNameDB
                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                "parent"#
                                                                                                                                                                6),
                                                                                                                                                 fieldType = FTTypeCon
                                                                                                                                                               Nothing
                                                                                                                                                               (Data.Text.unpackCStringLen#
                                                                                                                                                                  "String"#
                                                                                                                                                                  6),
                                                                                                                                                 fieldSqlType = sqlType
                                                                                                                                                                  (Proxy ::
                                                                                                                                                                     Proxy String),
                                                                                                                                                 fieldAttrs = [FieldAttrMaybe],
                                                                                                                                                 fieldStrict = True,
                                                                                                                                                 fieldReference = NoReference,
                                                                                                                                                 fieldCascade = FieldCascade
                                                                                                                                                                  Nothing
                                                                                                                                                                  Nothing,
                                                                                                                                                 fieldComments = Nothing,
                                                                                                                                                 fieldGenerated = Nothing,
                                                                                                                                                 fieldIsImplicitIdColumn = False}],
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityId = EntityIdNaturalKey
                                                                                                                                           CompositeDef
                                                                                                                                             {compositeFields = NEL.fromList
                                                                                                                                                                  [Database.Persist.TH.lookupEntityField
                                                                                                                                                                     (Proxy ::
                                                                                                                                                                        Proxy Tree)
                                                                                                                                                                     (FieldNameHS
                                                                                                                                                                        (Data.Text.unpackCStringLen#
                                                                                                                                                                           "name"#
                                                                                                                                                                           4))],
                                                                                                                                              compositeAttrs = []},
             persistent-2.14.6.3-957b10fe38a2b21c70e67e79cd638e0e93e82e7708339a93b0c67b99d7d382c5:Database.Persist.Types.Base.entityForeigns = [ForeignDef
                                                                                                                                                  (EntityNameHS
                                                                                                                                                     (Data.Text.unpackCStringLen#
                                                                                                                                                        "Tree"#
                                                                                                                                                        4))
                                                                                                                                                  (EntityNameDB
                                                                                                                                                     (Data.Text.unpackCStringLen#
                                                                                                                                                        "tree"#
                                                                                                                                                        4))
                                                                                                                                                  (ConstraintNameHS
                                                                                                                                                     (Data.Text.unpackCStringLen#
                                                                                                                                                        "fkparent"#
                                                                                                                                                        8))
                                                                                                                                                  (ConstraintNameDB
                                                                                                                                                     (Data.Text.unpackCStringLen#
                                                                                                                                                        "treefkparent"#
                                                                                                                                                        12))
                                                                                                                                                  (FieldCascade
                                                                                                                                                     Nothing
                                                                                                                                                     Nothing)
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  False
                                                                                                                                                  True
                                                                                                                                                  {foreignFields = [((FieldNameHS
                                                                                                                                                                        (Data.Text.unpackCStringLen#
                                                                                                                                                                           "parent"#
                                                                                                                                                                           6), 
                                                                                                                                                                      FieldNameDB
                                                                                                                                                                        (Data.Text.unpackCStringLen#
                                                                                                                                                                           "parent"#
                                                                                                                                                                           6)), 
                                                                                                                                                                     (FieldNameHS
                                                                                                                                                                        (Data.Text.unpackCStringLen#
                                                                                                                                                                           "name"#
                                                                                                                                                                           4), 
                                                                                                                                                                      FieldNameDB
                                                                                                                                                                        (Data.Text.unpackCStringLen#
                                                                                                                                                                           "name"#
                                                                                                                                                                           4)))],
                                                                                                                                                   foreignNullable = True,
                                                                                                                                                   foreignRefTableDBName = EntityNameDB
                                                                                                                                                                             (Data.Text.unpackCStringLen#
                                                                                                                                                                                "trees"#
                                                                                                                                                                                5)}]}
      toPersistFields (Tree x_a5MRr x_a5MRs)
        = [toPersistValue x_a5MRr, toPersistValue x_a5MRs]
      fromPersistValues [x1_a5MRu, x2_a5MRv]
        = Tree
            <$>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "trees"# 5)
                    (Data.Text.unpackCStringLen# "name"# 4))
                 . fromPersistValue)
                x1_a5MRu
            <*>
              (Database.Persist.TH.mapLeft
                 (fieldError
                    (Data.Text.unpackCStringLen# "trees"# 5)
                    (Data.Text.unpackCStringLen# "parent"# 6))
                 . fromPersistValue)
                x2_a5MRv
      fromPersistValues x_a5MRt
        = (Left
             $ mappend
                 (Data.Text.unpackCStringLen#
                    "Tree: fromPersistValues failed on: "# 35)
                 (Data.Text.Internal.pack $ show x_a5MRt))
      persistUniqueToFieldNames TreePrimaryKey {}
        = ((FieldNameHS (Data.Text.unpackCStringLen# "name"# 4), 
            FieldNameDB (Data.Text.unpackCStringLen# "name"# 4))
             NEL.:| [])
      persistUniqueToValues (TreePrimaryKey x_a5MRw)
        = [toPersistValue x_a5MRw]
      persistUniqueKeys (Tree _name_a5MRx _parent_a5MRy)
        = [TreePrimaryKey _name_a5MRx]
      persistFieldDef TreeId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdNaturalKey
               CompositeDef
                 {compositeFields = NEL.fromList
                                      [Database.Persist.TH.lookupEntityField
                                         (Proxy :: Proxy Tree)
                                         (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))],
                  compositeAttrs = []})
      persistFieldDef Name
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Tree)
            (FieldNameHS (Data.Text.unpackCStringLen# "name"# 4))
      persistFieldDef Parent
        = Database.Persist.TH.lookupEntityField
            (Proxy :: Proxy Tree)
            (FieldNameHS (Data.Text.unpackCStringLen# "parent"# 6))
      persistIdField = TreeId
      fieldLens TreeId
        = lensPTH
            entityKey
            (\ (Entity _ value_a5MRD) key_a5MRE
               -> Entity key_a5MRE value_a5MRD)
      fieldLens Name
        = lensPTH
            ((\ Tree {name = x} -> x) . entityVal)
            (\ (Entity key_a5MRF value_a5MRG) x_a5MRH
               -> Entity
                    key_a5MRF
                    (case value_a5MRG of
                       Tree {parent = parent_a5MRJ}
                         -> Tree {name = x_a5MRH, parent = parent}))
      fieldLens Parent
        = lensPTH
            ((\ Tree {parent = x} -> x) . entityVal)
            (\ (Entity key_a5MRF value_a5MRG) x_a5MRH
               -> Entity
                    key_a5MRF
                    (case value_a5MRG of
                       Tree {name = name_a5MRK} -> Tree {name = name, parent = x_a5MRH}))
    instance OnlyOneUniqueKey Tree where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Tree where
      requireUniquesP = (NEL.fromList . persistUniqueKeys)
    instance SymbolToField "id" Tree (Key Tree) where
      symbolToField = TreeId
    instance SymbolToField "name" Tree String where
      symbolToField = Name
    instance SymbolToField "parent" Tree (Maybe String) where
      symbolToField = Parent
    instance SafeToInsert Tree
    entityDefListFortreeMigrate :: [EntityDef]
    entityDefListFortreeMigrate = [entityDef (Proxy :: Proxy Tree)]
    treeMigrate :: Migration
    treeMigrate = migrateModels entityDefListFortreeMigrate

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:25:36: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
25 | share [mkPersist persistSettings { mpsGeneric = True },  mkMigrate "testMigrate"] [persistUpperCase|
   |                                    ^^^^^^^^^^

src/PersistentTestModels.hs:134:1: warning: [GHC-39584]
    persistent has deprecated sum type entities as of 2.14.0.0.
We will delete support for these entities in 2.15.0.0.
If you need these, please add a comment on this GitHub issue:

    https://github.com/yesodweb/persistent/issues/987

    |
134 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:134:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
134 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:134:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
134 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:134:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
134 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:134:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
134 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:134:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
134 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:134:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
134 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:134:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
134 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:134:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
134 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:138:11: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
    |
138 |         , mpsGeneric = True
    |           ^^^^^^^^^^

src/PersistentTestModels.hs:160:1: warning: [GHC-39584]
    persistent has deprecated sum type entities as of 2.14.0.0.
We will delete support for these entities in 2.15.0.0.
If you need these, please add a comment on this GitHub issue:

    https://github.com/yesodweb/persistent/issues/987

    |
160 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:160:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
160 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:160:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
160 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:160:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
160 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:160:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
160 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:160:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
160 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:160:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
160 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:160:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
160 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:160:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
160 | share [mkPersist persistSettings {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:170:11: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
    |
170 |         , mpsGeneric = True
    |           ^^^^^^^^^^

src/PersistentTestModels.hs:191:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
191 | share [mkPersist persistSettings { mpsPrefixFields = False, mpsGeneric = False }
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:191:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
191 | share [mkPersist persistSettings { mpsPrefixFields = False, mpsGeneric = False }
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:191:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
191 | share [mkPersist persistSettings { mpsPrefixFields = False, mpsGeneric = False }
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PersistentTestModels.hs:191:61: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
    |
191 | share [mkPersist persistSettings { mpsPrefixFields = False, mpsGeneric = False }
    |                                                             ^^^^^^^^^^

src/PersistentTestModels.hs:207:10: warning: [GHC-06201] [-Wmissing-methods]
    • No explicit implementation for
        ‘tabulateEntityA’
    • In the instance declaration for
        ‘PersistEntity (ReverseFieldOrder a)’
    |
207 | instance (PersistEntity a) => PersistEntity (ReverseFieldOrder a) where
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[28 of 41] Compiling PersistentTest

src/PersistentTest.hs:58:84: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
58 | _polymorphic :: (MonadFail m, MonadIO m, PersistQuery backend, BaseBackend backend ~ PersistEntityBackend Pet) => ReaderT backend m ()
   |                                                                                    ^
[29 of 41] Compiling MpsNoPrefixTest
[30 of 41] Compiling MpsCustomPrefixTest
[31 of 41] Compiling PrimaryTest

src/PrimaryTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PrimaryTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PrimaryTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PrimaryTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PrimaryTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PrimaryTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PrimaryTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PrimaryTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PrimaryTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PrimaryTest.hs:10:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/PrimaryTest.hs:10:36: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
10 | share [mkPersist persistSettings { mpsGeneric = False }, mkMigrate "migration"] [persistLowerCase|
   |                                    ^^^^^^^^^^

src/PrimaryTest.hs:31:71: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 | cleanDB :: (MonadIO m, PersistQuery backend, PersistEntityBackend Foo ~ backend) => ReaderT backend m ()
   |                                                                       ^
[32 of 41] Compiling RawSqlTest

src/RawSqlTest.hs:108:91: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
108 |         let insert' :: (PersistStore backend, PersistEntity val, PersistEntityBackend val ~ BaseBackend backend, MonadIO m, SafeToInsert val)
    |                                                                                           ^
[33 of 41] Compiling ReadWriteTest
[34 of 41] Compiling Recursive

src/Recursive.hs:9:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
9 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "recursiveMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Recursive.hs:9:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
9 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "recursiveMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Recursive.hs:9:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
9 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "recursiveMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Recursive.hs:9:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
9 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "recursiveMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Recursive.hs:9:32: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
  |
9 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "recursiveMigrate"] [persistLowerCase|
  |                                ^^^^^^^^^^
[35 of 41] Compiling RenameTest

src/RenameTest.hs:16:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
16 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/RenameTest.hs:16:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
16 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/RenameTest.hs:16:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
16 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/RenameTest.hs:16:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
16 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/RenameTest.hs:16:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
16 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/RenameTest.hs:16:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
16 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/RenameTest.hs:16:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
16 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/RenameTest.hs:16:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
16 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/RenameTest.hs:16:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
16 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/RenameTest.hs:16:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
16 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/RenameTest.hs:16:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
16 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/RenameTest.hs:16:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
16 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/RenameTest.hs:16:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
16 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/RenameTest.hs:16:32: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
16 | share [mkPersist sqlSettings { mpsGeneric = True }, mkMigrate "migration"] [persistLowerCase|
   |                                ^^^^^^^^^^

src/RenameTest.hs:57:27: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
57 |     ( BaseBackend backend ~ backend
   |                           ^

src/RenameTest.hs:69:15: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
69 |     , backend ~ BaseBackend backend
   |               ^
[36 of 41] Compiling SumTypeTest

src/SumTypeTest.hs:11:1: warning: [GHC-39584]
    persistent has deprecated sum type entities as of 2.14.0.0.
We will delete support for these entities in 2.15.0.0.
If you need these, please add a comment on this GitHub issue:

    https://github.com/yesodweb/persistent/issues/987

   |
11 | share [mkPersist persistSettings { mpsGeneric = True }, mkMigrate "sumTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/SumTypeTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist persistSettings { mpsGeneric = True }, mkMigrate "sumTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/SumTypeTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist persistSettings { mpsGeneric = True }, mkMigrate "sumTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/SumTypeTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist persistSettings { mpsGeneric = True }, mkMigrate "sumTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/SumTypeTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist persistSettings { mpsGeneric = True }, mkMigrate "sumTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/SumTypeTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist persistSettings { mpsGeneric = True }, mkMigrate "sumTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/SumTypeTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist persistSettings { mpsGeneric = True }, mkMigrate "sumTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/SumTypeTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist persistSettings { mpsGeneric = True }, mkMigrate "sumTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/SumTypeTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share [mkPersist persistSettings { mpsGeneric = True }, mkMigrate "sumTypeMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/SumTypeTest.hs:11:36: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
11 | share [mkPersist persistSettings { mpsGeneric = True }, mkMigrate "sumTypeMigrate"] [persistLowerCase|
   |                                    ^^^^^^^^^^

src/SumTypeTest.hs:31:27: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
31 |     , BaseBackend backend ~ backend
   |                           ^
[37 of 41] Compiling TransactionLevelTest

src/TransactionLevelTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistUpperCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/TransactionLevelTest.hs:8:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
8 | share [mkPersist sqlSettings, mkMigrate "migration"] [persistUpperCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
[38 of 41] Compiling TreeTest

src/TreeTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share
   | ^^^^^...

src/TreeTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share
   | ^^^^^...

src/TreeTest.hs:11:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
11 | share
   | ^^^^^...

src/TreeTest.hs:12:35: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
12 |     [ mkPersist persistSettings { mpsGeneric = False }
   |                                   ^^^^^^^^^^

src/TreeTest.hs:24:57: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
24 |     :: (PersistQuery backend, PersistEntityBackend Tree ~ backend, MonadIO m)
   |                                                         ^
[39 of 41] Compiling TypeLitFieldDefsTest

src/TypeLitFieldDefsTest.hs:32:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
32 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "typeLitFieldDefsMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/TypeLitFieldDefsTest.hs:32:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
32 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "typeLitFieldDefsMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/TypeLitFieldDefsTest.hs:32:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
32 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "typeLitFieldDefsMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/TypeLitFieldDefsTest.hs:32:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
32 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "typeLitFieldDefsMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/TypeLitFieldDefsTest.hs:32:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
32 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "typeLitFieldDefsMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/TypeLitFieldDefsTest.hs:32:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
32 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "typeLitFieldDefsMigrate"] [persistLowerCase|
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/TypeLitFieldDefsTest.hs:32:32: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘mpsGeneric’
    (imported from Init, but defined in Database.Persist.TH):
    Deprecated: "The mpsGeneric function adds a considerable amount of overhead and complexity to the library without bringing significant benefit. We would like to remove it. If you require this feature, please comment on the linked GitHub issue, and we'll either keep it around, or we can figure out a nicer way to solve your problem.

 Github: https://github.com/yesodweb/persistent/issues/1204"
   |
32 | share [mkPersist sqlSettings { mpsGeneric = True },  mkMigrate "typeLitFieldDefsMigrate"] [persistLowerCase|
   |                                ^^^^^^^^^^
[40 of 41] Compiling UniqueTest

src/UniqueTest.hs:7:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
7 | share [mkPersist sqlSettings,  mkMigrate "uniqueMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/UniqueTest.hs:7:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
7 | share [mkPersist sqlSettings,  mkMigrate "uniqueMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/UniqueTest.hs:7:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
7 | share [mkPersist sqlSettings,  mkMigrate "uniqueMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/UniqueTest.hs:7:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
7 | share [mkPersist sqlSettings,  mkMigrate "uniqueMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/UniqueTest.hs:7:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
7 | share [mkPersist sqlSettings,  mkMigrate "uniqueMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/UniqueTest.hs:7:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
7 | share [mkPersist sqlSettings,  mkMigrate "uniqueMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/UniqueTest.hs:7:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
7 | share [mkPersist sqlSettings,  mkMigrate "uniqueMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/UniqueTest.hs:7:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
7 | share [mkPersist sqlSettings,  mkMigrate "uniqueMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/UniqueTest.hs:7:1: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
  |
7 | share [mkPersist sqlSettings,  mkMigrate "uniqueMigrate"] [persistLowerCase|
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/UniqueTest.hs:26:79: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
26 | cleanDB :: (MonadIO m, PersistQuery backend, PersistEntityBackend TestNonNull ~ backend) => ReaderT backend m ()
   |                                                                               ^
[41 of 41] Compiling UpsertTest
