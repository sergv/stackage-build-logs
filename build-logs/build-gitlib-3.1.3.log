Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - gitlib-3.1.3 (lib) (first run)
Configuring library for gitlib-3.1.3...
Preprocessing library for gitlib-3.1.3...
Building library for gitlib-3.1.3...
[ 1 of 15] Compiling Git.Tutorial
[ 2 of 15] Compiling Git.Types

Git/Types.hs:9:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
  |
9 | import           Control.Applicative
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Git/Types.hs:12:1: warning: [-Wunused-imports]
    The import of ‘Control.Monad.Fail’ is redundant
      except perhaps to import instances from ‘Control.Monad.Fail’
    To import instances alone, use: import Control.Monad.Fail()
   |
12 | import           Control.Monad.Fail (MonadFail)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Git/Types.hs:20:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
   |
20 | import           Data.Semigroup
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Git/Types.hs:45:19: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
45 |     type Oid r :: *
   |                   ^

Git/Types.hs:46:20: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
46 |     data Tree r :: *
   |                    ^

Git/Types.hs:47:23: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
47 |     data Options r :: *
   |                       ^

Git/Types.hs:218:5: warning: [-Wnoncanonical-monoid-instances]
    Noncanonical ‘mappend’ definition detected
    in the instance declaration for ‘Monoid (ModifiedBuilder r m)’.
    ‘mappend’ will eventually be removed in favour of ‘(<>)’
    Either remove definition for ‘mappend’ (recommended) or define as ‘mappend = (<>)’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/semigroup-monoid
    |
218 |     x `mappend` y = x <> y
    |     ^^^^^^^^^^^^^^^^^^^^^^

Git/Types.hs:298:22: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
298 | data RefTarget (r :: *) = RefObj !(Oid r) | RefSymbolic !RefName
    |                      ^
[ 3 of 15] Compiling Git.Tree.Builder

Git/Tree/Builder.hs:39:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
39 | import           Data.Monoid
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Git/Tree/Builder.hs:65:5: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad (TreeT r m)’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
65 |     return x = TreeT (return x)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

Git/Tree/Builder.hs:69:5: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative (TreeT r m)’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
69 |     pure = return
   |     ^^^^^^^^^^^^^

Git/Tree/Builder.hs:153:13: warning: [GHC-53633] [-Woverlapping-patterns]
    Pattern match is redundant
    In a case alternative: _ -> ...
    |
153 |             _ -> error "queryTreeBuilder encountered the impossible"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 4 of 15] Compiling Git.Repository
[ 5 of 15] Compiling Git.Reference
[ 6 of 15] Compiling Git.Object
[ 7 of 15] Compiling Git.Blob

Git/Blob.hs:4:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
  |
4 | import           Control.Applicative
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 8 of 15] Compiling Git.Tree

Git/Tree.hs:7:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
  |
7 | import           Data.Monoid
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 9 of 15] Compiling Git.Commit

Git/Commit.hs:71:19: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a lambda abstraction:
        Patterns of type ‘ObjectOid r’ not matched:
            BlobObjOid _
            TreeObjOid _
            TagObjOid _
   |
71 |         .| mapMC (\(CommitObjOid c) -> return c)
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[10 of 15] Compiling Git.Commit.Push

Git/Commit/Push.hs:6:1: warning: [-Wunused-imports]
    The import of ‘Control.Monad.IO.Class’ is redundant
      except perhaps to import instances from ‘Control.Monad.IO.Class’
    To import instances alone, use: import Control.Monad.IO.Class()
  |
6 | import           Control.Monad.IO.Class
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[11 of 15] Compiling Git
[12 of 15] Compiling Git.Tree.Working

Git/Tree/Working.hs:8:1: warning: [-Wunused-imports]
    The import of ‘Control.Monad.IO.Class’ is redundant
      except perhaps to import instances from ‘Control.Monad.IO.Class’
    To import instances alone, use: import Control.Monad.IO.Class()
  |
8 | import           Control.Monad.IO.Class (MonadIO(..))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[13 of 15] Compiling Git.Tree.Builder.Pure
[14 of 15] Compiling Git.Utils
[15 of 15] Compiling Git.Working

Git/Working.hs:6:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
  |
6 | import Control.Applicative
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^

Git/Working.hs:7:1: warning: [-Wunused-imports]
    The import of ‘Control.Monad.Catch’ is redundant
      except perhaps to import instances from ‘Control.Monad.Catch’
    To import instances alone, use: import Control.Monad.Catch()
  |
7 | import Control.Monad.Catch
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^

Git/Working.hs:8:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
  |
8 | import Data.Semigroup
  | ^^^^^^^^^^^^^^^^^^^^^
