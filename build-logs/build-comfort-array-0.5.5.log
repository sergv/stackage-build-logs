Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - comfort-array-0.5.5 (lib) (first run)
 - comfort-array-0.5.5 (test:comfort-array-test) (first run)
Configuring library for comfort-array-0.5.5...
Preprocessing library for comfort-array-0.5.5...
Building library for comfort-array-0.5.5...
[ 1 of 22] Compiling Data.Array.Comfort.Shape.Set
[ 2 of 22] Compiling Data.Array.Comfort.Shape.Utility
[ 3 of 22] Compiling Data.Array.Comfort.Shape

src/Data/Array/Comfort/Shape.hs:96:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
96 | import Control.Applicative (Applicative, pure, (<*>), (<$>))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Array/Comfort/Shape.hs:111:1: warning: [-Wunused-imports]
    The import of ‘Data.Traversable’ is redundant
      except perhaps to import instances from ‘Data.Traversable’
    To import instances alone, use: import Data.Traversable()
    |
111 | import Data.Traversable (Traversable)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Array/Comfort/Shape.hs:112:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
    |
112 | import Data.Foldable (Foldable)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Array/Comfort/Shape.hs:757:14: warning: [GHC-47082] [-Woperator-whitespace-ext-conflict]
    The prefix use of a ‘$’ would denote an untyped splice
      were the TemplateHaskell extension enabled.
    Suggested fix: Add whitespace after the ‘$’.
    |
757 |             ($ix)
    |              ^

src/Data/Array/Comfort/Shape.hs:815:14: warning: [GHC-47082] [-Woperator-whitespace-ext-conflict]
    The prefix use of a ‘$’ would denote an untyped splice
      were the TemplateHaskell extension enabled.
    Suggested fix: Add whitespace after the ‘$’.
    |
815 |             ($ix)
    |              ^

src/Data/Array/Comfort/Shape.hs:1910:26: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
     |
1910 | newtype FieldIndex (f :: * -> *) = FieldIndex Int
     |                          ^

src/Data/Array/Comfort/Shape.hs:1910:31: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
     |
1910 | newtype FieldIndex (f :: * -> *) = FieldIndex Int
     |                               ^
[ 4 of 22] Compiling Data.Array.Comfort.Shape.Tuple

src/Data/Array/Comfort/Shape/Tuple.hs:9:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
  |
9 | import Control.Applicative ((<$>))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 5 of 22] Compiling Data.Array.Comfort.Shape.Test

src/Data/Array/Comfort/Shape/Test.hs:8:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
  |
8 | import Control.Applicative (pure)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Array/Comfort/Shape/Test.hs:19:38: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
19 |    (Shape.Indexed sh, Shape.Index sh ~ ix, Show ix, QC.Testable prop) =>
   |                                      ^

src/Data/Array/Comfort/Shape/Test.hs:27:38: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
27 |    (Shape.Indexed sh, Shape.Index sh ~ ix, Show ix) => sh -> QC.Property
   |                                      ^

src/Data/Array/Comfort/Shape/Test.hs:34:38: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
34 |    (Shape.Indexed sh, Shape.Index sh ~ ix, Show ix) => sh -> QC.Property
   |                                      ^

src/Data/Array/Comfort/Shape/Test.hs:41:38: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
41 |    (Shape.Indexed sh, Shape.Index sh ~ ix, Show ix) => sh -> QC.Property
   |                                      ^

src/Data/Array/Comfort/Shape/Test.hs:44:15: warning: [GHC-47082] [-Woperator-whitespace-ext-conflict]
    The prefix use of a ‘$’ would denote an untyped splice
      were the TemplateHaskell extension enabled.
    Suggested fix: Add whitespace after the ‘$’.
   |
44 |       mapSnd ($ix) (Shape.sizeOffset sh)
   |               ^

src/Data/Array/Comfort/Shape/Test.hs:49:38: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
49 |    (Shape.Indexed sh, Shape.Index sh ~ ix, Show ix) => sh -> QC.Property
   |                                      ^

src/Data/Array/Comfort/Shape/Test.hs:52:15: warning: [GHC-47082] [-Woperator-whitespace-ext-conflict]
    The prefix use of a ‘$’ would denote an untyped splice
      were the TemplateHaskell extension enabled.
    Suggested fix: Add whitespace after the ‘$’.
   |
52 |       mapSnd ($ix) (Shape.uncheckedSizeOffset sh) ==
   |               ^

src/Data/Array/Comfort/Shape/Test.hs:56:60: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
56 |    (Shape.Checking check, Shape.Indexed sh, Shape.Index sh ~ ix, Show ix) =>
   |                                                            ^

src/Data/Array/Comfort/Shape/Test.hs:60:15: warning: [GHC-47082] [-Woperator-whitespace-ext-conflict]
    The prefix use of a ‘$’ would denote an untyped splice
      were the TemplateHaskell extension enabled.
    Suggested fix: Add whitespace after the ‘$’.
   |
60 |       mapSnd ($ix) (Shape.unifiedSizeOffset sh) ==
   |               ^

src/Data/Array/Comfort/Shape/Test.hs:64:60: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
64 |    (Shape.Checking check, Shape.Indexed sh, Shape.Index sh ~ ix, Show ix) =>
   |                                                            ^

src/Data/Array/Comfort/Shape/Test.hs:68:44: warning: [GHC-47082] [-Woperator-whitespace-ext-conflict]
    The prefix use of a ‘$’ would denote an untyped splice
      were the TemplateHaskell extension enabled.
    Suggested fix: Add whitespace after the ‘$’.
   |
68 |       (mapSnd (Shape.requireCheck check . ($ix)) $ Shape.unifiedSizeOffset sh)
   |                                            ^

src/Data/Array/Comfort/Shape/Test.hs:72:29: warning: [GHC-47082] [-Woperator-whitespace-ext-conflict]
    The prefix use of a ‘$’ would denote an untyped splice
      were the TemplateHaskell extension enabled.
    Suggested fix: Add whitespace after the ‘$’.
   |
72 |             mapSnd (pure . ($ix)) (Shape.sizeOffset sh)
   |                             ^

src/Data/Array/Comfort/Shape/Test.hs:74:29: warning: [GHC-47082] [-Woperator-whitespace-ext-conflict]
    The prefix use of a ‘$’ would denote an untyped splice
      were the TemplateHaskell extension enabled.
    Suggested fix: Add whitespace after the ‘$’.
   |
74 |             mapSnd (pure . ($ix)) (Shape.uncheckedSizeOffset sh)
   |                             ^

src/Data/Array/Comfort/Shape/Test.hs:77:38: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
77 |    (Shape.Indexed sh, Shape.Index sh ~ ix, Show ix) => sh -> QC.Property
   |                                      ^

src/Data/Array/Comfort/Shape/Test.hs:83:60: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
83 |    (Shape.Checking check, Shape.Indexed sh, Shape.Index sh ~ ix, Show ix) =>
   |                                                            ^

src/Data/Array/Comfort/Shape/Test.hs:99:52: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
99 | invIndices :: (Shape.InvIndexed sh, Shape.Index sh ~ ix, Eq ix) => sh -> Bool
   |                                                    ^

src/Data/Array/Comfort/Shape/Test.hs:105:41: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
105 |    (Shape.InvIndexed sh, Shape.Index sh ~ ix, Eq ix) => sh -> Bool
    |                                         ^

src/Data/Array/Comfort/Shape/Test.hs:111:63: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
111 |    (Shape.Checking check, Shape.InvIndexed sh, Shape.Index sh ~ ix, Eq ix) =>
    |                                                               ^

src/Data/Array/Comfort/Shape/Test.hs:119:63: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
119 |    (Shape.Checking check, Shape.InvIndexed sh, Shape.Index sh ~ ix, Eq ix) =>
    |                                                               ^

src/Data/Array/Comfort/Shape/Test.hs:132:50: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
132 |     Shape.InvIndexed sh, Show sh, Shape.Index sh ~ ix, Eq ix, Show ix) =>
    |                                                  ^

src/Data/Array/Comfort/Shape/Test.hs:148:50: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
148 |    (Shape.InvIndexed sh, Show sh, Shape.Index sh ~ ix, Eq ix, Show ix) =>
    |                                                  ^
[ 6 of 22] Compiling Data.Array.Comfort.Shape.SubSize
[ 7 of 22] Compiling Data.Array.Comfort.Container

src/Data/Array/Comfort/Container.hs:25:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
   |
25 | import Data.Foldable (Foldable)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 8 of 22] Compiling Data.Array.Comfort.Check
[ 9 of 22] Compiling Data.Array.Comfort.Boxed.Unchecked

src/Data/Array/Comfort/Boxed/Unchecked.hs:29:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
29 | import Control.Applicative (Applicative, pure, (<*>), (<$>))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[10 of 22] Compiling Data.Array.Comfort.Boxed.Strict.Unchecked
[11 of 22] Compiling Data.Array.Comfort.Boxed

src/Data/Array/Comfort/Boxed.hs:48:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
48 | import Control.Applicative (liftA2, (<$>))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Array/Comfort/Boxed.hs:55:1: warning: [-Wunused-imports]
    The import of ‘Data.Traversable’ is redundant
      except perhaps to import instances from ‘Data.Traversable’
    To import instances alone, use: import Data.Traversable()
   |
55 | import Data.Traversable (Traversable, traverse)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[12 of 22] Compiling Data.Array.Comfort.Bool
[13 of 22] Compiling Data.Array.Comfort.Storable.Memory
[14 of 22] Compiling Data.Array.Comfort.Storable.Mutable.Private

src/Data/Array/Comfort/Storable/Mutable/Private.hs:14:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
14 | import Control.Applicative ((<$>))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Array/Comfort/Storable/Mutable/Private.hs:23:18: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
23 | data Array (m :: * -> *) sh a =
   |                  ^

src/Data/Array/Comfort/Storable/Mutable/Private.hs:23:23: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
23 | data Array (m :: * -> *) sh a =
   |                       ^
[15 of 22] Compiling Data.Array.Comfort.Storable.Private

src/Data/Array/Comfort/Storable/Private.hs:6:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
  |
6 | import Data.Semigroup (Semigroup((<>)))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Data/Array/Comfort/Storable/Private.hs:7:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
  |
7 | import Data.Monoid (Monoid(mempty, mappend))
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[16 of 22] Compiling Data.Array.Comfort.Storable.Mutable.Unchecked
[17 of 22] Compiling Data.Array.Comfort.Storable.Mutable
[18 of 22] Compiling Data.Array.Comfort.Storable.Unchecked.Creator
[19 of 22] Compiling Data.Array.Comfort.Storable.Unchecked.Monadic
[20 of 22] Compiling Data.Array.Comfort.Storable.Unchecked

src/Data/Array/Comfort/Storable/Unchecked.hs:57:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
57 | import Control.Applicative (liftA2)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[21 of 22] Compiling Data.Array.Comfort.Storable.Dim2
[22 of 22] Compiling Data.Array.Comfort.Storable
Configuring test suite 'comfort-array-test' for comfort-array-0.5.5...
Preprocessing test suite 'comfort-array-test' for comfort-array-0.5.5...
Building test suite 'comfort-array-test' for comfort-array-0.5.5...
[ 1 of 10] Compiling DocTest.Data.Array.Comfort.Boxed
[ 2 of 10] Compiling DocTest.Data.Array.Comfort.Boxed.Unchecked

src/Data/Array/Comfort/Boxed/Unchecked.hs:43:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
43 | >>> import Control.Applicative ((<$>))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 3 of 10] Compiling DocTest.Data.Array.Comfort.Shape
[ 4 of 10] Compiling DocTest.Data.Array.Comfort.Storable

src/Data/Array/Comfort/Storable.hs:108:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
    |
108 | >>> import Control.Applicative ((<$>))
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 5 of 10] Compiling DocTest.Data.Array.Comfort.Storable.Dim2

src/Data/Array/Comfort/Storable/Dim2.hs:65:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
65 | >>> import Control.Applicative (liftA2, (<$>), (<*>))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 6 of 10] Compiling DocTest.Data.Array.Comfort.Storable.Unchecked
[ 7 of 10] Compiling DocTest.Main
[ 8 of 10] Compiling Test.Utility
[ 9 of 10] Compiling Test.Shape

test/Test/Shape.hs:10:1: warning: [-Wunused-imports]
    The import of ‘<$>, liftA2, pure’
    from module ‘Control.Applicative’ is redundant
   |
10 | import Control.Applicative (liftA2, liftA3, pure, (<$>))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[10 of 10] Compiling Main
[11 of 11] Linking /tmp/workdir-comfort-array/comfort-array-0.5.5/dist-newstyle/build/x86_64-linux/ghc-9.6.6/comfort-array-0.5.5/t/comfort-array-test/build/comfort-array-test/comfort-array-test
