Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - quickcheck-classes-base-0.6.2.0 (lib) (first run)
Configuring library for quickcheck-classes-base-0.6.2.0...
Preprocessing library for quickcheck-classes-base-0.6.2.0...
Building library for quickcheck-classes-base-0.6.2.0...
[ 1 of 30] Compiling Test.QuickCheck.Classes.Internal

src/Test/QuickCheck/Classes/Internal.hs:84:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
84 | import Control.Applicative
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Internal.hs:86:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
   |
86 | import Data.Foldable
   | ^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Internal.hs:87:1: warning: [-Wunused-imports]
    The import of ‘Data.Traversable’ is redundant
      except perhaps to import instances from ‘Data.Traversable’
    To import instances alone, use: import Data.Traversable()
   |
87 | import Data.Traversable
   | ^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Internal.hs:88:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
88 | import Data.Monoid
   | ^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Internal.hs:90:48: warning: [-Wunused-imports]
    The import of ‘showsPrec1’
    from module ‘Data.Functor.Classes’ is redundant
   |
90 | import Data.Functor.Classes (Eq1(..),Show1(..),showsPrec1)
   |                                                ^^^^^^^^^^

src/Test/QuickCheck/Classes/Internal.hs:94:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
94 | import Data.Functor.Classes (Eq2(..),Show2(..),showsPrec2)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Internal.hs:96:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
   |
96 | import Data.Semigroup (Semigroup)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Internal.hs:119:1: warning: [-Wunused-imports]
    The qualified import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
    |
119 | import qualified Data.Functor.Classes as C
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Internal.hs:582:16: warning: [GHC-63397] [-Wname-shadowing]
    This binding for ‘a’ shadows the existing binding
      bound at src/Test/QuickCheck/Classes/Internal.hs:582:1
    |
582 | eq2 :: (forall a. (Eq a, Eq b) => Eq (f a b), Eq a, Eq b) => f a b -> f a b -> Bool
    |                ^
[ 2 of 30] Compiling Test.QuickCheck.Classes.Integral

src/Test/QuickCheck/Classes/Integral.hs:11:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
11 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 3 of 30] Compiling Test.QuickCheck.Classes.Generic

src/Test/QuickCheck/Classes/Generic.hs:21:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
21 | import Control.Applicative
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Generic.hs:30:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
30 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Generic.hs:32:52: warning: [-Wunused-imports]
    The import of ‘Apply’
    from module ‘Test.QuickCheck.Classes.Internal’ is redundant
   |
32 | import Test.QuickCheck.Classes.Internal (Laws(..), Apply(..))
   |                                                    ^^^^^^^^^

src/Test/QuickCheck/Classes/Generic.hs:92:3: warning: [-Wnoncanonical-monoid-instances]
    Noncanonical ‘mappend’ definition detected
    in the instance declaration for ‘Monoid (GApply f a)’.
    ‘mappend’ will eventually be removed in favour of ‘(<>)’
    Either remove definition for ‘mappend’ (recommended) or define as ‘mappend = (<>)’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/semigroup-monoid
   |
92 |   mappend (GApply x) (GApply y) = GApply $ liftA2 (MD.<>) x y
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 4 of 30] Compiling Test.QuickCheck.Classes.Functor

src/Test/QuickCheck/Classes/Functor.hs:19:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor’ is redundant
      except perhaps to import instances from ‘Data.Functor’
    To import instances alone, use: import Data.Functor()
   |
19 | import Data.Functor
   | ^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Functor.hs:22:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Arbitrary’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Arbitrary’
    To import instances alone, use: import Test.QuickCheck.Arbitrary()
   |
22 | import Test.QuickCheck.Arbitrary (Arbitrary1(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Functor.hs:23:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
23 | import Data.Functor.Classes (Eq1,Show1)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Functor.hs:25:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
25 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 5 of 30] Compiling Test.QuickCheck.Classes.Foldable

src/Test/QuickCheck/Classes/Foldable.hs:18:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
18 | import Data.Monoid
   | ^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Foldable.hs:19:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
   |
19 | import Data.Foldable
   | ^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Foldable.hs:24:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Arbitrary’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Arbitrary’
    To import instances alone, use: import Test.QuickCheck.Arbitrary()
   |
24 | import Test.QuickCheck.Arbitrary (Arbitrary1(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Foldable.hs:28:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
28 | import Data.Functor.Classes (Eq1,Show1)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Foldable.hs:30:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
30 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 6 of 30] Compiling Test.QuickCheck.Classes.Eq

src/Test/QuickCheck/Classes/Eq.hs:12:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
12 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Eq.hs:13:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Function’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Function’
    To import instances alone, use: import Test.QuickCheck.Function()
   |
13 | import Test.QuickCheck.Function
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Eq.hs:57:1: warning: [-Wunused-top-binds]
    Defined but not used: ‘eqNegation’
   |
57 | eqNegation _ = property $ \(x :: a) y -> (x /= y) == not (x == y)
   | ^^^^^^^^^^
[ 7 of 30] Compiling Test.QuickCheck.Classes.Enum

src/Test/QuickCheck/Classes/Enum.hs:12:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
12 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 8 of 30] Compiling Test.QuickCheck.Classes.Contravariant

src/Test/QuickCheck/Classes/Contravariant.hs:22:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Arbitrary’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Arbitrary’
    To import instances alone, use: import Test.QuickCheck.Arbitrary()
   |
22 | import Test.QuickCheck.Arbitrary (Arbitrary1(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Contravariant.hs:23:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
23 | import Data.Functor.Classes (Eq1,Show1)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Contravariant.hs:25:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
25 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 9 of 30] Compiling Test.QuickCheck.Classes.Category

src/Test/QuickCheck/Classes/Category.hs:22:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
22 | import Data.Functor.Classes (Eq2,Show2)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Category.hs:24:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
24 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[10 of 30] Compiling Test.QuickCheck.Classes.Bits

src/Test/QuickCheck/Classes/Bits.hs:17:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
17 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[11 of 30] Compiling Test.QuickCheck.Classes.Bitraversable

src/Test/QuickCheck/Classes/Bitraversable.hs:22:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
22 | import Data.Functor.Classes (Eq2,Show2)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Bitraversable.hs:24:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
24 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[12 of 30] Compiling Test.QuickCheck.Classes.Bifunctor

src/Test/QuickCheck/Classes/Bifunctor.hs:20:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
20 | import Data.Functor.Classes (Eq2,Show2)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Bifunctor.hs:22:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
22 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[13 of 30] Compiling Test.QuickCheck.Classes.Bifoldable

src/Test/QuickCheck/Classes/Bifoldable.hs:22:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
22 | import Data.Functor.Classes (Eq2,Show2)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Bifoldable.hs:23:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
23 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[14 of 30] Compiling Test.QuickCheck.Classes.Base.IsList

src/Test/QuickCheck/Classes/Base/IsList.hs:47:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
47 | import Control.Applicative
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Base/IsList.hs:49:23: warning: [-Wunused-imports]
    The import of ‘mapM’ from module ‘Control.Monad’ is redundant
   |
49 | import Control.Monad (mapM,filterM,replicateM)
   |                       ^^^^

src/Test/QuickCheck/Classes/Base/IsList.hs:50:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
50 | import Control.Applicative (liftA2)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Base/IsList.hs:55:1: warning: [-Wunused-imports]
    The import of ‘Data.Traversable’ is redundant
      except perhaps to import instances from ‘Data.Traversable’
    To import instances alone, use: import Data.Traversable()
   |
55 | import Data.Traversable (traverse)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Base/IsList.hs:94:32: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
   |
94 | foldrProp :: (IsList c, Item c ~ a, Arbitrary c, Show c, Show a, CoArbitrary a, Function a)
   |                                ^

src/Test/QuickCheck/Classes/Base/IsList.hs:102:32: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
102 | foldlProp :: (IsList c, Item c ~ a, Arbitrary c, Show c, Show a, CoArbitrary a, Function a)
    |                                ^

src/Test/QuickCheck/Classes/Base/IsList.hs:110:33: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
110 | foldlMProp :: (IsList c, Item c ~ a, Arbitrary c, Show c, Show a, CoArbitrary a, Function a)
    |                                 ^

src/Test/QuickCheck/Classes/Base/IsList.hs:117:62: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
117 | mapProp :: (IsList c, IsList d, Eq d, Show d, Show b, Item c ~ a, Item d ~ b, Arbitrary c, Arbitrary b, Show c, Show a, CoArbitrary a, Function a)
    |                                                              ^

src/Test/QuickCheck/Classes/Base/IsList.hs:117:74: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
117 | mapProp :: (IsList c, IsList d, Eq d, Show d, Show b, Item c ~ a, Item d ~ b, Arbitrary c, Arbitrary b, Show c, Show a, CoArbitrary a, Function a)
    |                                                                          ^

src/Test/QuickCheck/Classes/Base/IsList.hs:125:63: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
125 | imapProp :: (IsList c, IsList d, Eq d, Show d, Show b, Item c ~ a, Item d ~ b, Arbitrary c, Arbitrary b, Show c, Show a, CoArbitrary a, Function a)
    |                                                               ^

src/Test/QuickCheck/Classes/Base/IsList.hs:125:75: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
125 | imapProp :: (IsList c, IsList d, Eq d, Show d, Show b, Item c ~ a, Item d ~ b, Arbitrary c, Arbitrary b, Show c, Show a, CoArbitrary a, Function a)
    |                                                                           ^

src/Test/QuickCheck/Classes/Base/IsList.hs:133:64: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
133 | imapMProp :: (IsList c, IsList d, Eq d, Show d, Show b, Item c ~ a, Item d ~ b, Arbitrary c, Arbitrary b, Show c, Show a, CoArbitrary a, Function a)
    |                                                                ^

src/Test/QuickCheck/Classes/Base/IsList.hs:133:76: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
133 | imapMProp :: (IsList c, IsList d, Eq d, Show d, Show b, Item c ~ a, Item d ~ b, Arbitrary c, Arbitrary b, Show c, Show a, CoArbitrary a, Function a)
    |                                                                            ^

src/Test/QuickCheck/Classes/Base/IsList.hs:141:67: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
141 | traverseProp :: (IsList c, IsList d, Eq d, Show d, Show b, Item c ~ a, Item d ~ b, Arbitrary c, Arbitrary b, Show c, Show a, CoArbitrary a, Function a)
    |                                                                   ^

src/Test/QuickCheck/Classes/Base/IsList.hs:141:79: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
141 | traverseProp :: (IsList c, IsList d, Eq d, Show d, Show b, Item c ~ a, Item d ~ b, Arbitrary c, Arbitrary b, Show c, Show a, CoArbitrary a, Function a)
    |                                                                               ^

src/Test/QuickCheck/Classes/Base/IsList.hs:151:25: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
151 | generateProp :: (Item c ~ a, Eq c, Show c, IsList c, Arbitrary a, Show a)
    |                         ^

src/Test/QuickCheck/Classes/Base/IsList.hs:158:26: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
158 | generateMProp :: (Item c ~ a, Eq c, Show c, IsList c, Arbitrary a, Show a)
    |                          ^

src/Test/QuickCheck/Classes/Base/IsList.hs:165:26: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
165 | replicateProp :: (Item c ~ a, Eq c, Show c, IsList c, Arbitrary a, Show a)
    |                          ^

src/Test/QuickCheck/Classes/Base/IsList.hs:172:27: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
172 | replicateMProp :: (Item c ~ a, Eq c, Show c, IsList c, Arbitrary a, Show a)
    |                           ^

src/Test/QuickCheck/Classes/Base/IsList.hs:181:33: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
181 | filterProp :: (IsList c, Item c ~ a, Arbitrary c, Show c, Show a, Eq c, CoArbitrary a, Function a)
    |                                 ^

src/Test/QuickCheck/Classes/Base/IsList.hs:190:34: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
190 | filterMProp :: (IsList c, Item c ~ a, Arbitrary c, Show c, Show a, Eq c, CoArbitrary a, Function a)
    |                                  ^

src/Test/QuickCheck/Classes/Base/IsList.hs:199:35: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
199 | mapMaybeProp :: (IsList c, Item c ~ a, Item d ~ b, Eq d, IsList d, Arbitrary b, Show d, Show b, Arbitrary c, Show c, Show a, Eq c, CoArbitrary a, Function a)
    |                                   ^

src/Test/QuickCheck/Classes/Base/IsList.hs:199:47: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
199 | mapMaybeProp :: (IsList c, Item c ~ a, Item d ~ b, Eq d, IsList d, Arbitrary b, Show d, Show b, Arbitrary c, Show c, Show a, Eq c, CoArbitrary a, Function a)
    |                                               ^

src/Test/QuickCheck/Classes/Base/IsList.hs:207:68: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
207 | mapMaybeMProp :: (IsList c, IsList d, Eq d, Show d, Show b, Item c ~ a, Item d ~ b, Arbitrary c, Arbitrary b, Show c, Show a, CoArbitrary a, Function a)
    |                                                                    ^

src/Test/QuickCheck/Classes/Base/IsList.hs:207:80: warning: [GHC-58520] [-Wtype-equality-requires-operators]
    The use of ‘~’ without TypeOperators
    will become an error in a future GHC release.
    Suggested fix: Perhaps you intended to use TypeOperators
    |
207 | mapMaybeMProp :: (IsList c, IsList d, Eq d, Show d, Show b, Item c ~ a, Item d ~ b, Arbitrary c, Arbitrary b, Show c, Show a, CoArbitrary a, Function a)
    |                                                                                ^
[15 of 30] Compiling Test.QuickCheck.Classes.Applicative

src/Test/QuickCheck/Classes/Applicative.hs:17:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
17 | import Control.Applicative
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Applicative.hs:20:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Arbitrary’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Arbitrary’
    To import instances alone, use: import Test.QuickCheck.Arbitrary()
   |
20 | import Test.QuickCheck.Arbitrary (Arbitrary1(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Applicative.hs:21:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
21 | import Data.Functor.Classes (Eq1,Show1)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Applicative.hs:23:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
23 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[16 of 30] Compiling Test.QuickCheck.Classes.Alternative

src/Test/QuickCheck/Classes/Alternative.hs:20:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Arbitrary’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Arbitrary’
    To import instances alone, use: import Test.QuickCheck.Arbitrary()
   |
20 | import Test.QuickCheck.Arbitrary (Arbitrary1(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Alternative.hs:21:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
21 | import Data.Functor.Classes (Eq1,Show1)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Alternative.hs:23:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
23 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[17 of 30] Compiling Test.QuickCheck.Classes.Ix

src/Test/QuickCheck/Classes/Ix.hs:12:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
12 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[18 of 30] Compiling Test.QuickCheck.Classes.Monad

src/Test/QuickCheck/Classes/Monad.hs:17:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
17 | import Control.Applicative
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Monad.hs:21:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Arbitrary’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Arbitrary’
    To import instances alone, use: import Test.QuickCheck.Arbitrary()
   |
21 | import Test.QuickCheck.Arbitrary (Arbitrary1(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Monad.hs:22:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
22 | import Data.Functor.Classes (Eq1,Show1)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Monad.hs:24:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
24 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[19 of 30] Compiling Test.QuickCheck.Classes.MonadFail

src/Test/QuickCheck/Classes/MonadFail.hs:19:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
19 | import Control.Applicative
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/MonadFail.hs:21:1: warning: [-Wunused-imports]
    The import of ‘Control.Monad’ is redundant
      except perhaps to import instances from ‘Control.Monad’
    To import instances alone, use: import Control.Monad()
   |
21 | import Control.Monad (ap)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/MonadFail.hs:22:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Arbitrary’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Arbitrary’
    To import instances alone, use: import Test.QuickCheck.Arbitrary()
   |
22 | import Test.QuickCheck.Arbitrary (Arbitrary1(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/MonadFail.hs:23:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
23 | import Data.Functor.Classes (Eq1,Show1)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/MonadFail.hs:26:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
26 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[20 of 30] Compiling Test.QuickCheck.Classes.MonadPlus

src/Test/QuickCheck/Classes/MonadPlus.hs:18:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
18 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/MonadPlus.hs:23:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Arbitrary’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Arbitrary’
    To import instances alone, use: import Test.QuickCheck.Arbitrary()
   |
23 | import Test.QuickCheck.Arbitrary (Arbitrary1(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/MonadPlus.hs:24:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
24 | import Data.Functor.Classes (Eq1,Show1)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[21 of 30] Compiling Test.QuickCheck.Classes.MonadZip

src/Test/QuickCheck/Classes/MonadZip.hs:17:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
17 | import Control.Applicative
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/MonadZip.hs:23:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Arbitrary’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Arbitrary’
    To import instances alone, use: import Test.QuickCheck.Arbitrary()
   |
23 | import Test.QuickCheck.Arbitrary (Arbitrary1(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/MonadZip.hs:24:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
24 | import Data.Functor.Classes (Eq1,Show1)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/MonadZip.hs:26:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
26 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[22 of 30] Compiling Test.QuickCheck.Classes.Monoid

src/Test/QuickCheck/Classes/Monoid.hs:12:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
12 | import Data.Monoid
   | ^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Monoid.hs:15:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
15 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[23 of 30] Compiling Test.QuickCheck.Classes.Num

src/Test/QuickCheck/Classes/Num.hs:11:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
11 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[24 of 30] Compiling Test.QuickCheck.Classes.Ord

src/Test/QuickCheck/Classes/Ord.hs:11:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
11 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[25 of 30] Compiling Test.QuickCheck.Classes.Semigroup

src/Test/QuickCheck/Classes/Semigroup.hs:18:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Property’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Property’
    To import instances alone, use: import Test.QuickCheck.Property()
   |
18 | import Test.QuickCheck.Property (Property)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Semigroup.hs:22:30: warning: [-Wunused-imports]
    The import of ‘toList’ from module ‘Data.Foldable’ is redundant
   |
22 | import Data.Foldable (foldr1,toList)
   |                              ^^^^^^

src/Test/QuickCheck/Classes/Semigroup.hs:25:1: warning: [-Wunused-imports]
    The qualified import of ‘Data.List’ is redundant
      except perhaps to import instances from ‘Data.List’
    To import instances alone, use: import Data.List()
   |
25 | import qualified Data.List as L
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[26 of 30] Compiling Test.QuickCheck.Classes.Show
[27 of 30] Compiling Test.QuickCheck.Classes.ShowRead
[28 of 30] Compiling Test.QuickCheck.Classes.Storable

src/Test/QuickCheck/Classes/Storable.hs:10:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
10 | import Control.Applicative
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
[29 of 30] Compiling Test.QuickCheck.Classes.Traversable

src/Test/QuickCheck/Classes/Traversable.hs:17:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
   |
17 | import Data.Foldable (foldMap)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Traversable.hs:18:1: warning: [-Wunused-imports]
    The import of ‘Traversable, sequenceA, traverse’
    from module ‘Data.Traversable’ is redundant
   |
18 | import Data.Traversable (Traversable,fmapDefault,foldMapDefault,sequenceA,traverse)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Traversable.hs:21:1: warning: [-Wunused-imports]
    The import of ‘Test.QuickCheck.Arbitrary’ is redundant
      except perhaps to import instances from ‘Test.QuickCheck.Arbitrary’
    To import instances alone, use: import Test.QuickCheck.Arbitrary()
   |
21 | import Test.QuickCheck.Arbitrary (Arbitrary1(..))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Traversable.hs:22:1: warning: [-Wunused-imports]
    The import of ‘Data.Functor.Classes’ is redundant
      except perhaps to import instances from ‘Data.Functor.Classes’
    To import instances alone, use: import Data.Functor.Classes()
   |
22 | import Data.Functor.Classes (Eq1,Show1)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[30 of 30] Compiling Test.QuickCheck.Classes.Base

src/Test/QuickCheck/Classes/Base.hs:130:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
    |
130 | import Data.Monoid (Monoid(..))
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Base.hs:132:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
    |
132 | import Data.Semigroup (Semigroup)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Test/QuickCheck/Classes/Base.hs:258:19: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
258 | data Proxy1 (f :: * -> *) = Proxy1
    |                   ^

src/Test/QuickCheck/Classes/Base.hs:258:24: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
258 | data Proxy1 (f :: * -> *) = Proxy1
    |                        ^

src/Test/QuickCheck/Classes/Base.hs:262:19: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
262 | data Proxy2 (f :: * -> * -> *) = Proxy2
    |                   ^

src/Test/QuickCheck/Classes/Base.hs:262:24: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
262 | data Proxy2 (f :: * -> * -> *) = Proxy2
    |                        ^

src/Test/QuickCheck/Classes/Base.hs:262:29: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
262 | data Proxy2 (f :: * -> * -> *) = Proxy2
    |                             ^
