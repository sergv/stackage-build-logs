Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - io-streams-1.5.2.2 (lib) (first run)
 - io-streams-1.5.2.2 (test:testsuite) (first run)
Configuring library for io-streams-1.5.2.2...
Preprocessing library for io-streams-1.5.2.2...
Building library for io-streams-1.5.2.2...
[ 1 of 23] Compiling System.IO.Streams.Internal

src/System/IO/Streams/Internal.hs:599:4: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad (Generator r)’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
    |
599 |    return = Generator . return . Right
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/System/IO/Streams/Internal.hs:659:5: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad (Consumer c)’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
    |
659 |     return = Consumer . return . Right
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/System/IO/Streams/Internal.hs:682:5: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative (Consumer r)’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
    |
682 |     pure = return
    |     ^^^^^^^^^^^^^
[ 2 of 23] Compiling System.IO.Streams.Handle
[ 3 of 23] Compiling System.IO.Streams.File
[ 4 of 23] Compiling System.IO.Streams.Debug
[ 5 of 23] Compiling System.IO.Streams.Core
[ 6 of 23] Compiling System.IO.Streams.Concurrent
[ 7 of 23] Compiling System.IO.Streams.Combinators
[ 8 of 23] Compiling System.IO.Streams.Builder
[ 9 of 23] Compiling System.IO.Streams.Internal.Attoparsec

src/System/IO/Streams/Internal/Attoparsec.hs:94:17: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘Either (i, [String], String) r’ not matched:
            Right _
   |
94 |     err r = let (Left (!_,c,m)) = eitherResult r
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[10 of 23] Compiling System.IO.Streams.Attoparsec.Text
[11 of 23] Compiling System.IO.Streams.Attoparsec.ByteString
[12 of 23] Compiling System.IO.Streams.Attoparsec
[13 of 23] Compiling System.IO.Streams.Internal.Network
[14 of 23] Compiling System.IO.Streams.Internal.Search
[15 of 23] Compiling System.IO.Streams.List
[16 of 23] Compiling System.IO.Streams.ByteString
[17 of 23] Compiling System.IO.Streams.Network
[18 of 23] Compiling System.IO.Streams.Process
[19 of 23] Compiling System.IO.Streams.Text
[20 of 23] Compiling System.IO.Streams.Tutorial
[21 of 23] Compiling System.IO.Streams.Vector
[22 of 23] Compiling System.IO.Streams.Zlib
[23 of 23] Compiling System.IO.Streams
Configuring test suite 'testsuite' for io-streams-1.5.2.2...
Preprocessing test suite 'testsuite' for io-streams-1.5.2.2...
Building test suite 'testsuite' for io-streams-1.5.2.2...
[ 1 of 39] Compiling System.IO.Streams.Internal

src/System/IO/Streams/Internal.hs:599:4: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad (Generator r)’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
    |
599 |    return = Generator . return . Right
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/System/IO/Streams/Internal.hs:659:5: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad (Consumer c)’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
    |
659 |     return = Consumer . return . Right
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/System/IO/Streams/Internal.hs:682:5: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative (Consumer r)’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
    |
682 |     pure = return
    |     ^^^^^^^^^^^^^
[ 2 of 39] Compiling System.IO.Streams.Handle
[ 3 of 39] Compiling System.IO.Streams.File
[ 4 of 39] Compiling System.IO.Streams.Debug
[ 5 of 39] Compiling System.IO.Streams.Core
[ 6 of 39] Compiling System.IO.Streams.Concurrent
[ 7 of 39] Compiling System.IO.Streams.Combinators
[ 8 of 39] Compiling System.IO.Streams.Builder
[ 9 of 39] Compiling System.IO.Streams.Internal.Attoparsec

src/System/IO/Streams/Internal/Attoparsec.hs:94:17: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘Either (i, [String], String) r’ not matched:
            Right _
   |
94 |     err r = let (Left (!_,c,m)) = eitherResult r
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[10 of 39] Compiling System.IO.Streams.Attoparsec.Text
[11 of 39] Compiling System.IO.Streams.Attoparsec.ByteString
[12 of 39] Compiling System.IO.Streams.Internal.Network
[13 of 39] Compiling System.IO.Streams.Internal.Search
[14 of 39] Compiling System.IO.Streams.List
[15 of 39] Compiling System.IO.Streams.ByteString
[16 of 39] Compiling System.IO.Streams.Network
[17 of 39] Compiling System.IO.Streams.Process
[18 of 39] Compiling System.IO.Streams.Tests.Common
[19 of 39] Compiling System.IO.Streams.Tests.Internal
[20 of 39] Compiling System.IO.Streams.Tests.List
[21 of 39] Compiling System.IO.Streams.Tests.Network
[22 of 39] Compiling System.IO.Streams.Text
[23 of 39] Compiling System.IO.Streams.Tests.Text
[24 of 39] Compiling System.IO.Streams.Vector
[25 of 39] Compiling System.IO.Streams.Zlib
[26 of 39] Compiling System.IO.Streams
[27 of 39] Compiling System.IO.Streams.Tests.Zlib
[28 of 39] Compiling System.IO.Streams.Tests.Vector
[29 of 39] Compiling System.IO.Streams.Tests.Process
[30 of 39] Compiling System.IO.Streams.Tests.Handle
[31 of 39] Compiling System.IO.Streams.Tests.File
[32 of 39] Compiling System.IO.Streams.Tests.Debug
[33 of 39] Compiling System.IO.Streams.Tests.Concurrent
[34 of 39] Compiling System.IO.Streams.Tests.Combinators
[35 of 39] Compiling System.IO.Streams.Tests.ByteString
[36 of 39] Compiling System.IO.Streams.Tests.Builder

test/System/IO/Streams/Tests/Builder.hs:13:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
13 | import           Data.Monoid
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[37 of 39] Compiling System.IO.Streams.Tests.Attoparsec.Text

test/System/IO/Streams/Tests/Attoparsec/Text.hs:113:9: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘Either (Text, [String], String) Int’ not matched:
            Left _
    |
113 |     let (Right x) = eitherResult $ Done undefined 4 :: Either (Text, [String], String) Int
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[38 of 39] Compiling System.IO.Streams.Tests.Attoparsec.ByteString

test/System/IO/Streams/Tests/Attoparsec/ByteString.hs:100:9: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘Either
                            (ByteString, [String], String) Int’ not matched:
            Left _
    |
100 |     let (Right x) = eitherResult $ Done undefined 4 :: Either (ByteString, [String], String) Int
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[39 of 39] Compiling Main
[40 of 40] Linking /tmp/workdir-io-streams/io-streams-1.5.2.2/dist-newstyle/build/x86_64-linux/ghc-9.6.6/io-streams-1.5.2.2/t/testsuite/build/testsuite/testsuite
