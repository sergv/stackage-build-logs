Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - midi-0.2.2.4 (lib) (first run)
 - midi-0.2.2.4 (test:test) (first run)
Configuring library for midi-0.2.2.4...
Preprocessing library for midi-0.2.2.4...
Building library for midi-0.2.2.4...
[ 1 of 42] Compiling Sound.MIDI.Bit
[ 2 of 42] Compiling Sound.MIDI.IO
[ 3 of 42] Compiling Sound.MIDI.Monoid

src/Sound/MIDI/Monoid.hs:3:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
  |
3 | import Data.Foldable (foldMap, )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Sound/MIDI/Monoid.hs:4:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
  |
4 | import Data.Monoid (Monoid, mappend, )
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Sound/MIDI/Monoid.hs:5:24: warning: [-Wunused-imports]
    The import of ‘Semigroup’ from module ‘Data.Semigroup’ is redundant
  |
5 | import Data.Semigroup (Semigroup, sconcat, )
  |                        ^^^^^^^^^
[ 4 of 42] Compiling Sound.MIDI.Parser.Report
[ 5 of 42] Compiling Sound.MIDI.Parser.Exception
[ 6 of 42] Compiling Sound.MIDI.Parser.Class
[ 7 of 42] Compiling Sound.MIDI.Parser.Primitive
[ 8 of 42] Compiling Sound.MIDI.Parser.File

src/Sound/MIDI/Parser/File.hs:11:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
11 | import Control.Applicative (Applicative, pure, (<*>), )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 9 of 42] Compiling Sound.MIDI.Parser.Restricted

src/Sound/MIDI/Parser/Restricted.hs:15:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
15 | import Control.Applicative (Applicative, pure, (<*>), )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Sound/MIDI/Parser/Restricted.hs:52:4: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad (T parser)’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
52 |    return = Cons . return
   |    ^^^^^^^^^^^^^^^^^^^^^^
[10 of 42] Compiling Sound.MIDI.Parser.Warning
[11 of 42] Compiling Sound.MIDI.Parser.Stream

parser/Sound/MIDI/Parser/Stream.hs:11:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
11 | import Control.Applicative (Applicative, pure, (<*>), )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[12 of 42] Compiling Sound.MIDI.MachineControl
[13 of 42] Compiling Sound.MIDI.Parser.ByteString

src/Sound/MIDI/Parser/ByteString.hs:15:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
15 | import Control.Applicative (Applicative, pure, (<*>), )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[14 of 42] Compiling Sound.MIDI.String
[15 of 42] Compiling Sound.MIDI.Utility
[16 of 42] Compiling Sound.MIDI.Parser.Status
[17 of 42] Compiling Sound.MIDI.KeySignature
[18 of 42] Compiling Sound.MIDI.ControllerPrivate
[19 of 42] Compiling Sound.MIDI.Controller
[20 of 42] Compiling Sound.MIDI.Writer.Basic

src/Sound/MIDI/Writer/Basic.hs:12:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
   |
12 | import Data.Foldable (foldMap, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Sound/MIDI/Writer/Basic.hs:13:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
13 | import Data.Monoid (Monoid, mempty, mappend, mconcat, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Sound/MIDI/Writer/Basic.hs:14:1: warning: [-Wunused-imports]
    The import of ‘<>’ from module ‘Data.Semigroup’ is redundant
   |
14 | import Data.Semigroup (Semigroup(sconcat, (<>)), )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[21 of 42] Compiling Sound.MIDI.Message.System.RealTime
[22 of 42] Compiling Sound.MIDI.Message.System.Common
[23 of 42] Compiling Sound.MIDI.Message.Channel.Mode
[24 of 42] Compiling Sound.MIDI.Manufacturer
[25 of 42] Compiling Sound.MIDI.Message.System.Exclusive
[26 of 42] Compiling Sound.MIDI.Message.System
[27 of 42] Compiling Sound.MIDI.File.Event.SystemExclusive
[28 of 42] Compiling Sound.MIDI.Writer.Status

src/Sound/MIDI/Writer/Status.hs:13:1: warning: [-Wunused-imports]
    The import of ‘Data.Monoid’ is redundant
      except perhaps to import instances from ‘Data.Monoid’
    To import instances alone, use: import Data.Monoid()
   |
13 | import Data.Monoid (Monoid, mempty, mappend, mconcat, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Sound/MIDI/Writer/Status.hs:14:1: warning: [-Wunused-imports]
    The import of ‘<>, Semigroup’
    from module ‘Data.Semigroup’ is redundant
   |
14 | import Data.Semigroup (Semigroup, sconcat, (<>), )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Sound/MIDI/Writer/Status.hs:36:4: warning: [-Wnoncanonical-monoid-instances]
    Noncanonical ‘mappend’ definition detected
    in the instance declaration for ‘Monoid (T compress writer)’.
    ‘mappend’ will eventually be removed in favour of ‘(<>)’
    Either remove definition for ‘mappend’ (recommended) or define as ‘mappend = (<>)’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/semigroup-monoid
   |
36 |    mappend = genAppend Cons decons
   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[29 of 42] Compiling Sound.MIDI.Message.Channel.Voice
[30 of 42] Compiling Sound.MIDI.Message.Channel
[31 of 42] Compiling Sound.MIDI.Message.Class.Utility
[32 of 42] Compiling Sound.MIDI.General
[33 of 42] Compiling Sound.MIDI.File.Event.Meta
[34 of 42] Compiling Sound.MIDI.Message
[35 of 42] Compiling Sound.MIDI.File.Event

src/Sound/MIDI/File/Event.hs:55:22: warning: [GHC-68441] [-Wdeprecations]
    In the use of type constructor or class ‘T’
    (imported from Sound.MIDI.File.Event.SystemExclusive):
    Deprecated: "implement this data type properly"
   |
55 |    | SystemExclusive SysEx.T
   |                      ^^^^^^^
[36 of 42] Compiling Sound.MIDI.Message.Class.Query
[37 of 42] Compiling Sound.MIDI.Message.Class.Construct
[38 of 42] Compiling Sound.MIDI.Message.Class.Check
[39 of 42] Compiling Sound.MIDI.File
[40 of 42] Compiling Sound.MIDI.File.Save

src/Sound/MIDI/File/Save.hs:25:1: warning: [-Wunused-imports]
    The import of ‘Data.Foldable’ is redundant
      except perhaps to import instances from ‘Data.Foldable’
    To import instances alone, use: import Data.Foldable()
   |
25 | import Data.Foldable (foldMap, )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[41 of 42] Compiling Sound.MIDI.File.Load

src/Sound/MIDI/File/Load.hs:261:16: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘showTime’ (imported from Sound.MIDI.File):
    Deprecated: "only use this for debugging"
    |
261 |                MIDIFile.showTime
    |                ^^^^^^^^^^^^^^^^^

src/Sound/MIDI/File/Load.hs:262:23: warning: [GHC-68441] [-Wdeprecations]
    In the use of ‘showEvent’ (imported from Sound.MIDI.File):
    Deprecated: "only use this for debugging"
    |
262 |                (\e -> MIDIFile.showEvent e . showString "\n")
    |                       ^^^^^^^^^^^^^^^^^^
[42 of 42] Compiling Sound.MIDI.Example.ControllerRamp
Configuring test suite 'test' for midi-0.2.2.4...
Preprocessing test suite 'test' for midi-0.2.2.4...
Building test suite 'test' for midi-0.2.2.4...
[1 of 8] Compiling Common
[2 of 8] Compiling Example
[3 of 8] Compiling Sound.MIDI.Parser.Exception
[4 of 8] Compiling Sound.MIDI.Parser.Class
[5 of 8] Compiling Sound.MIDI.Parser.Warning
[6 of 8] Compiling Sound.MIDI.Parser.Stream

parser/Sound/MIDI/Parser/Stream.hs:11:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
11 | import Control.Applicative (Applicative, pure, (<*>), )
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[7 of 8] Compiling Parser
[8 of 8] Compiling Main

test/Main.hs:192:20: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘[MidiFile.Track]’ not matched: []
    |
192 |                let (lastTrack1:_) = Match.drop initTracks0 tracks1
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[9 of 9] Linking /tmp/workdir-midi/midi-0.2.2.4/dist-newstyle/build/x86_64-linux/ghc-9.6.6/midi-0.2.2.4/t/test/build/test/test
