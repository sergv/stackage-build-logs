Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - algebra-4.3.1 (lib) (first run)
Warning: algebra.cabal:35:3: The field "other-extensions" is available only
since the Cabal specification version 1.10.
Configuring library for algebra-4.3.1...
Preprocessing library for algebra-4.3.1...
Building library for algebra-4.3.1...
[ 1 of 72] Compiling Numeric.Additive.Class
[ 2 of 72] Compiling Numeric.Algebra.Class
[ 3 of 72] Compiling Numeric.Additive.Group
[ 4 of 72] Compiling Numeric.Algebra.Factorable
[ 5 of 72] Compiling Numeric.Algebra.Unital
[ 6 of 72] Compiling Numeric.Algebra.Idempotent
[ 7 of 72] Compiling Numeric.Algebra.Hopf
[ 8 of 72] Compiling Numeric.Algebra.Division
[ 9 of 72] Compiling Numeric.Algebra.Commutative
[10 of 72] Compiling Numeric.Algebra.Involutive

src/Numeric/Algebra/Involutive.hs:352:1: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘InvolutiveBialgebra r h’ matches
        instance (Bialgebra r h, InvolutiveAlgebra r h,
                  InvolutiveCoalgebra r h) =>
                 InvolutiveBialgebra r h
          -- Defined at src/Numeric/Algebra/Involutive.hs:345:10
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the context: (InvolutiveBialgebra r h,
                       TriviallyInvolutiveAlgebra r h, TriviallyInvolutiveCoalgebra r h)
      While checking the super-classes of class ‘TriviallyInvolutiveBialgebra’
      In the class declaration for ‘TriviallyInvolutiveBialgebra’
    |
352 | class ( InvolutiveBialgebra r h
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Numeric/Algebra/Involutive.hs:357:10: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘InvolutiveBialgebra r h’ matches
        instance (Bialgebra r h, InvolutiveAlgebra r h,
                  InvolutiveCoalgebra r h) =>
                 InvolutiveBialgebra r h
          -- Defined at src/Numeric/Algebra/Involutive.hs:345:10
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the instance declaration for
        ‘TriviallyInvolutiveBialgebra r h’
    |
357 | instance ( InvolutiveBialgebra r h
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^...
[11 of 72] Compiling Numeric.Band.Class
[12 of 72] Compiling Numeric.Band.Rectangular
[13 of 72] Compiling Numeric.Decidable.Associates
[14 of 72] Compiling Numeric.Decidable.Units
[15 of 72] Compiling Numeric.Decidable.Zero
[16 of 72] Compiling Numeric.Dioid.Class
[17 of 72] Compiling Numeric.Module.Class
[18 of 72] Compiling Numeric.Order.Class
[19 of 72] Compiling Numeric.Order.Additive
[20 of 72] Compiling Numeric.Partial.Semigroup
[21 of 72] Compiling Numeric.Partial.Monoid
[22 of 72] Compiling Numeric.Partial.Group
[23 of 72] Compiling Numeric.Coalgebra.Categorical
[24 of 72] Compiling Numeric.Rig.Class
[25 of 72] Compiling Numeric.Rig.Characteristic
[26 of 72] Compiling Numeric.Quadrance.Class
[27 of 72] Compiling Numeric.Rig.Ordered
[28 of 72] Compiling Numeric.Rng.Class
[29 of 72] Compiling Numeric.Ring.Class

src/Numeric/Ring/Class.hs:15:1: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Rng r’ matches
        instance (Group r, Numeric.Algebra.Class.Semiring r) => Rng r
          -- Defined at src/Numeric/Rng/Class.hs:12:10
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the context: (Rig r, Rng r)
      While checking the super-classes of class ‘Ring’
      In the class declaration for ‘Ring’
   |
15 | class (Rig r, Rng r) => Ring r where
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
[30 of 72] Compiling Numeric.Ring.Local
[31 of 72] Compiling Numeric.Ring.Division
[32 of 72] Compiling Numeric.Order.LocallyFinite
[33 of 72] Compiling Numeric.Module.Representable
[34 of 72] Compiling Numeric.Covector

src/Numeric/Covector.hs:54:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad (Covector r)’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
54 |   return a = Covector $ \k -> k a
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[35 of 72] Compiling Numeric.Coalgebra.Trigonometric.Class
[36 of 72] Compiling Numeric.Coalgebra.Hyperbolic.Class
[37 of 72] Compiling Numeric.Algebra.Distinguished.Class
[38 of 72] Compiling Numeric.Algebra.Dual.Class
[39 of 72] Compiling Numeric.Algebra.Complex.Class
[40 of 72] Compiling Numeric.Algebra.Quaternion.Class
[41 of 72] Compiling Numeric.Coalgebra.Incidence
[42 of 72] Compiling Numeric.Algebra.Incidence
[43 of 72] Compiling Numeric.Semiring.Involutive
[44 of 72] Compiling Numeric.Semiring.ZeroProduct
[45 of 72] Compiling Numeric.Algebra.Unital.UnitNormalForm
[46 of 72] Compiling Numeric.Domain.Internal

src/Numeric/Domain/Internal.hs:28:1: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Domain d’ matches
        instance (ZeroProductSemiring d, Ring d) => Domain d
          -- Defined at src/Numeric/Domain/Internal.hs:25:10
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the context: (Domain d, Commutative d)
      While checking the super-classes of class ‘IntegralDomain’
      In the class declaration for ‘IntegralDomain’
   |
28 | class (Domain d, Commutative d) => IntegralDomain d where
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

src/Numeric/Domain/Internal.hs:110:7: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘Maybe d’ not matched: Nothing
    |
110 |       Just t'  = recipUnit ug
    |       ^^^^^^^^^^^^^^^^^^^^^^^

src/Numeric/Domain/Internal.hs:112:7: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘Maybe d’ not matched: Nothing
    |
112 |       Just s   = recipUnit uf
    |       ^^^^^^^^^^^^^^^^^^^^^^^

src/Numeric/Domain/Internal.hs:120:13: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘Maybe c’ not matched: Nothing
    |
120 |             Just u    = recipUnit ur
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
[47 of 72] Compiling Numeric.Domain.UFD
[48 of 72] Compiling Numeric.Domain.PID
[49 of 72] Compiling Numeric.Domain.Integral
[50 of 72] Compiling Numeric.Domain.Euclidean

src/Numeric/Domain/Euclidean.hs:30:38: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘[(r, r, r)]’ not matched: []
   |
30 |                                , let (_, s, _) : _ = euclid n mi
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
[51 of 72] Compiling Numeric.Field.Class
[52 of 72] Compiling Numeric.Algebra
[53 of 72] Compiling Numeric.Rng.Zero
[54 of 72] Compiling Numeric.Ring.Rng

src/Numeric/Ring/Rng.hs:46:10: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Rng r’ matches
        instance (Group r, Semiring r) => Rng r
          -- Defined at src/Numeric/Rng/Class.hs:12:10
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the instance declaration for ‘Multiplicative (RngRing r)’
   |
46 | instance Rng r => Multiplicative (RngRing r) where
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Numeric/Ring/Rng.hs:49:10: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Rng r’ matches
        instance (Group r, Semiring r) => Rng r
          -- Defined at src/Numeric/Rng/Class.hs:12:10
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the instance declaration for ‘Commutative (RngRing r)’
   |
49 | instance (Commutative r, Rng r) => Commutative (RngRing r)
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Numeric/Ring/Rng.hs:51:10: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Rng s’ matches
        instance (Group r, Semiring r) => Rng r
          -- Defined at src/Numeric/Rng/Class.hs:12:10
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the instance declaration for
        ‘LeftModule (RngRing s) (RngRing s)’
   |
51 | instance Rng s => LeftModule (RngRing s) (RngRing s) where
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Numeric/Ring/Rng.hs:54:10: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Rng s’ matches
        instance (Group r, Semiring r) => Rng r
          -- Defined at src/Numeric/Rng/Class.hs:12:10
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the instance declaration for
        ‘RightModule (RngRing s) (RngRing s)’
   |
54 | instance Rng s => RightModule (RngRing s) (RngRing s) where
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Numeric/Ring/Rng.hs:57:10: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Rng r’ matches
        instance (Group r, Semiring r) => Rng r
          -- Defined at src/Numeric/Rng/Class.hs:12:10
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the instance declaration for ‘Unital (RngRing r)’
   |
57 | instance Rng r => Unital (RngRing r) where
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Numeric/Ring/Rng.hs:60:10: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Rng r’ matches
        instance (Group r, Semiring r) => Rng r
          -- Defined at src/Numeric/Rng/Class.hs:12:10
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the instance declaration for ‘Division (RngRing r)’
   |
60 | instance (Rng r, Division r) => Division (RngRing r) where
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Numeric/Ring/Rng.hs:63:10: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Rng r’ matches
        instance (Group r, Semiring r) => Rng r
          -- Defined at src/Numeric/Rng/Class.hs:12:10
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the instance declaration for ‘Semiring (RngRing r)’
   |
63 | instance Rng r => Semiring (RngRing r) 
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Numeric/Ring/Rng.hs:65:10: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Rng r’ matches
        instance (Group r, Semiring r) => Rng r
          -- Defined at src/Numeric/Rng/Class.hs:12:10
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the instance declaration for ‘Rig (RngRing r)’
   |
65 | instance Rng r => Rig (RngRing r)
   |          ^^^^^^^^^^^^^^^^^^^^^^^^

src/Numeric/Ring/Rng.hs:67:10: warning: [-Wsimplifiable-class-constraints]
    • The constraint ‘Rng r’ matches
        instance (Group r, Semiring r) => Rng r
          -- Defined at src/Numeric/Rng/Class.hs:12:10
      This makes type inference for inner bindings fragile;
        either use MonoLocalBinds, or simplify it using the instance
    • In the instance declaration for ‘Ring (RngRing r)’
   |
67 | instance Rng r => Ring (RngRing r)
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^
[55 of 72] Compiling Numeric.Ring.Opposite
[56 of 72] Compiling Numeric.Ring.Endomorphism

src/Numeric/Ring/Endomorphism.hs:22:3: warning: [-Wnoncanonical-monoid-instances]
    Noncanonical ‘mappend’ definition detected
    in the instance declaration for ‘Monoid (End r)’.
    ‘mappend’ will eventually be removed in favour of ‘(<>)’
    Either remove definition for ‘mappend’ (recommended) or define as ‘mappend = (<>)’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/semigroup-monoid
   |
22 |   mappend (End a) (End b) = End (a . b)
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[57 of 72] Compiling Numeric.Map

src/Numeric/Map.hs:74:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad (Map r b)’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
74 |   return a = Map $ \k _ -> k a
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[58 of 72] Compiling Numeric.Log
[59 of 72] Compiling Numeric.Exp
[60 of 72] Compiling Numeric.Decidable.Nilpotent
[61 of 72] Compiling Numeric.Coalgebra.Trigonometric

src/Numeric/Coalgebra/Trigonometric.hs:91:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Trig’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
91 |   return = pureRep
   |   ^^^^^^^^^^^^^^^^
[62 of 72] Compiling Numeric.Coalgebra.Quaternion

src/Numeric/Coalgebra/Quaternion.hs:101:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Quaternion'’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
    |
101 |   return = pureRep
    |   ^^^^^^^^^^^^^^^^
[63 of 72] Compiling Numeric.Coalgebra.Hyperbolic

src/Numeric/Coalgebra/Hyperbolic.hs:66:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Hyper’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
66 |   return = pureRep
   |   ^^^^^^^^^^^^^^^^
[64 of 72] Compiling Numeric.Coalgebra.Geometric
[65 of 72] Compiling Numeric.Coalgebra.Dual

src/Numeric/Coalgebra/Dual.hs:73:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Dual'’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
73 |   return = pureRep
   |   ^^^^^^^^^^^^^^^^
[66 of 72] Compiling Numeric.Algebra.Quaternion

src/Numeric/Algebra/Quaternion.hs:101:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Quaternion’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
    |
101 |   return = pureRep
    |   ^^^^^^^^^^^^^^^^
[67 of 72] Compiling Numeric.Algebra.Hyperbolic

src/Numeric/Algebra/Hyperbolic.hs:65:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Hyper'’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
65 |   return = pureRep
   |   ^^^^^^^^^^^^^^^^
[68 of 72] Compiling Numeric.Algebra.Dual

src/Numeric/Algebra/Dual.hs:74:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Dual’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
74 |   return = pureRep
   |   ^^^^^^^^^^^^^^^^
[69 of 72] Compiling Numeric.Algebra.Complex

src/Numeric/Algebra/Complex.hs:88:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Complex’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
88 |   return = pureRep
   |   ^^^^^^^^^^^^^^^^
[70 of 72] Compiling Numeric.Domain.Class
[71 of 72] Compiling Numeric.Domain.GCD
[72 of 72] Compiling Numeric.Field.Fraction

src/Numeric/Field/Fraction.hs:53:25: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding:
        Patterns of type ‘Maybe d’ not matched: Nothing
   |
53 |                         Just ub' = recipUnit ub
   |                         ^^^^^^^^^^^^^^^^^^^^^^^

src/Numeric/Field/Fraction.hs:77:25: warning: [GHC-62161] [-Wincomplete-uni-patterns]
    Pattern match(es) are non-exhaustive
    In a pattern binding: Patterns of type ‘(d, d)’ not matched: (_, _)
   |
77 |       | otherwise = let (recipUnit -> Just u, p') = splitUnit p in
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
