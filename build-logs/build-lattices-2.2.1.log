Build profile: -w ghc-9.6.6 -O1
In order, the following will be built (use -v for more details):
 - lattices-2.2.1 (lib) (first run)
 - lattices-2.2.1 (test:test) (first run)
Configuring library for lattices-2.2.1...
Preprocessing library for lattices-2.2.1...
Building library for lattices-2.2.1...
[ 1 of 21] Compiling Algebra.Heyting.Free.Expr
[ 2 of 21] Compiling Algebra.PartialOrd
[ 3 of 21] Compiling Algebra.Lattice

src/Algebra/Lattice.hs:52:62: warning: [-Wunused-imports]
    The import of ‘Semigroup’ from module ‘Data.Semigroup’ is redundant
   |
52 | import Data.Semigroup        (All (..), Any (..), Endo (..), Semigroup (..))
   |                                                              ^^^^^^^^^^^^^^

src/Algebra/Lattice.hs:365:3: warning: [-Wnoncanonical-monoid-instances]
    Noncanonical ‘mappend’ definition detected
    in the instance declaration for ‘Monoid (Join a)’.
    ‘mappend’ will eventually be removed in favour of ‘(<>)’
    Either remove definition for ‘mappend’ (recommended) or define as ‘mappend = (<>)’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/semigroup-monoid
    |
365 |   Join a `mappend` Join b = Join (a \/ b)
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/Algebra/Lattice.hs:401:3: warning: [-Wnoncanonical-monoid-instances]
    Noncanonical ‘mappend’ definition detected
    in the instance declaration for ‘Monoid (Meet a)’.
    ‘mappend’ will eventually be removed in favour of ‘(<>)’
    Either remove definition for ‘mappend’ (recommended) or define as ‘mappend = (<>)’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/semigroup-monoid
    |
401 |   Meet a `mappend` Meet b = Meet (a /\ b)
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ 4 of 21] Compiling Algebra.Lattice.Wide

src/Algebra/Lattice/Wide.hs:55:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative Wide’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
55 |   pure = return
   |   ^^^^^^^^^^^^^

src/Algebra/Lattice/Wide.hs:59:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Wide’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
59 |   return       = Middle
   |   ^^^^^^^^^^^^^^^^^^^^^
[ 5 of 21] Compiling Algebra.Lattice.Op

src/Algebra/Lattice/Op.hs:49:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative Op’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
49 |   pure = return
   |   ^^^^^^^^^^^^^

src/Algebra/Lattice/Op.hs:53:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Op’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
53 |   return      = Op
   |   ^^^^^^^^^^^^^^^^
[ 6 of 21] Compiling Algebra.Lattice.N5
[ 7 of 21] Compiling Algebra.Lattice.M3
[ 8 of 21] Compiling Algebra.Lattice.Lifted

src/Algebra/Lattice/Lifted.hs:51:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative Lifted’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
51 |   pure = return
   |   ^^^^^^^^^^^^^

src/Algebra/Lattice/Lifted.hs:55:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Lifted’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
55 |   return        = Lift
   |   ^^^^^^^^^^^^^^^^^^^^
[ 9 of 21] Compiling Algebra.Lattice.Lexicographic

src/Algebra/Lattice/Lexicographic.hs:59:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative (Lexicographic k)’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
59 |   pure = return
   |   ^^^^^^^^^^^^^

src/Algebra/Lattice/Lexicographic.hs:64:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad (Lexicographic k)’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
64 |   return                   =  Lexicographic bottom
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[10 of 21] Compiling Algebra.Lattice.Levitated

src/Algebra/Lattice/Levitated.hs:53:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative Levitated’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
53 |   pure = return
   |   ^^^^^^^^^^^^^

src/Algebra/Lattice/Levitated.hs:57:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Levitated’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
57 |   return            = Levitate
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[11 of 21] Compiling Algebra.Lattice.Free.Final
[12 of 21] Compiling Algebra.Lattice.Free

src/Algebra/Lattice/Free.hs:20:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
20 | import Control.Applicative          (liftA2)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[13 of 21] Compiling Algebra.Lattice.Dropped

src/Algebra/Lattice/Dropped.hs:51:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative Dropped’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
51 |   pure = return
   |   ^^^^^^^^^^^^^

src/Algebra/Lattice/Dropped.hs:55:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Dropped’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
55 |   return        = Drop
   |   ^^^^^^^^^^^^^^^^^^^^
[14 of 21] Compiling Algebra.Lattice.Divisibility

src/Algebra/Lattice/Divisibility.hs:47:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative Divisibility’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
47 |   pure = return
   |   ^^^^^^^^^^^^^

src/Algebra/Lattice/Divisibility.hs:51:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Divisibility’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
51 |   return           = Divisibility
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[15 of 21] Compiling Algebra.Heyting
[16 of 21] Compiling Algebra.Lattice.ZeroHalfOne
[17 of 21] Compiling Algebra.Lattice.Unicode
[18 of 21] Compiling Algebra.Lattice.Ordered

src/Algebra/Lattice/Ordered.hs:49:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘pure = return’ definition detected
    in the instance declaration for ‘Applicative Ordered’.
    Move definition from ‘return’ to ‘pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
49 |   pure = return
   |   ^^^^^^^^^^^^^

src/Algebra/Lattice/Ordered.hs:53:3: warning: [-Wnoncanonical-monad-instances]
    Noncanonical ‘return’ definition detected
    in the instance declaration for ‘Monad Ordered’.
    ‘return’ will eventually be removed in favour of ‘pure’
    Either remove definition for ‘return’ (recommended) or define as ‘return = pure’
    See also: https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
   |
53 |   return           = Ordered
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^
[19 of 21] Compiling Algebra.Lattice.M2
[20 of 21] Compiling Algebra.Heyting.Free

src/Algebra/Heyting/Free.hs:21:1: warning: [-Wunused-imports]
    The import of ‘Control.Applicative’ is redundant
      except perhaps to import instances from ‘Control.Applicative’
    To import instances alone, use: import Control.Applicative()
   |
21 | import Control.Applicative          (liftA2)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[21 of 21] Compiling Algebra.PartialOrd.Instances
Configuring test suite 'test' for lattices-2.2.1...
Preprocessing test suite 'test' for lattices-2.2.1...
Building test suite 'test' for lattices-2.2.1...
[1 of 1] Compiling Main

test/Tests.hs:13:55: warning: [-Wunused-imports]
    The import of ‘<>’ from module ‘Data.Semigroup’ is redundant
   |
13 | import Data.Semigroup           (All, Any, Endo (..), (<>))
   |                                                       ^^^^

test/Tests.hs:59:18: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
59 | data Proxy (a :: *) = Proxy
   |                  ^

test/Tests.hs:60:19: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
60 | data Proxy1 (a :: * -> *) = Proxy1
   |                   ^

test/Tests.hs:60:24: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
   |
60 | data Proxy1 (a :: * -> *) = Proxy1
   |                        ^

test/Tests.hs:145:27: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
145 | monadLaws :: forall (m :: * -> *). ( Monad m
    |                           ^

test/Tests.hs:145:32: warning: [GHC-39567] [-Wstar-is-type]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: Use ‘Type’ from ‘Data.Kind’ instead.
    |
145 | monadLaws :: forall (m :: * -> *). ( Monad m
    |                                ^
[2 of 2] Linking /tmp/workdir-lattices/lattices-2.2.1/dist-newstyle/build/x86_64-linux/ghc-9.6.6/lattices-2.2.1/t/test/build/test/test
